//
// Generated by Bluespec Compiler (build 629c10a)
//
// On Wed Dec 13 10:46:11 UTC 2023
//
//
// Ports:
// Name                         I/O  size props
// spi_miso                       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// spi_mosi                       I     1 reg
// spi_sck                        I     1 reg
// spi_ssn                        I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBsvTop(CLK,
		RST_N,

		spi_miso,

		spi_mosi,

		spi_sck,

		spi_ssn);
  input  CLK;
  input  RST_N;

  // value method spi_miso
  output spi_miso;

  // action method serial_in
  input  spi_mosi;

  // action method serial_clk
  input  spi_sck;

  // action method serial_select
  input  spi_ssn;

  // signals for module outputs
  wire spi_miso;

  // register hwmain_count
  reg [3 : 0] hwmain_count;
  wire [3 : 0] hwmain_count_D_IN;
  wire hwmain_count_EN;

  // register hwmain_first
  reg [7 : 0] hwmain_first;
  wire [7 : 0] hwmain_first_D_IN;
  wire hwmain_first_EN;

  // register hwmain_fourth
  reg [7 : 0] hwmain_fourth;
  wire [7 : 0] hwmain_fourth_D_IN;
  wire hwmain_fourth_EN;

  // register hwmain_integrator1_accum
  reg [31 : 0] hwmain_integrator1_accum;
  wire [31 : 0] hwmain_integrator1_accum_D_IN;
  wire hwmain_integrator1_accum_EN;

  // register hwmain_integrator1_avg
  reg [31 : 0] hwmain_integrator1_avg;
  wire [31 : 0] hwmain_integrator1_avg_D_IN;
  wire hwmain_integrator1_avg_EN;

  // register hwmain_integrator1_curr
  reg [31 : 0] hwmain_integrator1_curr;
  wire [31 : 0] hwmain_integrator1_curr_D_IN;
  wire hwmain_integrator1_curr_EN;

  // register hwmain_integrator1_prev
  reg [31 : 0] hwmain_integrator1_prev;
  wire [31 : 0] hwmain_integrator1_prev_D_IN;
  wire hwmain_integrator1_prev_EN;

  // register hwmain_integrator1_result
  reg [31 : 0] hwmain_integrator1_result;
  wire [31 : 0] hwmain_integrator1_result_D_IN;
  wire hwmain_integrator1_result_EN;

  // register hwmain_integrator1_state
  reg [3 : 0] hwmain_integrator1_state;
  reg [3 : 0] hwmain_integrator1_state_D_IN;
  wire hwmain_integrator1_state_EN;

  // register hwmain_integrator1_term1
  reg [31 : 0] hwmain_integrator1_term1;
  wire [31 : 0] hwmain_integrator1_term1_D_IN;
  wire hwmain_integrator1_term1_EN;

  // register hwmain_integrator1_term2
  reg [31 : 0] hwmain_integrator1_term2;
  wire [31 : 0] hwmain_integrator1_term2_D_IN;
  wire hwmain_integrator1_term2_EN;

  // register hwmain_integrator1_valid
  reg hwmain_integrator1_valid;
  wire hwmain_integrator1_valid_D_IN, hwmain_integrator1_valid_EN;

  // register hwmain_integrator2_accum
  reg [31 : 0] hwmain_integrator2_accum;
  wire [31 : 0] hwmain_integrator2_accum_D_IN;
  wire hwmain_integrator2_accum_EN;

  // register hwmain_integrator2_avg
  reg [31 : 0] hwmain_integrator2_avg;
  wire [31 : 0] hwmain_integrator2_avg_D_IN;
  wire hwmain_integrator2_avg_EN;

  // register hwmain_integrator2_curr
  reg [31 : 0] hwmain_integrator2_curr;
  wire [31 : 0] hwmain_integrator2_curr_D_IN;
  wire hwmain_integrator2_curr_EN;

  // register hwmain_integrator2_prev
  reg [31 : 0] hwmain_integrator2_prev;
  wire [31 : 0] hwmain_integrator2_prev_D_IN;
  wire hwmain_integrator2_prev_EN;

  // register hwmain_integrator2_result
  reg [31 : 0] hwmain_integrator2_result;
  wire [31 : 0] hwmain_integrator2_result_D_IN;
  wire hwmain_integrator2_result_EN;

  // register hwmain_integrator2_state
  reg [3 : 0] hwmain_integrator2_state;
  reg [3 : 0] hwmain_integrator2_state_D_IN;
  wire hwmain_integrator2_state_EN;

  // register hwmain_integrator2_term1
  reg [31 : 0] hwmain_integrator2_term1;
  wire [31 : 0] hwmain_integrator2_term1_D_IN;
  wire hwmain_integrator2_term1_EN;

  // register hwmain_integrator2_term2
  reg [31 : 0] hwmain_integrator2_term2;
  wire [31 : 0] hwmain_integrator2_term2_D_IN;
  wire hwmain_integrator2_term2_EN;

  // register hwmain_integrator2_valid
  reg hwmain_integrator2_valid;
  wire hwmain_integrator2_valid_D_IN, hwmain_integrator2_valid_EN;

  // register hwmain_second
  reg [7 : 0] hwmain_second;
  wire [7 : 0] hwmain_second_D_IN;
  wire hwmain_second_EN;

  // register hwmain_shiftCount
  reg [3 : 0] hwmain_shiftCount;
  wire [3 : 0] hwmain_shiftCount_D_IN;
  wire hwmain_shiftCount_EN;

  // register hwmain_shiftout
  reg [31 : 0] hwmain_shiftout;
  wire [31 : 0] hwmain_shiftout_D_IN;
  wire hwmain_shiftout_EN;

  // register hwmain_third
  reg [7 : 0] hwmain_third;
  wire [7 : 0] hwmain_third_D_IN;
  wire hwmain_third_EN;

  // register spi_csin
  reg [3 : 0] spi_csin;
  wire [3 : 0] spi_csin_D_IN;
  wire spi_csin_EN;

  // register spi_prevSck
  reg spi_prevSck;
  wire spi_prevSck_D_IN, spi_prevSck_EN;

  // register spi_rx_cnt
  reg [3 : 0] spi_rx_cnt;
  wire [3 : 0] spi_rx_cnt_D_IN;
  wire spi_rx_cnt_EN;

  // register spi_rx_word
  reg [7 : 0] spi_rx_word;
  wire [7 : 0] spi_rx_word_D_IN;
  wire spi_rx_word_EN;

  // register spi_rxin
  reg [3 : 0] spi_rxin;
  wire [3 : 0] spi_rxin_D_IN;
  wire spi_rxin_EN;

  // register spi_sckin
  reg [3 : 0] spi_sckin;
  wire [3 : 0] spi_sckin_D_IN;
  wire spi_sckin_EN;

  // register spi_tx_cnt
  reg [3 : 0] spi_tx_cnt;
  wire [3 : 0] spi_tx_cnt_D_IN;
  wire spi_tx_cnt_EN;

  // register spi_tx_word
  reg [8 : 0] spi_tx_word;
  wire [8 : 0] spi_tx_word_D_IN;
  wire spi_tx_word_EN;

  // register spi_txdr
  reg spi_txdr;
  wire spi_txdr_D_IN, spi_txdr_EN;

  // ports of submodule hwmain_dataInQ
  wire [7 : 0] hwmain_dataInQ_D_IN, hwmain_dataInQ_D_OUT;
  wire hwmain_dataInQ_CLR,
       hwmain_dataInQ_DEQ,
       hwmain_dataInQ_EMPTY_N,
       hwmain_dataInQ_ENQ,
       hwmain_dataInQ_FULL_N;

  // ports of submodule hwmain_dataOutQ
  wire [7 : 0] hwmain_dataOutQ_D_IN, hwmain_dataOutQ_D_OUT;
  wire hwmain_dataOutQ_CLR,
       hwmain_dataOutQ_DEQ,
       hwmain_dataOutQ_EMPTY_N,
       hwmain_dataOutQ_ENQ,
       hwmain_dataOutQ_FULL_N;

  // ports of submodule hwmain_integrator1_fadd_calcQ
  wire [54 : 0] hwmain_integrator1_fadd_calcQ_D_IN,
		hwmain_integrator1_fadd_calcQ_D_OUT;
  wire hwmain_integrator1_fadd_calcQ_CLR,
       hwmain_integrator1_fadd_calcQ_DEQ,
       hwmain_integrator1_fadd_calcQ_EMPTY_N,
       hwmain_integrator1_fadd_calcQ_ENQ,
       hwmain_integrator1_fadd_calcQ_FULL_N;

  // ports of submodule hwmain_integrator1_fadd_inProcQ
  wire [62 : 0] hwmain_integrator1_fadd_inProcQ_D_IN,
		hwmain_integrator1_fadd_inProcQ_D_OUT;
  wire hwmain_integrator1_fadd_inProcQ_CLR,
       hwmain_integrator1_fadd_inProcQ_DEQ,
       hwmain_integrator1_fadd_inProcQ_EMPTY_N,
       hwmain_integrator1_fadd_inProcQ_ENQ,
       hwmain_integrator1_fadd_inProcQ_FULL_N;

  // ports of submodule hwmain_integrator1_fadd_inQ
  reg [63 : 0] hwmain_integrator1_fadd_inQ_D_IN;
  wire [63 : 0] hwmain_integrator1_fadd_inQ_D_OUT;
  wire hwmain_integrator1_fadd_inQ_CLR,
       hwmain_integrator1_fadd_inQ_DEQ,
       hwmain_integrator1_fadd_inQ_EMPTY_N,
       hwmain_integrator1_fadd_inQ_ENQ,
       hwmain_integrator1_fadd_inQ_FULL_N;

  // ports of submodule hwmain_integrator1_fadd_normalizeQ
  wire [27 : 0] hwmain_integrator1_fadd_normalizeQ_D_IN,
		hwmain_integrator1_fadd_normalizeQ_D_OUT;
  wire hwmain_integrator1_fadd_normalizeQ_CLR,
       hwmain_integrator1_fadd_normalizeQ_DEQ,
       hwmain_integrator1_fadd_normalizeQ_EMPTY_N,
       hwmain_integrator1_fadd_normalizeQ_ENQ,
       hwmain_integrator1_fadd_normalizeQ_FULL_N;

  // ports of submodule hwmain_integrator1_fadd_normalizeQ1
  wire [27 : 0] hwmain_integrator1_fadd_normalizeQ1_D_IN,
		hwmain_integrator1_fadd_normalizeQ1_D_OUT;
  wire hwmain_integrator1_fadd_normalizeQ1_CLR,
       hwmain_integrator1_fadd_normalizeQ1_DEQ,
       hwmain_integrator1_fadd_normalizeQ1_EMPTY_N,
       hwmain_integrator1_fadd_normalizeQ1_ENQ,
       hwmain_integrator1_fadd_normalizeQ1_FULL_N;

  // ports of submodule hwmain_integrator1_fadd_normalizeQ2
  wire [27 : 0] hwmain_integrator1_fadd_normalizeQ2_D_IN,
		hwmain_integrator1_fadd_normalizeQ2_D_OUT;
  wire hwmain_integrator1_fadd_normalizeQ2_CLR,
       hwmain_integrator1_fadd_normalizeQ2_DEQ,
       hwmain_integrator1_fadd_normalizeQ2_EMPTY_N,
       hwmain_integrator1_fadd_normalizeQ2_ENQ,
       hwmain_integrator1_fadd_normalizeQ2_FULL_N;

  // ports of submodule hwmain_integrator1_fadd_normalizeQ3
  wire [27 : 0] hwmain_integrator1_fadd_normalizeQ3_D_IN,
		hwmain_integrator1_fadd_normalizeQ3_D_OUT;
  wire hwmain_integrator1_fadd_normalizeQ3_CLR,
       hwmain_integrator1_fadd_normalizeQ3_DEQ,
       hwmain_integrator1_fadd_normalizeQ3_EMPTY_N,
       hwmain_integrator1_fadd_normalizeQ3_ENQ,
       hwmain_integrator1_fadd_normalizeQ3_FULL_N;

  // ports of submodule hwmain_integrator1_fadd_normalizeQ4
  wire [27 : 0] hwmain_integrator1_fadd_normalizeQ4_D_IN,
		hwmain_integrator1_fadd_normalizeQ4_D_OUT;
  wire hwmain_integrator1_fadd_normalizeQ4_CLR,
       hwmain_integrator1_fadd_normalizeQ4_DEQ,
       hwmain_integrator1_fadd_normalizeQ4_EMPTY_N,
       hwmain_integrator1_fadd_normalizeQ4_ENQ,
       hwmain_integrator1_fadd_normalizeQ4_FULL_N;

  // ports of submodule hwmain_integrator1_fadd_outQ
  wire [31 : 0] hwmain_integrator1_fadd_outQ_D_IN,
		hwmain_integrator1_fadd_outQ_D_OUT;
  wire hwmain_integrator1_fadd_outQ_CLR,
       hwmain_integrator1_fadd_outQ_DEQ,
       hwmain_integrator1_fadd_outQ_EMPTY_N,
       hwmain_integrator1_fadd_outQ_ENQ,
       hwmain_integrator1_fadd_outQ_FULL_N;

  // ports of submodule hwmain_integrator1_fmult_mult16_dsp_mult
  reg [15 : 0] hwmain_integrator1_fmult_mult16_dsp_mult_A,
	       hwmain_integrator1_fmult_mult16_dsp_mult_B;
  wire [31 : 0] hwmain_integrator1_fmult_mult16_dsp_mult_O;

  // ports of submodule hwmain_integrator1_fmult_multQ
  wire [31 : 0] hwmain_integrator1_fmult_multQ_D_IN,
		hwmain_integrator1_fmult_multQ_D_OUT;
  wire hwmain_integrator1_fmult_multQ_CLR,
       hwmain_integrator1_fmult_multQ_DEQ,
       hwmain_integrator1_fmult_multQ_EMPTY_N,
       hwmain_integrator1_fmult_multQ_ENQ,
       hwmain_integrator1_fmult_multQ_FULL_N;

  // ports of submodule hwmain_integrator1_fmult_outQ
  wire [31 : 0] hwmain_integrator1_fmult_outQ_D_IN,
		hwmain_integrator1_fmult_outQ_D_OUT;
  wire hwmain_integrator1_fmult_outQ_CLR,
       hwmain_integrator1_fmult_outQ_DEQ,
       hwmain_integrator1_fmult_outQ_EMPTY_N,
       hwmain_integrator1_fmult_outQ_ENQ,
       hwmain_integrator1_fmult_outQ_FULL_N;

  // ports of submodule hwmain_integrator1_fmult_signExpZeroQ
  reg [10 : 0] hwmain_integrator1_fmult_signExpZeroQ_D_IN;
  wire [10 : 0] hwmain_integrator1_fmult_signExpZeroQ_D_OUT;
  wire hwmain_integrator1_fmult_signExpZeroQ_CLR,
       hwmain_integrator1_fmult_signExpZeroQ_DEQ,
       hwmain_integrator1_fmult_signExpZeroQ_EMPTY_N,
       hwmain_integrator1_fmult_signExpZeroQ_ENQ,
       hwmain_integrator1_fmult_signExpZeroQ_FULL_N;

  // ports of submodule hwmain_integrator1_sampleIn
  wire [31 : 0] hwmain_integrator1_sampleIn_D_IN,
		hwmain_integrator1_sampleIn_D_OUT;
  wire hwmain_integrator1_sampleIn_CLR,
       hwmain_integrator1_sampleIn_DEQ,
       hwmain_integrator1_sampleIn_EMPTY_N,
       hwmain_integrator1_sampleIn_ENQ,
       hwmain_integrator1_sampleIn_FULL_N;

  // ports of submodule hwmain_integrator1_samples
  wire [31 : 0] hwmain_integrator1_samples_D_IN,
		hwmain_integrator1_samples_D_OUT;
  wire hwmain_integrator1_samples_CLR,
       hwmain_integrator1_samples_DEQ,
       hwmain_integrator1_samples_EMPTY_N,
       hwmain_integrator1_samples_ENQ,
       hwmain_integrator1_samples_FULL_N;

  // ports of submodule hwmain_integrator2_fadd_calcQ
  wire [54 : 0] hwmain_integrator2_fadd_calcQ_D_IN,
		hwmain_integrator2_fadd_calcQ_D_OUT;
  wire hwmain_integrator2_fadd_calcQ_CLR,
       hwmain_integrator2_fadd_calcQ_DEQ,
       hwmain_integrator2_fadd_calcQ_EMPTY_N,
       hwmain_integrator2_fadd_calcQ_ENQ,
       hwmain_integrator2_fadd_calcQ_FULL_N;

  // ports of submodule hwmain_integrator2_fadd_inProcQ
  wire [62 : 0] hwmain_integrator2_fadd_inProcQ_D_IN,
		hwmain_integrator2_fadd_inProcQ_D_OUT;
  wire hwmain_integrator2_fadd_inProcQ_CLR,
       hwmain_integrator2_fadd_inProcQ_DEQ,
       hwmain_integrator2_fadd_inProcQ_EMPTY_N,
       hwmain_integrator2_fadd_inProcQ_ENQ,
       hwmain_integrator2_fadd_inProcQ_FULL_N;

  // ports of submodule hwmain_integrator2_fadd_inQ
  reg [63 : 0] hwmain_integrator2_fadd_inQ_D_IN;
  wire [63 : 0] hwmain_integrator2_fadd_inQ_D_OUT;
  wire hwmain_integrator2_fadd_inQ_CLR,
       hwmain_integrator2_fadd_inQ_DEQ,
       hwmain_integrator2_fadd_inQ_EMPTY_N,
       hwmain_integrator2_fadd_inQ_ENQ,
       hwmain_integrator2_fadd_inQ_FULL_N;

  // ports of submodule hwmain_integrator2_fadd_normalizeQ
  wire [27 : 0] hwmain_integrator2_fadd_normalizeQ_D_IN,
		hwmain_integrator2_fadd_normalizeQ_D_OUT;
  wire hwmain_integrator2_fadd_normalizeQ_CLR,
       hwmain_integrator2_fadd_normalizeQ_DEQ,
       hwmain_integrator2_fadd_normalizeQ_EMPTY_N,
       hwmain_integrator2_fadd_normalizeQ_ENQ,
       hwmain_integrator2_fadd_normalizeQ_FULL_N;

  // ports of submodule hwmain_integrator2_fadd_normalizeQ1
  wire [27 : 0] hwmain_integrator2_fadd_normalizeQ1_D_IN,
		hwmain_integrator2_fadd_normalizeQ1_D_OUT;
  wire hwmain_integrator2_fadd_normalizeQ1_CLR,
       hwmain_integrator2_fadd_normalizeQ1_DEQ,
       hwmain_integrator2_fadd_normalizeQ1_EMPTY_N,
       hwmain_integrator2_fadd_normalizeQ1_ENQ,
       hwmain_integrator2_fadd_normalizeQ1_FULL_N;

  // ports of submodule hwmain_integrator2_fadd_normalizeQ2
  wire [27 : 0] hwmain_integrator2_fadd_normalizeQ2_D_IN,
		hwmain_integrator2_fadd_normalizeQ2_D_OUT;
  wire hwmain_integrator2_fadd_normalizeQ2_CLR,
       hwmain_integrator2_fadd_normalizeQ2_DEQ,
       hwmain_integrator2_fadd_normalizeQ2_EMPTY_N,
       hwmain_integrator2_fadd_normalizeQ2_ENQ,
       hwmain_integrator2_fadd_normalizeQ2_FULL_N;

  // ports of submodule hwmain_integrator2_fadd_normalizeQ3
  wire [27 : 0] hwmain_integrator2_fadd_normalizeQ3_D_IN,
		hwmain_integrator2_fadd_normalizeQ3_D_OUT;
  wire hwmain_integrator2_fadd_normalizeQ3_CLR,
       hwmain_integrator2_fadd_normalizeQ3_DEQ,
       hwmain_integrator2_fadd_normalizeQ3_EMPTY_N,
       hwmain_integrator2_fadd_normalizeQ3_ENQ,
       hwmain_integrator2_fadd_normalizeQ3_FULL_N;

  // ports of submodule hwmain_integrator2_fadd_normalizeQ4
  wire [27 : 0] hwmain_integrator2_fadd_normalizeQ4_D_IN,
		hwmain_integrator2_fadd_normalizeQ4_D_OUT;
  wire hwmain_integrator2_fadd_normalizeQ4_CLR,
       hwmain_integrator2_fadd_normalizeQ4_DEQ,
       hwmain_integrator2_fadd_normalizeQ4_EMPTY_N,
       hwmain_integrator2_fadd_normalizeQ4_ENQ,
       hwmain_integrator2_fadd_normalizeQ4_FULL_N;

  // ports of submodule hwmain_integrator2_fadd_outQ
  wire [31 : 0] hwmain_integrator2_fadd_outQ_D_IN,
		hwmain_integrator2_fadd_outQ_D_OUT;
  wire hwmain_integrator2_fadd_outQ_CLR,
       hwmain_integrator2_fadd_outQ_DEQ,
       hwmain_integrator2_fadd_outQ_EMPTY_N,
       hwmain_integrator2_fadd_outQ_ENQ,
       hwmain_integrator2_fadd_outQ_FULL_N;

  // ports of submodule hwmain_integrator2_fmult_mult16_dsp_mult
  reg [15 : 0] hwmain_integrator2_fmult_mult16_dsp_mult_A,
	       hwmain_integrator2_fmult_mult16_dsp_mult_B;
  wire [31 : 0] hwmain_integrator2_fmult_mult16_dsp_mult_O;

  // ports of submodule hwmain_integrator2_fmult_multQ
  wire [31 : 0] hwmain_integrator2_fmult_multQ_D_IN,
		hwmain_integrator2_fmult_multQ_D_OUT;
  wire hwmain_integrator2_fmult_multQ_CLR,
       hwmain_integrator2_fmult_multQ_DEQ,
       hwmain_integrator2_fmult_multQ_EMPTY_N,
       hwmain_integrator2_fmult_multQ_ENQ,
       hwmain_integrator2_fmult_multQ_FULL_N;

  // ports of submodule hwmain_integrator2_fmult_outQ
  wire [31 : 0] hwmain_integrator2_fmult_outQ_D_IN,
		hwmain_integrator2_fmult_outQ_D_OUT;
  wire hwmain_integrator2_fmult_outQ_CLR,
       hwmain_integrator2_fmult_outQ_DEQ,
       hwmain_integrator2_fmult_outQ_EMPTY_N,
       hwmain_integrator2_fmult_outQ_ENQ,
       hwmain_integrator2_fmult_outQ_FULL_N;

  // ports of submodule hwmain_integrator2_fmult_signExpZeroQ
  reg [10 : 0] hwmain_integrator2_fmult_signExpZeroQ_D_IN;
  wire [10 : 0] hwmain_integrator2_fmult_signExpZeroQ_D_OUT;
  wire hwmain_integrator2_fmult_signExpZeroQ_CLR,
       hwmain_integrator2_fmult_signExpZeroQ_DEQ,
       hwmain_integrator2_fmult_signExpZeroQ_EMPTY_N,
       hwmain_integrator2_fmult_signExpZeroQ_ENQ,
       hwmain_integrator2_fmult_signExpZeroQ_FULL_N;

  // ports of submodule hwmain_integrator2_sampleIn
  wire [31 : 0] hwmain_integrator2_sampleIn_D_IN,
		hwmain_integrator2_sampleIn_D_OUT;
  wire hwmain_integrator2_sampleIn_CLR,
       hwmain_integrator2_sampleIn_DEQ,
       hwmain_integrator2_sampleIn_EMPTY_N,
       hwmain_integrator2_sampleIn_ENQ,
       hwmain_integrator2_sampleIn_FULL_N;

  // ports of submodule hwmain_integrator2_samples
  wire [31 : 0] hwmain_integrator2_samples_D_IN,
		hwmain_integrator2_samples_D_OUT;
  wire hwmain_integrator2_samples_CLR,
       hwmain_integrator2_samples_DEQ,
       hwmain_integrator2_samples_EMPTY_N,
       hwmain_integrator2_samples_ENQ,
       hwmain_integrator2_samples_FULL_N;

  // ports of submodule spi_inQ
  wire [7 : 0] spi_inQ_D_IN, spi_inQ_D_OUT;
  wire spi_inQ_CLR, spi_inQ_DEQ, spi_inQ_EMPTY_N, spi_inQ_ENQ, spi_inQ_FULL_N;

  // ports of submodule spi_outQ
  wire [7 : 0] spi_outQ_D_IN, spi_outQ_D_OUT;
  wire spi_outQ_CLR,
       spi_outQ_DEQ,
       spi_outQ_EMPTY_N,
       spi_outQ_ENQ,
       spi_outQ_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_hwmain_integrator1_enqSample,
       WILL_FIRE_RL_hwmain_integrator1_relayAccum,
       WILL_FIRE_RL_hwmain_integrator1_relayAvg,
       WILL_FIRE_RL_hwmain_integrator1_relayNegAvg,
       WILL_FIRE_RL_hwmain_integrator1_relayNegate,
       WILL_FIRE_RL_hwmain_integrator1_relayResult,
       WILL_FIRE_RL_hwmain_integrator1_relaySubAvg,
       WILL_FIRE_RL_hwmain_integrator1_relaySubtract,
       WILL_FIRE_RL_hwmain_integrator1_relayTerm1,
       WILL_FIRE_RL_hwmain_integrator2_enqSample,
       WILL_FIRE_RL_hwmain_integrator2_relayAccum,
       WILL_FIRE_RL_hwmain_integrator2_relayAvg,
       WILL_FIRE_RL_hwmain_integrator2_relayNegAvg,
       WILL_FIRE_RL_hwmain_integrator2_relayNegate,
       WILL_FIRE_RL_hwmain_integrator2_relayResult,
       WILL_FIRE_RL_hwmain_integrator2_relaySubAvg,
       WILL_FIRE_RL_hwmain_integrator2_relaySubtract,
       WILL_FIRE_RL_hwmain_integrator2_relayTerm1,
       WILL_FIRE_RL_hwmain_relayData1,
       WILL_FIRE_RL_hwmain_relayData2,
       WILL_FIRE_RL_hwmain_relayData3,
       WILL_FIRE_RL_hwmain_relayData4,
       WILL_FIRE_RL_hwmain_relayDataToIntegrator,
       WILL_FIRE_RL_spi_dataDriving,
       WILL_FIRE_RL_spi_dataSampling;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_1,
		MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_2,
		MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_3,
		MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_1,
		MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_2,
		MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_3;
  wire [31 : 0] MUX_hwmain_shiftout_write_1__VAL_1;
  wire [15 : 0] MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_1,
		MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_2,
		MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_3,
		MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_4,
		MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_5,
		MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_2__VAL_5,
		MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_1,
		MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_2,
		MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_3,
		MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_4,
		MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_5,
		MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_2__VAL_5;
  wire [10 : 0] MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_1,
		MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_2,
		MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_3,
		MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_4,
		MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_5,
		MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_1,
		MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_2,
		MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_3,
		MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_4,
		MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_5;
  wire [3 : 0] MUX_hwmain_integrator1_state_write_1__VAL_1,
	       MUX_hwmain_integrator2_state_write_1__VAL_1,
	       MUX_hwmain_shiftCount_write_1__VAL_1;
  wire MUX_hwmain_integrator1_fadd_inQ_enq_1__SEL_1,
       MUX_hwmain_integrator2_fadd_inQ_enq_1__SEL_1,
       MUX_hwmain_shiftCount_write_1__SEL_1,
       MUX_hwmain_shiftout_write_1__SEL_1;

  // remaining internal signals
  wire [31 : 0] x__h1624, x__h7732;
  wire [22 : 0] sample_sfd__h12872;
  wire [18 : 0] newfrac___1__h3198,
		newfrac___1__h3297,
		newfrac___1__h3396,
		newfrac___1__h3495,
		newfrac___1__h3589,
		newfrac___1__h9296,
		newfrac___1__h9395,
		newfrac___1__h9494,
		newfrac___1__h9593,
		newfrac___1__h9687,
		newfrac__h3071,
		newfrac__h3080,
		newfrac__h9169,
		newfrac__h9178,
		x__h3069,
		x__h3595,
		x__h9167,
		x__h9693;
  wire [17 : 0] fraca__h2553,
		fraca__h2836,
		fraca__h8654,
		fraca__h8934,
		fracb__h2554,
		fracb__h2837,
		fracb__h8655,
		fracb__h8935,
		x__h3090,
		x__h3107,
		x__h9188,
		x__h9205;
  wire [15 : 0] _theResult___fst__h1674,
		_theResult___fst__h7776,
		fraca__h3823,
		fraca__h9915;
  wire [8 : 0] x__h10131,
	       x__h10482,
	       x__h11094,
	       x__h11467,
	       x__h11886,
	       x__h12292,
	       x__h13973,
	       x__h14099,
	       x__h1680,
	       x__h1689,
	       x__h4039,
	       x__h4390,
	       x__h5002,
	       x__h5375,
	       x__h5794,
	       x__h6200,
	       x__h7782,
	       x__h7791;
  wire [7 : 0] _theResult___snd__h1675,
	       _theResult___snd__h3588,
	       _theResult___snd__h7777,
	       _theResult___snd__h9686,
	       newexp___1__h3199,
	       newexp___1__h3298,
	       newexp___1__h3397,
	       newexp___1__h3496,
	       newexp___1__h3590,
	       newexp___1__h9297,
	       newexp___1__h9396,
	       newexp___1__h9495,
	       newexp___1__h9594,
	       newexp___1__h9688,
	       sample_exp__h12871,
	       x__h2722,
	       x__h3065,
	       x__h8823,
	       x__h9163;
  wire [3 : 0] x__h12827, x__h14066, x__h14314;
  wire NOT_hwmain_integrator1_fadd_inQ_first__6_BITS__ETC___d39,
       NOT_hwmain_integrator2_fadd_inQ_first__20_BITS_ETC___d333,
       NOT_spi_sckdw_whas__34_51_OR_NOT_spi_sckdw_wge_ETC___d656,
       hwmain_count_90_ULT_3___d591,
       hwmain_integrator1_fadd_inQ_first__6_BITS_62_T_ETC___d29,
       hwmain_integrator2_fadd_inQ_first__20_BITS_62__ETC___d323,
       spi_sckdw_whas__34_AND_spi_sckdw_wget__35_36_A_ETC___d682,
       x__h10086,
       x__h10437,
       x__h11422,
       x__h3018,
       x__h3994,
       x__h4345,
       x__h5330,
       x__h9116;

  // value method spi_miso
  assign spi_miso = spi_txdr ;

  // submodule hwmain_dataInQ
  FIFO2 #(.width(32'd8), .guarded(1'd1)) hwmain_dataInQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hwmain_dataInQ_D_IN),
							.ENQ(hwmain_dataInQ_ENQ),
							.DEQ(hwmain_dataInQ_DEQ),
							.CLR(hwmain_dataInQ_CLR),
							.D_OUT(hwmain_dataInQ_D_OUT),
							.FULL_N(hwmain_dataInQ_FULL_N),
							.EMPTY_N(hwmain_dataInQ_EMPTY_N));

  // submodule hwmain_dataOutQ
  FIFO2 #(.width(32'd8), .guarded(1'd1)) hwmain_dataOutQ(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(hwmain_dataOutQ_D_IN),
							 .ENQ(hwmain_dataOutQ_ENQ),
							 .DEQ(hwmain_dataOutQ_DEQ),
							 .CLR(hwmain_dataOutQ_CLR),
							 .D_OUT(hwmain_dataOutQ_D_OUT),
							 .FULL_N(hwmain_dataOutQ_FULL_N),
							 .EMPTY_N(hwmain_dataOutQ_EMPTY_N));

  // submodule hwmain_integrator1_fadd_calcQ
  FIFO1 #(.width(32'd55),
	  .guarded(1'd1)) hwmain_integrator1_fadd_calcQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hwmain_integrator1_fadd_calcQ_D_IN),
							.ENQ(hwmain_integrator1_fadd_calcQ_ENQ),
							.DEQ(hwmain_integrator1_fadd_calcQ_DEQ),
							.CLR(hwmain_integrator1_fadd_calcQ_CLR),
							.D_OUT(hwmain_integrator1_fadd_calcQ_D_OUT),
							.FULL_N(hwmain_integrator1_fadd_calcQ_FULL_N),
							.EMPTY_N(hwmain_integrator1_fadd_calcQ_EMPTY_N));

  // submodule hwmain_integrator1_fadd_inProcQ
  FIFO1 #(.width(32'd63),
	  .guarded(1'd1)) hwmain_integrator1_fadd_inProcQ(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(hwmain_integrator1_fadd_inProcQ_D_IN),
							  .ENQ(hwmain_integrator1_fadd_inProcQ_ENQ),
							  .DEQ(hwmain_integrator1_fadd_inProcQ_DEQ),
							  .CLR(hwmain_integrator1_fadd_inProcQ_CLR),
							  .D_OUT(hwmain_integrator1_fadd_inProcQ_D_OUT),
							  .FULL_N(hwmain_integrator1_fadd_inProcQ_FULL_N),
							  .EMPTY_N(hwmain_integrator1_fadd_inProcQ_EMPTY_N));

  // submodule hwmain_integrator1_fadd_inQ
  FIFO1 #(.width(32'd64),
	  .guarded(1'd1)) hwmain_integrator1_fadd_inQ(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(hwmain_integrator1_fadd_inQ_D_IN),
						      .ENQ(hwmain_integrator1_fadd_inQ_ENQ),
						      .DEQ(hwmain_integrator1_fadd_inQ_DEQ),
						      .CLR(hwmain_integrator1_fadd_inQ_CLR),
						      .D_OUT(hwmain_integrator1_fadd_inQ_D_OUT),
						      .FULL_N(hwmain_integrator1_fadd_inQ_FULL_N),
						      .EMPTY_N(hwmain_integrator1_fadd_inQ_EMPTY_N));

  // submodule hwmain_integrator1_fadd_normalizeQ
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator1_fadd_normalizeQ(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(hwmain_integrator1_fadd_normalizeQ_D_IN),
							     .ENQ(hwmain_integrator1_fadd_normalizeQ_ENQ),
							     .DEQ(hwmain_integrator1_fadd_normalizeQ_DEQ),
							     .CLR(hwmain_integrator1_fadd_normalizeQ_CLR),
							     .D_OUT(hwmain_integrator1_fadd_normalizeQ_D_OUT),
							     .FULL_N(hwmain_integrator1_fadd_normalizeQ_FULL_N),
							     .EMPTY_N(hwmain_integrator1_fadd_normalizeQ_EMPTY_N));

  // submodule hwmain_integrator1_fadd_normalizeQ1
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator1_fadd_normalizeQ1(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hwmain_integrator1_fadd_normalizeQ1_D_IN),
							      .ENQ(hwmain_integrator1_fadd_normalizeQ1_ENQ),
							      .DEQ(hwmain_integrator1_fadd_normalizeQ1_DEQ),
							      .CLR(hwmain_integrator1_fadd_normalizeQ1_CLR),
							      .D_OUT(hwmain_integrator1_fadd_normalizeQ1_D_OUT),
							      .FULL_N(hwmain_integrator1_fadd_normalizeQ1_FULL_N),
							      .EMPTY_N(hwmain_integrator1_fadd_normalizeQ1_EMPTY_N));

  // submodule hwmain_integrator1_fadd_normalizeQ2
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator1_fadd_normalizeQ2(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hwmain_integrator1_fadd_normalizeQ2_D_IN),
							      .ENQ(hwmain_integrator1_fadd_normalizeQ2_ENQ),
							      .DEQ(hwmain_integrator1_fadd_normalizeQ2_DEQ),
							      .CLR(hwmain_integrator1_fadd_normalizeQ2_CLR),
							      .D_OUT(hwmain_integrator1_fadd_normalizeQ2_D_OUT),
							      .FULL_N(hwmain_integrator1_fadd_normalizeQ2_FULL_N),
							      .EMPTY_N(hwmain_integrator1_fadd_normalizeQ2_EMPTY_N));

  // submodule hwmain_integrator1_fadd_normalizeQ3
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator1_fadd_normalizeQ3(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hwmain_integrator1_fadd_normalizeQ3_D_IN),
							      .ENQ(hwmain_integrator1_fadd_normalizeQ3_ENQ),
							      .DEQ(hwmain_integrator1_fadd_normalizeQ3_DEQ),
							      .CLR(hwmain_integrator1_fadd_normalizeQ3_CLR),
							      .D_OUT(hwmain_integrator1_fadd_normalizeQ3_D_OUT),
							      .FULL_N(hwmain_integrator1_fadd_normalizeQ3_FULL_N),
							      .EMPTY_N(hwmain_integrator1_fadd_normalizeQ3_EMPTY_N));

  // submodule hwmain_integrator1_fadd_normalizeQ4
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator1_fadd_normalizeQ4(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hwmain_integrator1_fadd_normalizeQ4_D_IN),
							      .ENQ(hwmain_integrator1_fadd_normalizeQ4_ENQ),
							      .DEQ(hwmain_integrator1_fadd_normalizeQ4_DEQ),
							      .CLR(hwmain_integrator1_fadd_normalizeQ4_CLR),
							      .D_OUT(hwmain_integrator1_fadd_normalizeQ4_D_OUT),
							      .FULL_N(hwmain_integrator1_fadd_normalizeQ4_FULL_N),
							      .EMPTY_N(hwmain_integrator1_fadd_normalizeQ4_EMPTY_N));

  // submodule hwmain_integrator1_fadd_outQ
  FIFO1 #(.width(32'd32),
	  .guarded(1'd1)) hwmain_integrator1_fadd_outQ(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(hwmain_integrator1_fadd_outQ_D_IN),
						       .ENQ(hwmain_integrator1_fadd_outQ_ENQ),
						       .DEQ(hwmain_integrator1_fadd_outQ_DEQ),
						       .CLR(hwmain_integrator1_fadd_outQ_CLR),
						       .D_OUT(hwmain_integrator1_fadd_outQ_D_OUT),
						       .FULL_N(hwmain_integrator1_fadd_outQ_FULL_N),
						       .EMPTY_N(hwmain_integrator1_fadd_outQ_EMPTY_N));

  // submodule hwmain_integrator1_fmult_mult16_dsp_mult
  SB_MAC16 #(.PIPELINE_16x16_MULT_REG2(32'd0),
	     .TOPOUTPUT_SELECT(2'b11),
	     .BOTOUTPUT_SELECT(2'b11),
	     .A_SIGNED(2'b0),
	     .B_SIGNED(1'b0)) hwmain_integrator1_fmult_mult16_dsp_mult(.CLK(CLK),
								       .CE(1'b1),
								       .C(16'b0),
								       .CHOLD(1'b0),
								       .D(16'b0),
								       .DHOLD(1'b0),
								       .AHOLD(1'b0),
								       .BHOLD(1'b0),
								       .IRSTTOP(1'b0),
								       .ORSTTOP(1'b0),
								       .OLOADTOP(1'b0),
								       .ADDSUBTOP(1'b0),
								       .OHOLDTOP(1'b0),
								       .IRSTBOT(1'b0),
								       .ORSTBOT(1'b0),
								       .OLOADBOT(1'b0),
								       .ADDSUBBOT(1'b0),
								       .OHOLDBOT(1'b0),
								       .CI(1'b0),
								       .ACCUMCI(1'b0),
								       .SIGNEXTIN(1'b0),
								       .A(hwmain_integrator1_fmult_mult16_dsp_mult_A),
								       .B(hwmain_integrator1_fmult_mult16_dsp_mult_B),
								       .O(hwmain_integrator1_fmult_mult16_dsp_mult_O));

  // submodule hwmain_integrator1_fmult_multQ
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) hwmain_integrator1_fmult_multQ(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(hwmain_integrator1_fmult_multQ_D_IN),
							 .ENQ(hwmain_integrator1_fmult_multQ_ENQ),
							 .DEQ(hwmain_integrator1_fmult_multQ_DEQ),
							 .CLR(hwmain_integrator1_fmult_multQ_CLR),
							 .D_OUT(hwmain_integrator1_fmult_multQ_D_OUT),
							 .FULL_N(hwmain_integrator1_fmult_multQ_FULL_N),
							 .EMPTY_N(hwmain_integrator1_fmult_multQ_EMPTY_N));

  // submodule hwmain_integrator1_fmult_outQ
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) hwmain_integrator1_fmult_outQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hwmain_integrator1_fmult_outQ_D_IN),
							.ENQ(hwmain_integrator1_fmult_outQ_ENQ),
							.DEQ(hwmain_integrator1_fmult_outQ_DEQ),
							.CLR(hwmain_integrator1_fmult_outQ_CLR),
							.D_OUT(hwmain_integrator1_fmult_outQ_D_OUT),
							.FULL_N(hwmain_integrator1_fmult_outQ_FULL_N),
							.EMPTY_N(hwmain_integrator1_fmult_outQ_EMPTY_N));

  // submodule hwmain_integrator1_fmult_signExpZeroQ
  SizedFIFO #(.p1width(32'd11),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) hwmain_integrator1_fmult_signExpZeroQ(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(hwmain_integrator1_fmult_signExpZeroQ_D_IN),
								    .ENQ(hwmain_integrator1_fmult_signExpZeroQ_ENQ),
								    .DEQ(hwmain_integrator1_fmult_signExpZeroQ_DEQ),
								    .CLR(hwmain_integrator1_fmult_signExpZeroQ_CLR),
								    .D_OUT(hwmain_integrator1_fmult_signExpZeroQ_D_OUT),
								    .FULL_N(hwmain_integrator1_fmult_signExpZeroQ_FULL_N),
								    .EMPTY_N(hwmain_integrator1_fmult_signExpZeroQ_EMPTY_N));

  // submodule hwmain_integrator1_sampleIn
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) hwmain_integrator1_sampleIn(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(hwmain_integrator1_sampleIn_D_IN),
						      .ENQ(hwmain_integrator1_sampleIn_ENQ),
						      .DEQ(hwmain_integrator1_sampleIn_DEQ),
						      .CLR(hwmain_integrator1_sampleIn_CLR),
						      .D_OUT(hwmain_integrator1_sampleIn_D_OUT),
						      .FULL_N(hwmain_integrator1_sampleIn_FULL_N),
						      .EMPTY_N(hwmain_integrator1_sampleIn_EMPTY_N));

  // submodule hwmain_integrator1_samples
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd512),
	      .p3cntr_width(32'd9),
	      .guarded(1'd1)) hwmain_integrator1_samples(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(hwmain_integrator1_samples_D_IN),
							 .ENQ(hwmain_integrator1_samples_ENQ),
							 .DEQ(hwmain_integrator1_samples_DEQ),
							 .CLR(hwmain_integrator1_samples_CLR),
							 .D_OUT(hwmain_integrator1_samples_D_OUT),
							 .FULL_N(hwmain_integrator1_samples_FULL_N),
							 .EMPTY_N(hwmain_integrator1_samples_EMPTY_N));

  // submodule hwmain_integrator2_fadd_calcQ
  FIFO1 #(.width(32'd55),
	  .guarded(1'd1)) hwmain_integrator2_fadd_calcQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hwmain_integrator2_fadd_calcQ_D_IN),
							.ENQ(hwmain_integrator2_fadd_calcQ_ENQ),
							.DEQ(hwmain_integrator2_fadd_calcQ_DEQ),
							.CLR(hwmain_integrator2_fadd_calcQ_CLR),
							.D_OUT(hwmain_integrator2_fadd_calcQ_D_OUT),
							.FULL_N(hwmain_integrator2_fadd_calcQ_FULL_N),
							.EMPTY_N(hwmain_integrator2_fadd_calcQ_EMPTY_N));

  // submodule hwmain_integrator2_fadd_inProcQ
  FIFO1 #(.width(32'd63),
	  .guarded(1'd1)) hwmain_integrator2_fadd_inProcQ(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(hwmain_integrator2_fadd_inProcQ_D_IN),
							  .ENQ(hwmain_integrator2_fadd_inProcQ_ENQ),
							  .DEQ(hwmain_integrator2_fadd_inProcQ_DEQ),
							  .CLR(hwmain_integrator2_fadd_inProcQ_CLR),
							  .D_OUT(hwmain_integrator2_fadd_inProcQ_D_OUT),
							  .FULL_N(hwmain_integrator2_fadd_inProcQ_FULL_N),
							  .EMPTY_N(hwmain_integrator2_fadd_inProcQ_EMPTY_N));

  // submodule hwmain_integrator2_fadd_inQ
  FIFO1 #(.width(32'd64),
	  .guarded(1'd1)) hwmain_integrator2_fadd_inQ(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(hwmain_integrator2_fadd_inQ_D_IN),
						      .ENQ(hwmain_integrator2_fadd_inQ_ENQ),
						      .DEQ(hwmain_integrator2_fadd_inQ_DEQ),
						      .CLR(hwmain_integrator2_fadd_inQ_CLR),
						      .D_OUT(hwmain_integrator2_fadd_inQ_D_OUT),
						      .FULL_N(hwmain_integrator2_fadd_inQ_FULL_N),
						      .EMPTY_N(hwmain_integrator2_fadd_inQ_EMPTY_N));

  // submodule hwmain_integrator2_fadd_normalizeQ
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator2_fadd_normalizeQ(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(hwmain_integrator2_fadd_normalizeQ_D_IN),
							     .ENQ(hwmain_integrator2_fadd_normalizeQ_ENQ),
							     .DEQ(hwmain_integrator2_fadd_normalizeQ_DEQ),
							     .CLR(hwmain_integrator2_fadd_normalizeQ_CLR),
							     .D_OUT(hwmain_integrator2_fadd_normalizeQ_D_OUT),
							     .FULL_N(hwmain_integrator2_fadd_normalizeQ_FULL_N),
							     .EMPTY_N(hwmain_integrator2_fadd_normalizeQ_EMPTY_N));

  // submodule hwmain_integrator2_fadd_normalizeQ1
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator2_fadd_normalizeQ1(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hwmain_integrator2_fadd_normalizeQ1_D_IN),
							      .ENQ(hwmain_integrator2_fadd_normalizeQ1_ENQ),
							      .DEQ(hwmain_integrator2_fadd_normalizeQ1_DEQ),
							      .CLR(hwmain_integrator2_fadd_normalizeQ1_CLR),
							      .D_OUT(hwmain_integrator2_fadd_normalizeQ1_D_OUT),
							      .FULL_N(hwmain_integrator2_fadd_normalizeQ1_FULL_N),
							      .EMPTY_N(hwmain_integrator2_fadd_normalizeQ1_EMPTY_N));

  // submodule hwmain_integrator2_fadd_normalizeQ2
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator2_fadd_normalizeQ2(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hwmain_integrator2_fadd_normalizeQ2_D_IN),
							      .ENQ(hwmain_integrator2_fadd_normalizeQ2_ENQ),
							      .DEQ(hwmain_integrator2_fadd_normalizeQ2_DEQ),
							      .CLR(hwmain_integrator2_fadd_normalizeQ2_CLR),
							      .D_OUT(hwmain_integrator2_fadd_normalizeQ2_D_OUT),
							      .FULL_N(hwmain_integrator2_fadd_normalizeQ2_FULL_N),
							      .EMPTY_N(hwmain_integrator2_fadd_normalizeQ2_EMPTY_N));

  // submodule hwmain_integrator2_fadd_normalizeQ3
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator2_fadd_normalizeQ3(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hwmain_integrator2_fadd_normalizeQ3_D_IN),
							      .ENQ(hwmain_integrator2_fadd_normalizeQ3_ENQ),
							      .DEQ(hwmain_integrator2_fadd_normalizeQ3_DEQ),
							      .CLR(hwmain_integrator2_fadd_normalizeQ3_CLR),
							      .D_OUT(hwmain_integrator2_fadd_normalizeQ3_D_OUT),
							      .FULL_N(hwmain_integrator2_fadd_normalizeQ3_FULL_N),
							      .EMPTY_N(hwmain_integrator2_fadd_normalizeQ3_EMPTY_N));

  // submodule hwmain_integrator2_fadd_normalizeQ4
  FIFO1 #(.width(32'd28),
	  .guarded(1'd1)) hwmain_integrator2_fadd_normalizeQ4(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(hwmain_integrator2_fadd_normalizeQ4_D_IN),
							      .ENQ(hwmain_integrator2_fadd_normalizeQ4_ENQ),
							      .DEQ(hwmain_integrator2_fadd_normalizeQ4_DEQ),
							      .CLR(hwmain_integrator2_fadd_normalizeQ4_CLR),
							      .D_OUT(hwmain_integrator2_fadd_normalizeQ4_D_OUT),
							      .FULL_N(hwmain_integrator2_fadd_normalizeQ4_FULL_N),
							      .EMPTY_N(hwmain_integrator2_fadd_normalizeQ4_EMPTY_N));

  // submodule hwmain_integrator2_fadd_outQ
  FIFO1 #(.width(32'd32),
	  .guarded(1'd1)) hwmain_integrator2_fadd_outQ(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(hwmain_integrator2_fadd_outQ_D_IN),
						       .ENQ(hwmain_integrator2_fadd_outQ_ENQ),
						       .DEQ(hwmain_integrator2_fadd_outQ_DEQ),
						       .CLR(hwmain_integrator2_fadd_outQ_CLR),
						       .D_OUT(hwmain_integrator2_fadd_outQ_D_OUT),
						       .FULL_N(hwmain_integrator2_fadd_outQ_FULL_N),
						       .EMPTY_N(hwmain_integrator2_fadd_outQ_EMPTY_N));

  // submodule hwmain_integrator2_fmult_mult16_dsp_mult
  SB_MAC16 #(.PIPELINE_16x16_MULT_REG2(32'd0),
	     .TOPOUTPUT_SELECT(2'b11),
	     .BOTOUTPUT_SELECT(2'b11),
	     .A_SIGNED(2'b0),
	     .B_SIGNED(1'b0)) hwmain_integrator2_fmult_mult16_dsp_mult(.CLK(CLK),
								       .CE(1'b1),
								       .C(16'b0),
								       .CHOLD(1'b0),
								       .D(16'b0),
								       .DHOLD(1'b0),
								       .AHOLD(1'b0),
								       .BHOLD(1'b0),
								       .IRSTTOP(1'b0),
								       .ORSTTOP(1'b0),
								       .OLOADTOP(1'b0),
								       .ADDSUBTOP(1'b0),
								       .OHOLDTOP(1'b0),
								       .IRSTBOT(1'b0),
								       .ORSTBOT(1'b0),
								       .OLOADBOT(1'b0),
								       .ADDSUBBOT(1'b0),
								       .OHOLDBOT(1'b0),
								       .CI(1'b0),
								       .ACCUMCI(1'b0),
								       .SIGNEXTIN(1'b0),
								       .A(hwmain_integrator2_fmult_mult16_dsp_mult_A),
								       .B(hwmain_integrator2_fmult_mult16_dsp_mult_B),
								       .O(hwmain_integrator2_fmult_mult16_dsp_mult_O));

  // submodule hwmain_integrator2_fmult_multQ
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) hwmain_integrator2_fmult_multQ(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(hwmain_integrator2_fmult_multQ_D_IN),
							 .ENQ(hwmain_integrator2_fmult_multQ_ENQ),
							 .DEQ(hwmain_integrator2_fmult_multQ_DEQ),
							 .CLR(hwmain_integrator2_fmult_multQ_CLR),
							 .D_OUT(hwmain_integrator2_fmult_multQ_D_OUT),
							 .FULL_N(hwmain_integrator2_fmult_multQ_FULL_N),
							 .EMPTY_N(hwmain_integrator2_fmult_multQ_EMPTY_N));

  // submodule hwmain_integrator2_fmult_outQ
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) hwmain_integrator2_fmult_outQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(hwmain_integrator2_fmult_outQ_D_IN),
							.ENQ(hwmain_integrator2_fmult_outQ_ENQ),
							.DEQ(hwmain_integrator2_fmult_outQ_DEQ),
							.CLR(hwmain_integrator2_fmult_outQ_CLR),
							.D_OUT(hwmain_integrator2_fmult_outQ_D_OUT),
							.FULL_N(hwmain_integrator2_fmult_outQ_FULL_N),
							.EMPTY_N(hwmain_integrator2_fmult_outQ_EMPTY_N));

  // submodule hwmain_integrator2_fmult_signExpZeroQ
  SizedFIFO #(.p1width(32'd11),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) hwmain_integrator2_fmult_signExpZeroQ(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(hwmain_integrator2_fmult_signExpZeroQ_D_IN),
								    .ENQ(hwmain_integrator2_fmult_signExpZeroQ_ENQ),
								    .DEQ(hwmain_integrator2_fmult_signExpZeroQ_DEQ),
								    .CLR(hwmain_integrator2_fmult_signExpZeroQ_CLR),
								    .D_OUT(hwmain_integrator2_fmult_signExpZeroQ_D_OUT),
								    .FULL_N(hwmain_integrator2_fmult_signExpZeroQ_FULL_N),
								    .EMPTY_N(hwmain_integrator2_fmult_signExpZeroQ_EMPTY_N));

  // submodule hwmain_integrator2_sampleIn
  FIFO2 #(.width(32'd32),
	  .guarded(1'd1)) hwmain_integrator2_sampleIn(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(hwmain_integrator2_sampleIn_D_IN),
						      .ENQ(hwmain_integrator2_sampleIn_ENQ),
						      .DEQ(hwmain_integrator2_sampleIn_DEQ),
						      .CLR(hwmain_integrator2_sampleIn_CLR),
						      .D_OUT(hwmain_integrator2_sampleIn_D_OUT),
						      .FULL_N(hwmain_integrator2_sampleIn_FULL_N),
						      .EMPTY_N(hwmain_integrator2_sampleIn_EMPTY_N));

  // submodule hwmain_integrator2_samples
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd512),
	      .p3cntr_width(32'd9),
	      .guarded(1'd1)) hwmain_integrator2_samples(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(hwmain_integrator2_samples_D_IN),
							 .ENQ(hwmain_integrator2_samples_ENQ),
							 .DEQ(hwmain_integrator2_samples_DEQ),
							 .CLR(hwmain_integrator2_samples_CLR),
							 .D_OUT(hwmain_integrator2_samples_D_OUT),
							 .FULL_N(hwmain_integrator2_samples_FULL_N),
							 .EMPTY_N(hwmain_integrator2_samples_EMPTY_N));

  // submodule spi_inQ
  FIFO2 #(.width(32'd8), .guarded(1'd1)) spi_inQ(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(spi_inQ_D_IN),
						 .ENQ(spi_inQ_ENQ),
						 .DEQ(spi_inQ_DEQ),
						 .CLR(spi_inQ_CLR),
						 .D_OUT(spi_inQ_D_OUT),
						 .FULL_N(spi_inQ_FULL_N),
						 .EMPTY_N(spi_inQ_EMPTY_N));

  // submodule spi_outQ
  FIFO2 #(.width(32'd8), .guarded(1'd1)) spi_outQ(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(spi_outQ_D_IN),
						  .ENQ(spi_outQ_ENQ),
						  .DEQ(spi_outQ_DEQ),
						  .CLR(spi_outQ_CLR),
						  .D_OUT(spi_outQ_D_OUT),
						  .FULL_N(spi_outQ_FULL_N),
						  .EMPTY_N(spi_outQ_EMPTY_N));

  // rule RL_hwmain_relayDataToIntegrator
  assign WILL_FIRE_RL_hwmain_relayDataToIntegrator =
	     hwmain_dataInQ_EMPTY_N &&
	     (hwmain_count_90_ULT_3___d591 ||
	      hwmain_integrator1_state == 4'd0 &&
	      hwmain_integrator1_sampleIn_FULL_N) ;

  // rule RL_hwmain_relayData1
  assign WILL_FIRE_RL_hwmain_relayData1 =
	     hwmain_integrator2_valid && hwmain_dataOutQ_FULL_N &&
	     hwmain_shiftCount == 4'd0 ;

  // rule RL_hwmain_relayData2
  assign WILL_FIRE_RL_hwmain_relayData2 =
	     hwmain_dataOutQ_FULL_N && hwmain_shiftCount == 4'd1 ;

  // rule RL_hwmain_relayData3
  assign WILL_FIRE_RL_hwmain_relayData3 =
	     hwmain_dataOutQ_FULL_N && hwmain_shiftCount == 4'd2 ;

  // rule RL_hwmain_relayData4
  assign WILL_FIRE_RL_hwmain_relayData4 =
	     hwmain_dataOutQ_FULL_N && hwmain_shiftCount == 4'd3 ;

  // rule RL_hwmain_integrator1_enqSample
  assign WILL_FIRE_RL_hwmain_integrator1_enqSample =
	     hwmain_integrator1_sampleIn_EMPTY_N &&
	     hwmain_integrator1_samples_FULL_N &&
	     hwmain_integrator1_fmult_multQ_FULL_N &&
	     hwmain_integrator1_fmult_signExpZeroQ_FULL_N &&
	     (hwmain_integrator1_samples_FULL_N ||
	      hwmain_integrator1_samples_EMPTY_N) &&
	     hwmain_integrator1_state == 4'd0 ;

  // rule RL_hwmain_integrator1_relayNegate
  assign WILL_FIRE_RL_hwmain_integrator1_relayNegate =
	     hwmain_integrator1_fmult_outQ_EMPTY_N &&
	     hwmain_integrator1_fadd_inQ_FULL_N &&
	     hwmain_integrator1_state == 4'd1 ;

  // rule RL_hwmain_integrator1_relaySubtract
  assign WILL_FIRE_RL_hwmain_integrator1_relaySubtract =
	     hwmain_integrator1_fadd_inQ_FULL_N &&
	     hwmain_integrator1_fadd_outQ_EMPTY_N &&
	     hwmain_integrator1_state == 4'd2 ;

  // rule RL_hwmain_integrator1_relayAccum
  assign WILL_FIRE_RL_hwmain_integrator1_relayAccum =
	     hwmain_integrator1_fmult_multQ_FULL_N &&
	     hwmain_integrator1_fmult_signExpZeroQ_FULL_N &&
	     hwmain_integrator1_fadd_outQ_EMPTY_N &&
	     hwmain_integrator1_state == 4'd3 ;

  // rule RL_hwmain_integrator1_relayAvg
  assign WILL_FIRE_RL_hwmain_integrator1_relayAvg =
	     hwmain_integrator1_fmult_multQ_FULL_N &&
	     hwmain_integrator1_fmult_signExpZeroQ_FULL_N &&
	     hwmain_integrator1_fmult_outQ_EMPTY_N &&
	     hwmain_integrator1_state == 4'd4 ;

  // rule RL_hwmain_integrator1_relayNegAvg
  assign WILL_FIRE_RL_hwmain_integrator1_relayNegAvg =
	     hwmain_integrator1_fmult_multQ_FULL_N &&
	     hwmain_integrator1_fmult_signExpZeroQ_FULL_N &&
	     hwmain_integrator1_fmult_outQ_EMPTY_N &&
	     hwmain_integrator1_fadd_inQ_FULL_N &&
	     hwmain_integrator1_state == 4'd5 ;

  // rule RL_hwmain_integrator1_relaySubAvg
  assign WILL_FIRE_RL_hwmain_integrator1_relaySubAvg =
	     hwmain_integrator1_fmult_multQ_FULL_N &&
	     hwmain_integrator1_fmult_signExpZeroQ_FULL_N &&
	     hwmain_integrator1_fmult_outQ_EMPTY_N &&
	     hwmain_integrator1_fadd_outQ_EMPTY_N &&
	     hwmain_integrator1_state == 4'd6 ;

  // rule RL_hwmain_integrator1_relayTerm1
  assign WILL_FIRE_RL_hwmain_integrator1_relayTerm1 =
	     hwmain_integrator1_fmult_outQ_EMPTY_N &&
	     hwmain_integrator1_fadd_inQ_FULL_N &&
	     hwmain_integrator1_state == 4'd7 ;

  // rule RL_hwmain_integrator1_relayResult
  assign WILL_FIRE_RL_hwmain_integrator1_relayResult =
	     hwmain_integrator1_fadd_outQ_EMPTY_N &&
	     hwmain_integrator1_state == 4'd8 ;

  // rule RL_hwmain_integrator2_enqSample
  assign WILL_FIRE_RL_hwmain_integrator2_enqSample =
	     hwmain_integrator2_sampleIn_EMPTY_N &&
	     hwmain_integrator2_samples_FULL_N &&
	     hwmain_integrator2_fmult_multQ_FULL_N &&
	     hwmain_integrator2_fmult_signExpZeroQ_FULL_N &&
	     (hwmain_integrator2_samples_FULL_N ||
	      hwmain_integrator2_samples_EMPTY_N) &&
	     hwmain_integrator2_state == 4'd0 ;

  // rule RL_hwmain_integrator2_relayNegate
  assign WILL_FIRE_RL_hwmain_integrator2_relayNegate =
	     hwmain_integrator2_fmult_outQ_EMPTY_N &&
	     hwmain_integrator2_fadd_inQ_FULL_N &&
	     hwmain_integrator2_state == 4'd1 ;

  // rule RL_hwmain_integrator2_relaySubtract
  assign WILL_FIRE_RL_hwmain_integrator2_relaySubtract =
	     hwmain_integrator2_fadd_inQ_FULL_N &&
	     hwmain_integrator2_fadd_outQ_EMPTY_N &&
	     hwmain_integrator2_state == 4'd2 ;

  // rule RL_hwmain_integrator2_relayAccum
  assign WILL_FIRE_RL_hwmain_integrator2_relayAccum =
	     hwmain_integrator2_fmult_multQ_FULL_N &&
	     hwmain_integrator2_fmult_signExpZeroQ_FULL_N &&
	     hwmain_integrator2_fadd_outQ_EMPTY_N &&
	     hwmain_integrator2_state == 4'd3 ;

  // rule RL_hwmain_integrator2_relayAvg
  assign WILL_FIRE_RL_hwmain_integrator2_relayAvg =
	     hwmain_integrator2_fmult_multQ_FULL_N &&
	     hwmain_integrator2_fmult_signExpZeroQ_FULL_N &&
	     hwmain_integrator2_fmult_outQ_EMPTY_N &&
	     hwmain_integrator2_state == 4'd4 ;

  // rule RL_hwmain_integrator2_relayNegAvg
  assign WILL_FIRE_RL_hwmain_integrator2_relayNegAvg =
	     hwmain_integrator2_fmult_multQ_FULL_N &&
	     hwmain_integrator2_fmult_signExpZeroQ_FULL_N &&
	     hwmain_integrator2_fmult_outQ_EMPTY_N &&
	     hwmain_integrator2_fadd_inQ_FULL_N &&
	     hwmain_integrator2_state == 4'd5 ;

  // rule RL_hwmain_integrator2_relaySubAvg
  assign WILL_FIRE_RL_hwmain_integrator2_relaySubAvg =
	     hwmain_integrator2_fmult_multQ_FULL_N &&
	     hwmain_integrator2_fmult_signExpZeroQ_FULL_N &&
	     hwmain_integrator2_fmult_outQ_EMPTY_N &&
	     hwmain_integrator2_fadd_outQ_EMPTY_N &&
	     hwmain_integrator2_state == 4'd6 ;

  // rule RL_hwmain_integrator2_relayTerm1
  assign WILL_FIRE_RL_hwmain_integrator2_relayTerm1 =
	     hwmain_integrator2_fmult_outQ_EMPTY_N &&
	     hwmain_integrator2_fadd_inQ_FULL_N &&
	     hwmain_integrator2_state == 4'd7 ;

  // rule RL_hwmain_integrator2_relayResult
  assign WILL_FIRE_RL_hwmain_integrator2_relayResult =
	     hwmain_integrator2_fadd_outQ_EMPTY_N &&
	     hwmain_integrator2_state == 4'd8 ;

  // rule RL_spi_dataDriving
  assign WILL_FIRE_RL_spi_dataDriving =
	     spi_csin != 4'd0 || spi_tx_cnt != 4'd0 || spi_sckin != 4'd0 ||
	     !spi_prevSck ||
	     spi_inQ_EMPTY_N ;

  // rule RL_spi_dataSampling
  assign WILL_FIRE_RL_spi_dataSampling =
	     spi_csin != 4'd0 || spi_rx_cnt != 4'd0 || !(spi_sckin != 4'd0) ||
	     spi_prevSck ||
	     spi_outQ_FULL_N ;

  // inputs to muxes for submodule ports
  assign MUX_hwmain_integrator1_fadd_inQ_enq_1__SEL_1 =
	     WILL_FIRE_RL_hwmain_integrator1_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayNegate ;
  assign MUX_hwmain_integrator2_fadd_inQ_enq_1__SEL_1 =
	     WILL_FIRE_RL_hwmain_integrator2_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayNegate ;
  assign MUX_hwmain_shiftCount_write_1__SEL_1 =
	     WILL_FIRE_RL_hwmain_relayData3 ||
	     WILL_FIRE_RL_hwmain_relayData2 ||
	     WILL_FIRE_RL_hwmain_relayData1 ;
  assign MUX_hwmain_shiftout_write_1__SEL_1 =
	     WILL_FIRE_RL_hwmain_relayData4 ||
	     WILL_FIRE_RL_hwmain_relayData3 ||
	     WILL_FIRE_RL_hwmain_relayData2 ;
  assign MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_1 =
	     { hwmain_integrator1_curr,
	       hwmain_integrator1_fmult_outQ_D_OUT } ;
  assign MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_2 =
	     { hwmain_integrator1_fadd_outQ_D_OUT,
	       hwmain_integrator1_accum } ;
  assign MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_3 =
	     { hwmain_integrator1_term1, hwmain_integrator1_term2 } ;
  assign MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_1 =
	     { 1'd1, hwmain_integrator1_accum[22:8] } ;
  assign MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_2 =
	     { 1'd1, hwmain_integrator1_fmult_outQ_D_OUT[22:8] } ;
  assign MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_3 =
	     { 1'd1, hwmain_integrator1_prev[22:8] } ;
  assign MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_4 =
	     { 1'd1, hwmain_integrator1_fadd_outQ_D_OUT[22:8] } ;
  assign MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_5 =
	     hwmain_integrator1_samples_FULL_N ? fraca__h3823 : 16'd32768 ;
  assign MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_2__VAL_5 =
	     { 1'd1,
	       hwmain_integrator1_samples_FULL_N ?
		 hwmain_integrator1_accum[22:8] :
		 hwmain_integrator1_samples_D_OUT[22:8] } ;
  assign MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_1 =
	     hwmain_integrator1_samples_FULL_N ?
	       { x__h3994,
		 x__h4039,
		 hwmain_integrator1_sampleIn_D_OUT[30:23] == 8'd0 ||
		 hwmain_integrator1_accum[30:23] == 8'd0 } :
	       { x__h4345,
		 x__h4390,
		 hwmain_integrator1_samples_D_OUT[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_2 =
	     { hwmain_integrator1_accum[31],
	       x__h5002,
	       hwmain_integrator1_accum[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_3 =
	     { x__h5330,
	       x__h5375,
	       hwmain_integrator1_fmult_outQ_D_OUT[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_4 =
	     { hwmain_integrator1_prev[31],
	       x__h5794,
	       hwmain_integrator1_prev[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_5 =
	     { hwmain_integrator1_fadd_outQ_D_OUT[31],
	       x__h6200,
	       hwmain_integrator1_fadd_outQ_D_OUT[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator1_state_write_1__VAL_1 =
	     hwmain_integrator1_samples_FULL_N ? 4'd3 : 4'd1 ;
  assign MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_1 =
	     { hwmain_integrator2_curr,
	       hwmain_integrator2_fmult_outQ_D_OUT } ;
  assign MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_2 =
	     { hwmain_integrator2_fadd_outQ_D_OUT,
	       hwmain_integrator2_accum } ;
  assign MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_3 =
	     { hwmain_integrator2_term1, hwmain_integrator2_term2 } ;
  assign MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_1 =
	     { 1'd1, hwmain_integrator2_accum[22:8] } ;
  assign MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_2 =
	     { 1'd1, hwmain_integrator2_fmult_outQ_D_OUT[22:8] } ;
  assign MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_3 =
	     { 1'd1, hwmain_integrator2_prev[22:8] } ;
  assign MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_4 =
	     { 1'd1, hwmain_integrator2_fadd_outQ_D_OUT[22:8] } ;
  assign MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_5 =
	     hwmain_integrator2_samples_FULL_N ? fraca__h9915 : 16'd32768 ;
  assign MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_2__VAL_5 =
	     { 1'd1,
	       hwmain_integrator2_samples_FULL_N ?
		 hwmain_integrator2_accum[22:8] :
		 hwmain_integrator2_samples_D_OUT[22:8] } ;
  assign MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_1 =
	     hwmain_integrator2_samples_FULL_N ?
	       { x__h10086,
		 x__h10131,
		 hwmain_integrator2_sampleIn_D_OUT[30:23] == 8'd0 ||
		 hwmain_integrator2_accum[30:23] == 8'd0 } :
	       { x__h10437,
		 x__h10482,
		 hwmain_integrator2_samples_D_OUT[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_2 =
	     { hwmain_integrator2_accum[31],
	       x__h11094,
	       hwmain_integrator2_accum[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_3 =
	     { x__h11422,
	       x__h11467,
	       hwmain_integrator2_fmult_outQ_D_OUT[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_4 =
	     { hwmain_integrator2_prev[31],
	       x__h11886,
	       hwmain_integrator2_prev[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_5 =
	     { hwmain_integrator2_fadd_outQ_D_OUT[31],
	       x__h12292,
	       hwmain_integrator2_fadd_outQ_D_OUT[30:23] == 8'd0 } ;
  assign MUX_hwmain_integrator2_state_write_1__VAL_1 =
	     hwmain_integrator2_samples_FULL_N ? 4'd3 : 4'd1 ;
  assign MUX_hwmain_shiftCount_write_1__VAL_1 = hwmain_shiftCount + 4'd1 ;
  assign MUX_hwmain_shiftout_write_1__VAL_1 =
	     { 8'd0, hwmain_shiftout[31:8] } ;

  // register hwmain_count
  assign hwmain_count_D_IN = hwmain_count_90_ULT_3___d591 ? x__h12827 : 4'd0 ;
  assign hwmain_count_EN = WILL_FIRE_RL_hwmain_relayDataToIntegrator ;

  // register hwmain_first
  assign hwmain_first_D_IN = hwmain_second ;
  assign hwmain_first_EN = WILL_FIRE_RL_hwmain_relayDataToIntegrator ;

  // register hwmain_fourth
  assign hwmain_fourth_D_IN = hwmain_dataInQ_D_OUT ;
  assign hwmain_fourth_EN = WILL_FIRE_RL_hwmain_relayDataToIntegrator ;

  // register hwmain_integrator1_accum
  assign hwmain_integrator1_accum_D_IN = hwmain_integrator1_fadd_outQ_D_OUT ;
  assign hwmain_integrator1_accum_EN =
	     WILL_FIRE_RL_hwmain_integrator1_relayAccum ;

  // register hwmain_integrator1_avg
  assign hwmain_integrator1_avg_D_IN = 32'h0 ;
  assign hwmain_integrator1_avg_EN = 1'b0 ;

  // register hwmain_integrator1_curr
  assign hwmain_integrator1_curr_D_IN = hwmain_integrator1_sampleIn_D_OUT ;
  assign hwmain_integrator1_curr_EN =
	     WILL_FIRE_RL_hwmain_integrator1_enqSample ;

  // register hwmain_integrator1_prev
  assign hwmain_integrator1_prev_D_IN = hwmain_integrator1_curr ;
  assign hwmain_integrator1_prev_EN =
	     WILL_FIRE_RL_hwmain_integrator1_enqSample ;

  // register hwmain_integrator1_result
  assign hwmain_integrator1_result_D_IN = hwmain_integrator1_fadd_outQ_D_OUT ;
  assign hwmain_integrator1_result_EN =
	     WILL_FIRE_RL_hwmain_integrator1_relayResult ;

  // register hwmain_integrator1_state
  always@(WILL_FIRE_RL_hwmain_integrator1_enqSample or
	  MUX_hwmain_integrator1_state_write_1__VAL_1 or
	  WILL_FIRE_RL_hwmain_integrator1_relayResult or
	  WILL_FIRE_RL_hwmain_integrator1_relayNegate or
	  WILL_FIRE_RL_hwmain_integrator1_relaySubtract or
	  WILL_FIRE_RL_hwmain_integrator1_relayAccum or
	  WILL_FIRE_RL_hwmain_integrator1_relayAvg or
	  WILL_FIRE_RL_hwmain_integrator1_relayNegAvg or
	  WILL_FIRE_RL_hwmain_integrator1_relaySubAvg or
	  WILL_FIRE_RL_hwmain_integrator1_relayTerm1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_hwmain_integrator1_enqSample:
	  hwmain_integrator1_state_D_IN =
	      MUX_hwmain_integrator1_state_write_1__VAL_1;
      WILL_FIRE_RL_hwmain_integrator1_relayResult:
	  hwmain_integrator1_state_D_IN = 4'd0;
      WILL_FIRE_RL_hwmain_integrator1_relayNegate:
	  hwmain_integrator1_state_D_IN = 4'd2;
      WILL_FIRE_RL_hwmain_integrator1_relaySubtract:
	  hwmain_integrator1_state_D_IN = 4'd3;
      WILL_FIRE_RL_hwmain_integrator1_relayAccum:
	  hwmain_integrator1_state_D_IN = 4'd4;
      WILL_FIRE_RL_hwmain_integrator1_relayAvg:
	  hwmain_integrator1_state_D_IN = 4'd5;
      WILL_FIRE_RL_hwmain_integrator1_relayNegAvg:
	  hwmain_integrator1_state_D_IN = 4'd6;
      WILL_FIRE_RL_hwmain_integrator1_relaySubAvg:
	  hwmain_integrator1_state_D_IN = 4'd7;
      WILL_FIRE_RL_hwmain_integrator1_relayTerm1:
	  hwmain_integrator1_state_D_IN = 4'd8;
      default: hwmain_integrator1_state_D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign hwmain_integrator1_state_EN =
	     WILL_FIRE_RL_hwmain_integrator1_enqSample ||
	     WILL_FIRE_RL_hwmain_integrator1_relayResult ||
	     WILL_FIRE_RL_hwmain_integrator1_relayNegate ||
	     WILL_FIRE_RL_hwmain_integrator1_relaySubtract ||
	     WILL_FIRE_RL_hwmain_integrator1_relayAccum ||
	     WILL_FIRE_RL_hwmain_integrator1_relayAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relaySubAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayTerm1 ;

  // register hwmain_integrator1_term1
  assign hwmain_integrator1_term1_D_IN = hwmain_integrator1_fmult_outQ_D_OUT ;
  assign hwmain_integrator1_term1_EN =
	     WILL_FIRE_RL_hwmain_integrator1_relayTerm1 ;

  // register hwmain_integrator1_term2
  assign hwmain_integrator1_term2_D_IN = hwmain_integrator1_fmult_outQ_D_OUT ;
  assign hwmain_integrator1_term2_EN =
	     WILL_FIRE_RL_hwmain_integrator1_relaySubAvg ;

  // register hwmain_integrator1_valid
  assign hwmain_integrator1_valid_D_IN = 1'd1 ;
  assign hwmain_integrator1_valid_EN =
	     WILL_FIRE_RL_hwmain_integrator1_relayResult ;

  // register hwmain_integrator2_accum
  assign hwmain_integrator2_accum_D_IN = hwmain_integrator2_fadd_outQ_D_OUT ;
  assign hwmain_integrator2_accum_EN =
	     WILL_FIRE_RL_hwmain_integrator2_relayAccum ;

  // register hwmain_integrator2_avg
  assign hwmain_integrator2_avg_D_IN = 32'h0 ;
  assign hwmain_integrator2_avg_EN = 1'b0 ;

  // register hwmain_integrator2_curr
  assign hwmain_integrator2_curr_D_IN = hwmain_integrator2_sampleIn_D_OUT ;
  assign hwmain_integrator2_curr_EN =
	     WILL_FIRE_RL_hwmain_integrator2_enqSample ;

  // register hwmain_integrator2_prev
  assign hwmain_integrator2_prev_D_IN = hwmain_integrator2_curr ;
  assign hwmain_integrator2_prev_EN =
	     WILL_FIRE_RL_hwmain_integrator2_enqSample ;

  // register hwmain_integrator2_result
  assign hwmain_integrator2_result_D_IN = hwmain_integrator2_fadd_outQ_D_OUT ;
  assign hwmain_integrator2_result_EN =
	     WILL_FIRE_RL_hwmain_integrator2_relayResult ;

  // register hwmain_integrator2_state
  always@(WILL_FIRE_RL_hwmain_integrator2_enqSample or
	  MUX_hwmain_integrator2_state_write_1__VAL_1 or
	  WILL_FIRE_RL_hwmain_integrator2_relayResult or
	  WILL_FIRE_RL_hwmain_integrator2_relayNegate or
	  WILL_FIRE_RL_hwmain_integrator2_relaySubtract or
	  WILL_FIRE_RL_hwmain_integrator2_relayAccum or
	  WILL_FIRE_RL_hwmain_integrator2_relayAvg or
	  WILL_FIRE_RL_hwmain_integrator2_relayNegAvg or
	  WILL_FIRE_RL_hwmain_integrator2_relaySubAvg or
	  WILL_FIRE_RL_hwmain_integrator2_relayTerm1)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_hwmain_integrator2_enqSample:
	  hwmain_integrator2_state_D_IN =
	      MUX_hwmain_integrator2_state_write_1__VAL_1;
      WILL_FIRE_RL_hwmain_integrator2_relayResult:
	  hwmain_integrator2_state_D_IN = 4'd0;
      WILL_FIRE_RL_hwmain_integrator2_relayNegate:
	  hwmain_integrator2_state_D_IN = 4'd2;
      WILL_FIRE_RL_hwmain_integrator2_relaySubtract:
	  hwmain_integrator2_state_D_IN = 4'd3;
      WILL_FIRE_RL_hwmain_integrator2_relayAccum:
	  hwmain_integrator2_state_D_IN = 4'd4;
      WILL_FIRE_RL_hwmain_integrator2_relayAvg:
	  hwmain_integrator2_state_D_IN = 4'd5;
      WILL_FIRE_RL_hwmain_integrator2_relayNegAvg:
	  hwmain_integrator2_state_D_IN = 4'd6;
      WILL_FIRE_RL_hwmain_integrator2_relaySubAvg:
	  hwmain_integrator2_state_D_IN = 4'd7;
      WILL_FIRE_RL_hwmain_integrator2_relayTerm1:
	  hwmain_integrator2_state_D_IN = 4'd8;
      default: hwmain_integrator2_state_D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign hwmain_integrator2_state_EN =
	     WILL_FIRE_RL_hwmain_integrator2_enqSample ||
	     WILL_FIRE_RL_hwmain_integrator2_relayResult ||
	     WILL_FIRE_RL_hwmain_integrator2_relayNegate ||
	     WILL_FIRE_RL_hwmain_integrator2_relaySubtract ||
	     WILL_FIRE_RL_hwmain_integrator2_relayAccum ||
	     WILL_FIRE_RL_hwmain_integrator2_relayAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relaySubAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayTerm1 ;

  // register hwmain_integrator2_term1
  assign hwmain_integrator2_term1_D_IN = hwmain_integrator2_fmult_outQ_D_OUT ;
  assign hwmain_integrator2_term1_EN =
	     WILL_FIRE_RL_hwmain_integrator2_relayTerm1 ;

  // register hwmain_integrator2_term2
  assign hwmain_integrator2_term2_D_IN = hwmain_integrator2_fmult_outQ_D_OUT ;
  assign hwmain_integrator2_term2_EN =
	     WILL_FIRE_RL_hwmain_integrator2_relaySubAvg ;

  // register hwmain_integrator2_valid
  assign hwmain_integrator2_valid_D_IN = 1'd1 ;
  assign hwmain_integrator2_valid_EN =
	     WILL_FIRE_RL_hwmain_integrator2_relayResult ;

  // register hwmain_second
  assign hwmain_second_D_IN = hwmain_third ;
  assign hwmain_second_EN = WILL_FIRE_RL_hwmain_relayDataToIntegrator ;

  // register hwmain_shiftCount
  assign hwmain_shiftCount_D_IN =
	     MUX_hwmain_shiftCount_write_1__SEL_1 ?
	       MUX_hwmain_shiftCount_write_1__VAL_1 :
	       4'd0 ;
  assign hwmain_shiftCount_EN =
	     WILL_FIRE_RL_hwmain_relayData3 ||
	     WILL_FIRE_RL_hwmain_relayData2 ||
	     WILL_FIRE_RL_hwmain_relayData1 ||
	     WILL_FIRE_RL_hwmain_relayData4 ;

  // register hwmain_shiftout
  assign hwmain_shiftout_D_IN =
	     MUX_hwmain_shiftout_write_1__SEL_1 ?
	       MUX_hwmain_shiftout_write_1__VAL_1 :
	       hwmain_integrator2_result ;
  assign hwmain_shiftout_EN =
	     WILL_FIRE_RL_hwmain_relayData4 ||
	     WILL_FIRE_RL_hwmain_relayData3 ||
	     WILL_FIRE_RL_hwmain_relayData2 ||
	     WILL_FIRE_RL_hwmain_relayData1 ;

  // register hwmain_third
  assign hwmain_third_D_IN = hwmain_fourth ;
  assign hwmain_third_EN = WILL_FIRE_RL_hwmain_relayDataToIntegrator ;

  // register spi_csin
  assign spi_csin_D_IN = { spi_ssn, spi_csin[3:1] } ;
  assign spi_csin_EN = 1'd1 ;

  // register spi_prevSck
  assign spi_prevSck_D_IN = spi_sckin != 4'd0 ;
  assign spi_prevSck_EN = 1'd1 ;

  // register spi_rx_cnt
  assign spi_rx_cnt_D_IN = (spi_csin != 4'd0) ? 4'd8 : x__h14314 ;
  assign spi_rx_cnt_EN =
	     WILL_FIRE_RL_spi_dataSampling &&
	     (spi_csin != 4'd0 ||
	      spi_sckdw_whas__34_AND_spi_sckdw_wget__35_36_A_ETC___d682) ;

  // register spi_rx_word
  assign spi_rx_word_D_IN = { spi_rxin != 4'd0, spi_rx_word[7:1] } ;
  assign spi_rx_word_EN =
	     WILL_FIRE_RL_spi_dataSampling && !(spi_csin != 4'd0) &&
	     spi_sckdw_whas__34_AND_spi_sckdw_wget__35_36_A_ETC___d682 ;

  // register spi_rxin
  assign spi_rxin_D_IN = { spi_mosi, spi_rxin[3:1] } ;
  assign spi_rxin_EN = 1'd1 ;

  // register spi_sckin
  assign spi_sckin_D_IN = { spi_sck, spi_sckin[3:1] } ;
  assign spi_sckin_EN = 1'd1 ;

  // register spi_tx_cnt
  assign spi_tx_cnt_D_IN =
	     (spi_csin != 4'd0) ?
	       4'd8 :
	       (NOT_spi_sckdw_whas__34_51_OR_NOT_spi_sckdw_wge_ETC___d656 ?
		  x__h14066 :
		  4'd8) ;
  assign spi_tx_cnt_EN =
	     WILL_FIRE_RL_spi_dataDriving &&
	     (spi_csin != 4'd0 || !(spi_sckin != 4'd0) && spi_prevSck) ;

  // register spi_tx_word
  assign spi_tx_word_D_IN = (spi_tx_cnt == 4'd0) ? x__h14099 : x__h13973 ;
  assign spi_tx_word_EN =
	     WILL_FIRE_RL_spi_dataDriving && !(spi_csin != 4'd0) &&
	     !(spi_sckin != 4'd0) &&
	     spi_prevSck ;

  // register spi_txdr
  assign spi_txdr_D_IN = spi_tx_word[0] ;
  assign spi_txdr_EN =
	     WILL_FIRE_RL_spi_dataDriving && !(spi_csin != 4'd0) &&
	     NOT_spi_sckdw_whas__34_51_OR_NOT_spi_sckdw_wge_ETC___d656 ;

  // submodule hwmain_dataInQ
  assign hwmain_dataInQ_D_IN = spi_outQ_D_OUT ;
  assign hwmain_dataInQ_ENQ = spi_outQ_EMPTY_N && hwmain_dataInQ_FULL_N ;
  assign hwmain_dataInQ_DEQ = WILL_FIRE_RL_hwmain_relayDataToIntegrator ;
  assign hwmain_dataInQ_CLR = 1'b0 ;

  // submodule hwmain_dataOutQ
  assign hwmain_dataOutQ_D_IN = hwmain_shiftout[7:0] ;
  assign hwmain_dataOutQ_ENQ =
	     WILL_FIRE_RL_hwmain_relayData4 ||
	     WILL_FIRE_RL_hwmain_relayData3 ||
	     WILL_FIRE_RL_hwmain_relayData2 ||
	     WILL_FIRE_RL_hwmain_relayData1 ;
  assign hwmain_dataOutQ_DEQ = hwmain_dataOutQ_EMPTY_N && spi_inQ_FULL_N ;
  assign hwmain_dataOutQ_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fadd_calcQ
  assign hwmain_integrator1_fadd_calcQ_D_IN =
	     { hwmain_integrator1_fadd_inProcQ_D_OUT[62],
	       fraca__h2836,
	       hwmain_integrator1_fadd_inProcQ_D_OUT[35:27],
	       fracb__h2837,
	       hwmain_integrator1_fadd_inProcQ_D_OUT[8:0] } ;
  assign hwmain_integrator1_fadd_calcQ_ENQ =
	     hwmain_integrator1_fadd_inProcQ_EMPTY_N &&
	     hwmain_integrator1_fadd_calcQ_FULL_N ;
  assign hwmain_integrator1_fadd_calcQ_DEQ =
	     hwmain_integrator1_fadd_calcQ_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ_FULL_N ;
  assign hwmain_integrator1_fadd_calcQ_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fadd_inProcQ
  assign hwmain_integrator1_fadd_inProcQ_D_IN =
	     { NOT_hwmain_integrator1_fadd_inQ_first__6_BITS__ETC___d39,
	       x__h2722,
	       fraca__h2553,
	       hwmain_integrator1_fadd_inQ_D_OUT[62:55],
	       hwmain_integrator1_fadd_inQ_D_OUT[63],
	       fracb__h2554,
	       hwmain_integrator1_fadd_inQ_D_OUT[30:23],
	       hwmain_integrator1_fadd_inQ_D_OUT[31] } ;
  assign hwmain_integrator1_fadd_inProcQ_ENQ =
	     hwmain_integrator1_fadd_inQ_EMPTY_N &&
	     hwmain_integrator1_fadd_inProcQ_FULL_N ;
  assign hwmain_integrator1_fadd_inProcQ_DEQ =
	     hwmain_integrator1_fadd_inProcQ_EMPTY_N &&
	     hwmain_integrator1_fadd_calcQ_FULL_N ;
  assign hwmain_integrator1_fadd_inProcQ_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fadd_inQ
  always@(MUX_hwmain_integrator1_fadd_inQ_enq_1__SEL_1 or
	  MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_1 or
	  WILL_FIRE_RL_hwmain_integrator1_relaySubtract or
	  MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_2 or
	  WILL_FIRE_RL_hwmain_integrator1_relayTerm1 or
	  MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_hwmain_integrator1_fadd_inQ_enq_1__SEL_1:
	  hwmain_integrator1_fadd_inQ_D_IN =
	      MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_1;
      WILL_FIRE_RL_hwmain_integrator1_relaySubtract:
	  hwmain_integrator1_fadd_inQ_D_IN =
	      MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_2;
      WILL_FIRE_RL_hwmain_integrator1_relayTerm1:
	  hwmain_integrator1_fadd_inQ_D_IN =
	      MUX_hwmain_integrator1_fadd_inQ_enq_1__VAL_3;
      default: hwmain_integrator1_fadd_inQ_D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign hwmain_integrator1_fadd_inQ_ENQ =
	     WILL_FIRE_RL_hwmain_integrator1_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayNegate ||
	     WILL_FIRE_RL_hwmain_integrator1_relaySubtract ||
	     WILL_FIRE_RL_hwmain_integrator1_relayTerm1 ;
  assign hwmain_integrator1_fadd_inQ_DEQ =
	     hwmain_integrator1_fadd_inQ_EMPTY_N &&
	     hwmain_integrator1_fadd_inProcQ_FULL_N ;
  assign hwmain_integrator1_fadd_inQ_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fadd_normalizeQ
  assign hwmain_integrator1_fadd_normalizeQ_D_IN =
	     { x__h3018, x__h3065, x__h3069 } ;
  assign hwmain_integrator1_fadd_normalizeQ_ENQ =
	     hwmain_integrator1_fadd_calcQ_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ_DEQ =
	     hwmain_integrator1_fadd_normalizeQ_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ1_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fadd_normalizeQ1
  assign hwmain_integrator1_fadd_normalizeQ1_D_IN =
	     { hwmain_integrator1_fadd_normalizeQ_D_OUT[27],
	       hwmain_integrator1_fadd_normalizeQ_D_OUT[18] ?
		 { newexp___1__h3199, newfrac___1__h3198 } :
		 hwmain_integrator1_fadd_normalizeQ_D_OUT[26:0] } ;
  assign hwmain_integrator1_fadd_normalizeQ1_ENQ =
	     hwmain_integrator1_fadd_normalizeQ_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ1_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ1_DEQ =
	     hwmain_integrator1_fadd_normalizeQ1_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ2_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ1_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fadd_normalizeQ2
  assign hwmain_integrator1_fadd_normalizeQ2_D_IN =
	     { hwmain_integrator1_fadd_normalizeQ1_D_OUT[27],
	       (hwmain_integrator1_fadd_normalizeQ1_D_OUT[17:9] == 9'd0 &&
		hwmain_integrator1_fadd_normalizeQ1_D_OUT[18:0] != 19'd0) ?
		 { newexp___1__h3298, newfrac___1__h3297 } :
		 hwmain_integrator1_fadd_normalizeQ1_D_OUT[26:0] } ;
  assign hwmain_integrator1_fadd_normalizeQ2_ENQ =
	     hwmain_integrator1_fadd_normalizeQ1_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ2_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ2_DEQ =
	     hwmain_integrator1_fadd_normalizeQ2_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ3_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ2_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fadd_normalizeQ3
  assign hwmain_integrator1_fadd_normalizeQ3_D_IN =
	     { hwmain_integrator1_fadd_normalizeQ2_D_OUT[27],
	       (hwmain_integrator1_fadd_normalizeQ2_D_OUT[17:14] == 4'd0 &&
		hwmain_integrator1_fadd_normalizeQ2_D_OUT[18:0] != 19'd0) ?
		 { newexp___1__h3397, newfrac___1__h3396 } :
		 hwmain_integrator1_fadd_normalizeQ2_D_OUT[26:0] } ;
  assign hwmain_integrator1_fadd_normalizeQ3_ENQ =
	     hwmain_integrator1_fadd_normalizeQ2_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ3_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ3_DEQ =
	     hwmain_integrator1_fadd_normalizeQ3_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ4_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ3_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fadd_normalizeQ4
  assign hwmain_integrator1_fadd_normalizeQ4_D_IN =
	     { hwmain_integrator1_fadd_normalizeQ3_D_OUT[27],
	       (hwmain_integrator1_fadd_normalizeQ3_D_OUT[17:16] == 2'd0 &&
		hwmain_integrator1_fadd_normalizeQ3_D_OUT[18:0] != 19'd0) ?
		 { newexp___1__h3496, newfrac___1__h3495 } :
		 hwmain_integrator1_fadd_normalizeQ3_D_OUT[26:0] } ;
  assign hwmain_integrator1_fadd_normalizeQ4_ENQ =
	     hwmain_integrator1_fadd_normalizeQ3_EMPTY_N &&
	     hwmain_integrator1_fadd_normalizeQ4_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ4_DEQ =
	     hwmain_integrator1_fadd_normalizeQ4_EMPTY_N &&
	     hwmain_integrator1_fadd_outQ_FULL_N ;
  assign hwmain_integrator1_fadd_normalizeQ4_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fadd_outQ
  assign hwmain_integrator1_fadd_outQ_D_IN =
	     { hwmain_integrator1_fadd_normalizeQ4_D_OUT[27],
	       _theResult___snd__h3588,
	       x__h3595[16:0],
	       6'd0 } ;
  assign hwmain_integrator1_fadd_outQ_ENQ =
	     hwmain_integrator1_fadd_normalizeQ4_EMPTY_N &&
	     hwmain_integrator1_fadd_outQ_FULL_N ;
  assign hwmain_integrator1_fadd_outQ_DEQ =
	     WILL_FIRE_RL_hwmain_integrator1_relayResult ||
	     WILL_FIRE_RL_hwmain_integrator1_relaySubAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayAccum ||
	     WILL_FIRE_RL_hwmain_integrator1_relaySubtract ;
  assign hwmain_integrator1_fadd_outQ_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fmult_mult16_dsp_mult
  always@(WILL_FIRE_RL_hwmain_integrator1_relayAccum or
	  MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_1 or
	  WILL_FIRE_RL_hwmain_integrator1_relayAvg or
	  MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_2 or
	  WILL_FIRE_RL_hwmain_integrator1_relayNegAvg or
	  MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_3 or
	  WILL_FIRE_RL_hwmain_integrator1_relaySubAvg or
	  MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_4 or
	  WILL_FIRE_RL_hwmain_integrator1_enqSample or
	  MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_hwmain_integrator1_relayAccum:
	  hwmain_integrator1_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_1;
      WILL_FIRE_RL_hwmain_integrator1_relayAvg:
	  hwmain_integrator1_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_2;
      WILL_FIRE_RL_hwmain_integrator1_relayNegAvg:
	  hwmain_integrator1_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_3;
      WILL_FIRE_RL_hwmain_integrator1_relaySubAvg:
	  hwmain_integrator1_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_4;
      WILL_FIRE_RL_hwmain_integrator1_enqSample:
	  hwmain_integrator1_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_1__VAL_5;
      default: hwmain_integrator1_fmult_mult16_dsp_mult_A =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_hwmain_integrator1_enqSample or
	  MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_2__VAL_5 or
	  WILL_FIRE_RL_hwmain_integrator1_relayAccum or
	  WILL_FIRE_RL_hwmain_integrator1_relayAvg or
	  WILL_FIRE_RL_hwmain_integrator1_relaySubAvg or
	  WILL_FIRE_RL_hwmain_integrator1_relayNegAvg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_hwmain_integrator1_enqSample:
	  hwmain_integrator1_fmult_mult16_dsp_mult_B =
	      MUX_hwmain_integrator1_fmult_mult16_dsp_mult_put_2__VAL_5;
      WILL_FIRE_RL_hwmain_integrator1_relayAccum ||
      WILL_FIRE_RL_hwmain_integrator1_relayAvg:
	  hwmain_integrator1_fmult_mult16_dsp_mult_B = 16'd32768;
      WILL_FIRE_RL_hwmain_integrator1_relaySubAvg:
	  hwmain_integrator1_fmult_mult16_dsp_mult_B = 16'd41943;
      WILL_FIRE_RL_hwmain_integrator1_relayNegAvg:
	  hwmain_integrator1_fmult_mult16_dsp_mult_B = 16'd59310;
      default: hwmain_integrator1_fmult_mult16_dsp_mult_B =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end

  // submodule hwmain_integrator1_fmult_multQ
  assign hwmain_integrator1_fmult_multQ_D_IN =
	     hwmain_integrator1_fmult_mult16_dsp_mult_O ;
  assign hwmain_integrator1_fmult_multQ_ENQ =
	     WILL_FIRE_RL_hwmain_integrator1_relaySubAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayAccum ||
	     WILL_FIRE_RL_hwmain_integrator1_enqSample ;
  assign hwmain_integrator1_fmult_multQ_DEQ =
	     hwmain_integrator1_fmult_multQ_EMPTY_N &&
	     hwmain_integrator1_fmult_signExpZeroQ_EMPTY_N &&
	     hwmain_integrator1_fmult_outQ_FULL_N ;
  assign hwmain_integrator1_fmult_multQ_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fmult_outQ
  assign hwmain_integrator1_fmult_outQ_D_IN =
	     hwmain_integrator1_fmult_signExpZeroQ_D_OUT[0] ?
	       32'd0 :
	       x__h1624 ;
  assign hwmain_integrator1_fmult_outQ_ENQ =
	     hwmain_integrator1_fmult_multQ_EMPTY_N &&
	     hwmain_integrator1_fmult_signExpZeroQ_EMPTY_N &&
	     hwmain_integrator1_fmult_outQ_FULL_N ;
  assign hwmain_integrator1_fmult_outQ_DEQ =
	     WILL_FIRE_RL_hwmain_integrator1_relayTerm1 ||
	     WILL_FIRE_RL_hwmain_integrator1_relaySubAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayNegate ;
  assign hwmain_integrator1_fmult_outQ_CLR = 1'b0 ;

  // submodule hwmain_integrator1_fmult_signExpZeroQ
  always@(WILL_FIRE_RL_hwmain_integrator1_enqSample or
	  MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_1 or
	  WILL_FIRE_RL_hwmain_integrator1_relayAccum or
	  MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_2 or
	  WILL_FIRE_RL_hwmain_integrator1_relayAvg or
	  MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_3 or
	  WILL_FIRE_RL_hwmain_integrator1_relayNegAvg or
	  MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_4 or
	  WILL_FIRE_RL_hwmain_integrator1_relaySubAvg or
	  MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_hwmain_integrator1_enqSample:
	  hwmain_integrator1_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_1;
      WILL_FIRE_RL_hwmain_integrator1_relayAccum:
	  hwmain_integrator1_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_2;
      WILL_FIRE_RL_hwmain_integrator1_relayAvg:
	  hwmain_integrator1_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_3;
      WILL_FIRE_RL_hwmain_integrator1_relayNegAvg:
	  hwmain_integrator1_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_4;
      WILL_FIRE_RL_hwmain_integrator1_relaySubAvg:
	  hwmain_integrator1_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator1_fmult_signExpZeroQ_enq_1__VAL_5;
      default: hwmain_integrator1_fmult_signExpZeroQ_D_IN =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign hwmain_integrator1_fmult_signExpZeroQ_ENQ =
	     WILL_FIRE_RL_hwmain_integrator1_enqSample ||
	     WILL_FIRE_RL_hwmain_integrator1_relayAccum ||
	     WILL_FIRE_RL_hwmain_integrator1_relayAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator1_relaySubAvg ;
  assign hwmain_integrator1_fmult_signExpZeroQ_DEQ =
	     hwmain_integrator1_fmult_multQ_EMPTY_N &&
	     hwmain_integrator1_fmult_signExpZeroQ_EMPTY_N &&
	     hwmain_integrator1_fmult_outQ_FULL_N ;
  assign hwmain_integrator1_fmult_signExpZeroQ_CLR = 1'b0 ;

  // submodule hwmain_integrator1_sampleIn
  assign hwmain_integrator1_sampleIn_D_IN =
	     { hwmain_first[7], sample_exp__h12871, sample_sfd__h12872 } ;
  assign hwmain_integrator1_sampleIn_ENQ =
	     WILL_FIRE_RL_hwmain_relayDataToIntegrator &&
	     !hwmain_count_90_ULT_3___d591 ;
  assign hwmain_integrator1_sampleIn_DEQ =
	     WILL_FIRE_RL_hwmain_integrator1_enqSample ;
  assign hwmain_integrator1_sampleIn_CLR = 1'b0 ;

  // submodule hwmain_integrator1_samples
  assign hwmain_integrator1_samples_D_IN = hwmain_integrator1_sampleIn_D_OUT ;
  assign hwmain_integrator1_samples_ENQ =
	     WILL_FIRE_RL_hwmain_integrator1_enqSample ;
  assign hwmain_integrator1_samples_DEQ =
	     WILL_FIRE_RL_hwmain_integrator1_enqSample &&
	     !hwmain_integrator1_samples_FULL_N ;
  assign hwmain_integrator1_samples_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fadd_calcQ
  assign hwmain_integrator2_fadd_calcQ_D_IN =
	     { hwmain_integrator2_fadd_inProcQ_D_OUT[62],
	       fraca__h8934,
	       hwmain_integrator2_fadd_inProcQ_D_OUT[35:27],
	       fracb__h8935,
	       hwmain_integrator2_fadd_inProcQ_D_OUT[8:0] } ;
  assign hwmain_integrator2_fadd_calcQ_ENQ =
	     hwmain_integrator2_fadd_inProcQ_EMPTY_N &&
	     hwmain_integrator2_fadd_calcQ_FULL_N ;
  assign hwmain_integrator2_fadd_calcQ_DEQ =
	     hwmain_integrator2_fadd_calcQ_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ_FULL_N ;
  assign hwmain_integrator2_fadd_calcQ_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fadd_inProcQ
  assign hwmain_integrator2_fadd_inProcQ_D_IN =
	     { NOT_hwmain_integrator2_fadd_inQ_first__20_BITS_ETC___d333,
	       x__h8823,
	       fraca__h8654,
	       hwmain_integrator2_fadd_inQ_D_OUT[62:55],
	       hwmain_integrator2_fadd_inQ_D_OUT[63],
	       fracb__h8655,
	       hwmain_integrator2_fadd_inQ_D_OUT[30:23],
	       hwmain_integrator2_fadd_inQ_D_OUT[31] } ;
  assign hwmain_integrator2_fadd_inProcQ_ENQ =
	     hwmain_integrator2_fadd_inQ_EMPTY_N &&
	     hwmain_integrator2_fadd_inProcQ_FULL_N ;
  assign hwmain_integrator2_fadd_inProcQ_DEQ =
	     hwmain_integrator2_fadd_inProcQ_EMPTY_N &&
	     hwmain_integrator2_fadd_calcQ_FULL_N ;
  assign hwmain_integrator2_fadd_inProcQ_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fadd_inQ
  always@(MUX_hwmain_integrator2_fadd_inQ_enq_1__SEL_1 or
	  MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_1 or
	  WILL_FIRE_RL_hwmain_integrator2_relaySubtract or
	  MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_2 or
	  WILL_FIRE_RL_hwmain_integrator2_relayTerm1 or
	  MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_hwmain_integrator2_fadd_inQ_enq_1__SEL_1:
	  hwmain_integrator2_fadd_inQ_D_IN =
	      MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_1;
      WILL_FIRE_RL_hwmain_integrator2_relaySubtract:
	  hwmain_integrator2_fadd_inQ_D_IN =
	      MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_2;
      WILL_FIRE_RL_hwmain_integrator2_relayTerm1:
	  hwmain_integrator2_fadd_inQ_D_IN =
	      MUX_hwmain_integrator2_fadd_inQ_enq_1__VAL_3;
      default: hwmain_integrator2_fadd_inQ_D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign hwmain_integrator2_fadd_inQ_ENQ =
	     WILL_FIRE_RL_hwmain_integrator2_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayNegate ||
	     WILL_FIRE_RL_hwmain_integrator2_relaySubtract ||
	     WILL_FIRE_RL_hwmain_integrator2_relayTerm1 ;
  assign hwmain_integrator2_fadd_inQ_DEQ =
	     hwmain_integrator2_fadd_inQ_EMPTY_N &&
	     hwmain_integrator2_fadd_inProcQ_FULL_N ;
  assign hwmain_integrator2_fadd_inQ_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fadd_normalizeQ
  assign hwmain_integrator2_fadd_normalizeQ_D_IN =
	     { x__h9116, x__h9163, x__h9167 } ;
  assign hwmain_integrator2_fadd_normalizeQ_ENQ =
	     hwmain_integrator2_fadd_calcQ_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ_DEQ =
	     hwmain_integrator2_fadd_normalizeQ_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ1_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fadd_normalizeQ1
  assign hwmain_integrator2_fadd_normalizeQ1_D_IN =
	     { hwmain_integrator2_fadd_normalizeQ_D_OUT[27],
	       hwmain_integrator2_fadd_normalizeQ_D_OUT[18] ?
		 { newexp___1__h9297, newfrac___1__h9296 } :
		 hwmain_integrator2_fadd_normalizeQ_D_OUT[26:0] } ;
  assign hwmain_integrator2_fadd_normalizeQ1_ENQ =
	     hwmain_integrator2_fadd_normalizeQ_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ1_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ1_DEQ =
	     hwmain_integrator2_fadd_normalizeQ1_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ2_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ1_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fadd_normalizeQ2
  assign hwmain_integrator2_fadd_normalizeQ2_D_IN =
	     { hwmain_integrator2_fadd_normalizeQ1_D_OUT[27],
	       (hwmain_integrator2_fadd_normalizeQ1_D_OUT[17:9] == 9'd0 &&
		hwmain_integrator2_fadd_normalizeQ1_D_OUT[18:0] != 19'd0) ?
		 { newexp___1__h9396, newfrac___1__h9395 } :
		 hwmain_integrator2_fadd_normalizeQ1_D_OUT[26:0] } ;
  assign hwmain_integrator2_fadd_normalizeQ2_ENQ =
	     hwmain_integrator2_fadd_normalizeQ1_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ2_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ2_DEQ =
	     hwmain_integrator2_fadd_normalizeQ2_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ3_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ2_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fadd_normalizeQ3
  assign hwmain_integrator2_fadd_normalizeQ3_D_IN =
	     { hwmain_integrator2_fadd_normalizeQ2_D_OUT[27],
	       (hwmain_integrator2_fadd_normalizeQ2_D_OUT[17:14] == 4'd0 &&
		hwmain_integrator2_fadd_normalizeQ2_D_OUT[18:0] != 19'd0) ?
		 { newexp___1__h9495, newfrac___1__h9494 } :
		 hwmain_integrator2_fadd_normalizeQ2_D_OUT[26:0] } ;
  assign hwmain_integrator2_fadd_normalizeQ3_ENQ =
	     hwmain_integrator2_fadd_normalizeQ2_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ3_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ3_DEQ =
	     hwmain_integrator2_fadd_normalizeQ3_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ4_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ3_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fadd_normalizeQ4
  assign hwmain_integrator2_fadd_normalizeQ4_D_IN =
	     { hwmain_integrator2_fadd_normalizeQ3_D_OUT[27],
	       (hwmain_integrator2_fadd_normalizeQ3_D_OUT[17:16] == 2'd0 &&
		hwmain_integrator2_fadd_normalizeQ3_D_OUT[18:0] != 19'd0) ?
		 { newexp___1__h9594, newfrac___1__h9593 } :
		 hwmain_integrator2_fadd_normalizeQ3_D_OUT[26:0] } ;
  assign hwmain_integrator2_fadd_normalizeQ4_ENQ =
	     hwmain_integrator2_fadd_normalizeQ3_EMPTY_N &&
	     hwmain_integrator2_fadd_normalizeQ4_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ4_DEQ =
	     hwmain_integrator2_fadd_normalizeQ4_EMPTY_N &&
	     hwmain_integrator2_fadd_outQ_FULL_N ;
  assign hwmain_integrator2_fadd_normalizeQ4_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fadd_outQ
  assign hwmain_integrator2_fadd_outQ_D_IN =
	     { hwmain_integrator2_fadd_normalizeQ4_D_OUT[27],
	       _theResult___snd__h9686,
	       x__h9693[16:0],
	       6'd0 } ;
  assign hwmain_integrator2_fadd_outQ_ENQ =
	     hwmain_integrator2_fadd_normalizeQ4_EMPTY_N &&
	     hwmain_integrator2_fadd_outQ_FULL_N ;
  assign hwmain_integrator2_fadd_outQ_DEQ =
	     WILL_FIRE_RL_hwmain_integrator2_relayResult ||
	     WILL_FIRE_RL_hwmain_integrator2_relaySubAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayAccum ||
	     WILL_FIRE_RL_hwmain_integrator2_relaySubtract ;
  assign hwmain_integrator2_fadd_outQ_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fmult_mult16_dsp_mult
  always@(WILL_FIRE_RL_hwmain_integrator2_relayAccum or
	  MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_1 or
	  WILL_FIRE_RL_hwmain_integrator2_relayAvg or
	  MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_2 or
	  WILL_FIRE_RL_hwmain_integrator2_relayNegAvg or
	  MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_3 or
	  WILL_FIRE_RL_hwmain_integrator2_relaySubAvg or
	  MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_4 or
	  WILL_FIRE_RL_hwmain_integrator2_enqSample or
	  MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_hwmain_integrator2_relayAccum:
	  hwmain_integrator2_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_1;
      WILL_FIRE_RL_hwmain_integrator2_relayAvg:
	  hwmain_integrator2_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_2;
      WILL_FIRE_RL_hwmain_integrator2_relayNegAvg:
	  hwmain_integrator2_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_3;
      WILL_FIRE_RL_hwmain_integrator2_relaySubAvg:
	  hwmain_integrator2_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_4;
      WILL_FIRE_RL_hwmain_integrator2_enqSample:
	  hwmain_integrator2_fmult_mult16_dsp_mult_A =
	      MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_1__VAL_5;
      default: hwmain_integrator2_fmult_mult16_dsp_mult_A =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_hwmain_integrator2_enqSample or
	  MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_2__VAL_5 or
	  WILL_FIRE_RL_hwmain_integrator2_relayAccum or
	  WILL_FIRE_RL_hwmain_integrator2_relayAvg or
	  WILL_FIRE_RL_hwmain_integrator2_relaySubAvg or
	  WILL_FIRE_RL_hwmain_integrator2_relayNegAvg)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_hwmain_integrator2_enqSample:
	  hwmain_integrator2_fmult_mult16_dsp_mult_B =
	      MUX_hwmain_integrator2_fmult_mult16_dsp_mult_put_2__VAL_5;
      WILL_FIRE_RL_hwmain_integrator2_relayAccum ||
      WILL_FIRE_RL_hwmain_integrator2_relayAvg:
	  hwmain_integrator2_fmult_mult16_dsp_mult_B = 16'd32768;
      WILL_FIRE_RL_hwmain_integrator2_relaySubAvg:
	  hwmain_integrator2_fmult_mult16_dsp_mult_B = 16'd41943;
      WILL_FIRE_RL_hwmain_integrator2_relayNegAvg:
	  hwmain_integrator2_fmult_mult16_dsp_mult_B = 16'd59310;
      default: hwmain_integrator2_fmult_mult16_dsp_mult_B =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end

  // submodule hwmain_integrator2_fmult_multQ
  assign hwmain_integrator2_fmult_multQ_D_IN =
	     hwmain_integrator2_fmult_mult16_dsp_mult_O ;
  assign hwmain_integrator2_fmult_multQ_ENQ =
	     WILL_FIRE_RL_hwmain_integrator2_relaySubAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayAccum ||
	     WILL_FIRE_RL_hwmain_integrator2_enqSample ;
  assign hwmain_integrator2_fmult_multQ_DEQ =
	     hwmain_integrator2_fmult_multQ_EMPTY_N &&
	     hwmain_integrator2_fmult_signExpZeroQ_EMPTY_N &&
	     hwmain_integrator2_fmult_outQ_FULL_N ;
  assign hwmain_integrator2_fmult_multQ_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fmult_outQ
  assign hwmain_integrator2_fmult_outQ_D_IN =
	     hwmain_integrator2_fmult_signExpZeroQ_D_OUT[0] ?
	       32'd0 :
	       x__h7732 ;
  assign hwmain_integrator2_fmult_outQ_ENQ =
	     hwmain_integrator2_fmult_multQ_EMPTY_N &&
	     hwmain_integrator2_fmult_signExpZeroQ_EMPTY_N &&
	     hwmain_integrator2_fmult_outQ_FULL_N ;
  assign hwmain_integrator2_fmult_outQ_DEQ =
	     WILL_FIRE_RL_hwmain_integrator2_relayTerm1 ||
	     WILL_FIRE_RL_hwmain_integrator2_relaySubAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayNegate ;
  assign hwmain_integrator2_fmult_outQ_CLR = 1'b0 ;

  // submodule hwmain_integrator2_fmult_signExpZeroQ
  always@(WILL_FIRE_RL_hwmain_integrator2_enqSample or
	  MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_1 or
	  WILL_FIRE_RL_hwmain_integrator2_relayAccum or
	  MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_2 or
	  WILL_FIRE_RL_hwmain_integrator2_relayAvg or
	  MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_3 or
	  WILL_FIRE_RL_hwmain_integrator2_relayNegAvg or
	  MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_4 or
	  WILL_FIRE_RL_hwmain_integrator2_relaySubAvg or
	  MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_hwmain_integrator2_enqSample:
	  hwmain_integrator2_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_1;
      WILL_FIRE_RL_hwmain_integrator2_relayAccum:
	  hwmain_integrator2_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_2;
      WILL_FIRE_RL_hwmain_integrator2_relayAvg:
	  hwmain_integrator2_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_3;
      WILL_FIRE_RL_hwmain_integrator2_relayNegAvg:
	  hwmain_integrator2_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_4;
      WILL_FIRE_RL_hwmain_integrator2_relaySubAvg:
	  hwmain_integrator2_fmult_signExpZeroQ_D_IN =
	      MUX_hwmain_integrator2_fmult_signExpZeroQ_enq_1__VAL_5;
      default: hwmain_integrator2_fmult_signExpZeroQ_D_IN =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign hwmain_integrator2_fmult_signExpZeroQ_ENQ =
	     WILL_FIRE_RL_hwmain_integrator2_enqSample ||
	     WILL_FIRE_RL_hwmain_integrator2_relayAccum ||
	     WILL_FIRE_RL_hwmain_integrator2_relayAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relayNegAvg ||
	     WILL_FIRE_RL_hwmain_integrator2_relaySubAvg ;
  assign hwmain_integrator2_fmult_signExpZeroQ_DEQ =
	     hwmain_integrator2_fmult_multQ_EMPTY_N &&
	     hwmain_integrator2_fmult_signExpZeroQ_EMPTY_N &&
	     hwmain_integrator2_fmult_outQ_FULL_N ;
  assign hwmain_integrator2_fmult_signExpZeroQ_CLR = 1'b0 ;

  // submodule hwmain_integrator2_sampleIn
  assign hwmain_integrator2_sampleIn_D_IN = hwmain_integrator1_result ;
  assign hwmain_integrator2_sampleIn_ENQ =
	     hwmain_integrator2_state == 4'd0 &&
	     hwmain_integrator2_sampleIn_FULL_N &&
	     hwmain_integrator1_valid ;
  assign hwmain_integrator2_sampleIn_DEQ =
	     WILL_FIRE_RL_hwmain_integrator2_enqSample ;
  assign hwmain_integrator2_sampleIn_CLR = 1'b0 ;

  // submodule hwmain_integrator2_samples
  assign hwmain_integrator2_samples_D_IN = hwmain_integrator2_sampleIn_D_OUT ;
  assign hwmain_integrator2_samples_ENQ =
	     WILL_FIRE_RL_hwmain_integrator2_enqSample ;
  assign hwmain_integrator2_samples_DEQ =
	     WILL_FIRE_RL_hwmain_integrator2_enqSample &&
	     !hwmain_integrator2_samples_FULL_N ;
  assign hwmain_integrator2_samples_CLR = 1'b0 ;

  // submodule spi_inQ
  assign spi_inQ_D_IN = hwmain_dataOutQ_D_OUT ;
  assign spi_inQ_ENQ = hwmain_dataOutQ_EMPTY_N && spi_inQ_FULL_N ;
  assign spi_inQ_DEQ =
	     WILL_FIRE_RL_spi_dataDriving && !(spi_csin != 4'd0) &&
	     spi_tx_cnt == 4'd0 &&
	     !(spi_sckin != 4'd0) &&
	     spi_prevSck ;
  assign spi_inQ_CLR = 1'b0 ;

  // submodule spi_outQ
  assign spi_outQ_D_IN = spi_rx_word ;
  assign spi_outQ_ENQ =
	     WILL_FIRE_RL_spi_dataSampling && !(spi_csin != 4'd0) &&
	     spi_rx_cnt == 4'd0 &&
	     spi_sckin != 4'd0 &&
	     !spi_prevSck ;
  assign spi_outQ_DEQ = spi_outQ_EMPTY_N && hwmain_dataInQ_FULL_N ;
  assign spi_outQ_CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_hwmain_integrator1_fadd_inQ_first__6_BITS__ETC___d39 =
	     !hwmain_integrator1_fadd_inQ_first__6_BITS_62_T_ETC___d29 ||
	     hwmain_integrator1_fadd_inQ_D_OUT[62:55] ==
	     hwmain_integrator1_fadd_inQ_D_OUT[30:23] &&
	     fraca__h2553 > fracb__h2554 ;
  assign NOT_hwmain_integrator2_fadd_inQ_first__20_BITS_ETC___d333 =
	     !hwmain_integrator2_fadd_inQ_first__20_BITS_62__ETC___d323 ||
	     hwmain_integrator2_fadd_inQ_D_OUT[62:55] ==
	     hwmain_integrator2_fadd_inQ_D_OUT[30:23] &&
	     fraca__h8654 > fracb__h8655 ;
  assign NOT_spi_sckdw_whas__34_51_OR_NOT_spi_sckdw_wge_ETC___d656 =
	     !(spi_sckin != 4'd0) && spi_prevSck && spi_tx_cnt != 4'd0 ;
  assign _theResult___fst__h1674 =
	     hwmain_integrator1_fmult_multQ_D_OUT[31] ?
	       hwmain_integrator1_fmult_multQ_D_OUT[30:15] :
	       hwmain_integrator1_fmult_multQ_D_OUT[29:14] ;
  assign _theResult___fst__h7776 =
	     hwmain_integrator2_fmult_multQ_D_OUT[31] ?
	       hwmain_integrator2_fmult_multQ_D_OUT[30:15] :
	       hwmain_integrator2_fmult_multQ_D_OUT[29:14] ;
  assign _theResult___snd__h1675 =
	     hwmain_integrator1_fmult_multQ_D_OUT[31] ?
	       x__h1680[7:0] :
	       x__h1689[7:0] ;
  assign _theResult___snd__h3588 =
	     (!hwmain_integrator1_fadd_normalizeQ4_D_OUT[17] &&
	      hwmain_integrator1_fadd_normalizeQ4_D_OUT[18:0] != 19'd0) ?
	       newexp___1__h3590 :
	       hwmain_integrator1_fadd_normalizeQ4_D_OUT[26:19] ;
  assign _theResult___snd__h7777 =
	     hwmain_integrator2_fmult_multQ_D_OUT[31] ?
	       x__h7782[7:0] :
	       x__h7791[7:0] ;
  assign _theResult___snd__h9686 =
	     (!hwmain_integrator2_fadd_normalizeQ4_D_OUT[17] &&
	      hwmain_integrator2_fadd_normalizeQ4_D_OUT[18:0] != 19'd0) ?
	       newexp___1__h9688 :
	       hwmain_integrator2_fadd_normalizeQ4_D_OUT[26:19] ;
  assign fraca__h2553 = { 1'd1, hwmain_integrator1_fadd_inQ_D_OUT[54:38] } ;
  assign fraca__h2836 =
	     hwmain_integrator1_fadd_inProcQ_D_OUT[62] ?
	       hwmain_integrator1_fadd_inProcQ_D_OUT[53:36] :
	       hwmain_integrator1_fadd_inProcQ_D_OUT[53:36] >>
	       hwmain_integrator1_fadd_inProcQ_D_OUT[61:54] ;
  assign fraca__h3823 = { 1'd1, hwmain_integrator1_sampleIn_D_OUT[22:8] } ;
  assign fraca__h8654 = { 1'd1, hwmain_integrator2_fadd_inQ_D_OUT[54:38] } ;
  assign fraca__h8934 =
	     hwmain_integrator2_fadd_inProcQ_D_OUT[62] ?
	       hwmain_integrator2_fadd_inProcQ_D_OUT[53:36] :
	       hwmain_integrator2_fadd_inProcQ_D_OUT[53:36] >>
	       hwmain_integrator2_fadd_inProcQ_D_OUT[61:54] ;
  assign fraca__h9915 = { 1'd1, hwmain_integrator2_sampleIn_D_OUT[22:8] } ;
  assign fracb__h2554 = { 1'd1, hwmain_integrator1_fadd_inQ_D_OUT[22:6] } ;
  assign fracb__h2837 =
	     hwmain_integrator1_fadd_inProcQ_D_OUT[62] ?
	       hwmain_integrator1_fadd_inProcQ_D_OUT[26:9] >>
	       hwmain_integrator1_fadd_inProcQ_D_OUT[61:54] :
	       hwmain_integrator1_fadd_inProcQ_D_OUT[26:9] ;
  assign fracb__h8655 = { 1'd1, hwmain_integrator2_fadd_inQ_D_OUT[22:6] } ;
  assign fracb__h8935 =
	     hwmain_integrator2_fadd_inProcQ_D_OUT[62] ?
	       hwmain_integrator2_fadd_inProcQ_D_OUT[26:9] >>
	       hwmain_integrator2_fadd_inProcQ_D_OUT[61:54] :
	       hwmain_integrator2_fadd_inProcQ_D_OUT[26:9] ;
  assign hwmain_count_90_ULT_3___d591 = hwmain_count < 4'd3 ;
  assign hwmain_integrator1_fadd_inQ_first__6_BITS_62_T_ETC___d29 =
	     hwmain_integrator1_fadd_inQ_D_OUT[62:55] <=
	     hwmain_integrator1_fadd_inQ_D_OUT[30:23] ;
  assign hwmain_integrator2_fadd_inQ_first__20_BITS_62__ETC___d323 =
	     hwmain_integrator2_fadd_inQ_D_OUT[62:55] <=
	     hwmain_integrator2_fadd_inQ_D_OUT[30:23] ;
  assign newexp___1__h3199 =
	     hwmain_integrator1_fadd_normalizeQ_D_OUT[26:19] + 8'd1 ;
  assign newexp___1__h3298 =
	     hwmain_integrator1_fadd_normalizeQ1_D_OUT[26:19] - 8'd9 ;
  assign newexp___1__h3397 =
	     hwmain_integrator1_fadd_normalizeQ2_D_OUT[26:19] - 8'd5 ;
  assign newexp___1__h3496 =
	     hwmain_integrator1_fadd_normalizeQ3_D_OUT[26:19] - 8'd2 ;
  assign newexp___1__h3590 =
	     hwmain_integrator1_fadd_normalizeQ4_D_OUT[26:19] - 8'd1 ;
  assign newexp___1__h9297 =
	     hwmain_integrator2_fadd_normalizeQ_D_OUT[26:19] + 8'd1 ;
  assign newexp___1__h9396 =
	     hwmain_integrator2_fadd_normalizeQ1_D_OUT[26:19] - 8'd9 ;
  assign newexp___1__h9495 =
	     hwmain_integrator2_fadd_normalizeQ2_D_OUT[26:19] - 8'd5 ;
  assign newexp___1__h9594 =
	     hwmain_integrator2_fadd_normalizeQ3_D_OUT[26:19] - 8'd2 ;
  assign newexp___1__h9688 =
	     hwmain_integrator2_fadd_normalizeQ4_D_OUT[26:19] - 8'd1 ;
  assign newfrac___1__h3198 =
	     { 1'd0, hwmain_integrator1_fadd_normalizeQ_D_OUT[18:1] } ;
  assign newfrac___1__h3297 =
	     { hwmain_integrator1_fadd_normalizeQ1_D_OUT[9:0], 9'd0 } ;
  assign newfrac___1__h3396 =
	     { hwmain_integrator1_fadd_normalizeQ2_D_OUT[13:0], 5'd0 } ;
  assign newfrac___1__h3495 =
	     { hwmain_integrator1_fadd_normalizeQ3_D_OUT[16:0], 2'd0 } ;
  assign newfrac___1__h3589 =
	     { hwmain_integrator1_fadd_normalizeQ4_D_OUT[17:0], 1'd0 } ;
  assign newfrac___1__h9296 =
	     { 1'd0, hwmain_integrator2_fadd_normalizeQ_D_OUT[18:1] } ;
  assign newfrac___1__h9395 =
	     { hwmain_integrator2_fadd_normalizeQ1_D_OUT[9:0], 9'd0 } ;
  assign newfrac___1__h9494 =
	     { hwmain_integrator2_fadd_normalizeQ2_D_OUT[13:0], 5'd0 } ;
  assign newfrac___1__h9593 =
	     { hwmain_integrator2_fadd_normalizeQ3_D_OUT[16:0], 2'd0 } ;
  assign newfrac___1__h9687 =
	     { hwmain_integrator2_fadd_normalizeQ4_D_OUT[17:0], 1'd0 } ;
  assign newfrac__h3071 =
	     { 1'd0, hwmain_integrator1_fadd_calcQ_D_OUT[53:36] } +
	     { 1'd0, hwmain_integrator1_fadd_calcQ_D_OUT[26:9] } ;
  assign newfrac__h3080 =
	     { 1'd0,
	       (hwmain_integrator1_fadd_calcQ_D_OUT[53:36] <=
		hwmain_integrator1_fadd_calcQ_D_OUT[26:9]) ?
		 x__h3107 :
		 x__h3090 } ;
  assign newfrac__h9169 =
	     { 1'd0, hwmain_integrator2_fadd_calcQ_D_OUT[53:36] } +
	     { 1'd0, hwmain_integrator2_fadd_calcQ_D_OUT[26:9] } ;
  assign newfrac__h9178 =
	     { 1'd0,
	       (hwmain_integrator2_fadd_calcQ_D_OUT[53:36] <=
		hwmain_integrator2_fadd_calcQ_D_OUT[26:9]) ?
		 x__h9205 :
		 x__h9188 } ;
  assign sample_exp__h12871 = { hwmain_first[6:0], hwmain_second[7] } ;
  assign sample_sfd__h12872 =
	     { hwmain_second[6:0], hwmain_third, hwmain_fourth } ;
  assign spi_sckdw_whas__34_AND_spi_sckdw_wget__35_36_A_ETC___d682 =
	     spi_sckin != 4'd0 && !spi_prevSck && spi_rx_cnt != 4'd0 ;
  assign x__h10086 =
	     hwmain_integrator2_sampleIn_D_OUT[31] ^
	     hwmain_integrator2_accum[31] ;
  assign x__h10131 =
	     { 1'd0, hwmain_integrator2_sampleIn_D_OUT[30:23] } +
	     { 1'd0, hwmain_integrator2_accum[30:23] } ;
  assign x__h10437 = ~hwmain_integrator2_samples_D_OUT[31] ;
  assign x__h10482 =
	     9'd127 + { 1'd0, hwmain_integrator2_samples_D_OUT[30:23] } ;
  assign x__h11094 = { 1'd0, hwmain_integrator2_accum[30:23] } + 9'd118 ;
  assign x__h11422 = ~hwmain_integrator2_fmult_outQ_D_OUT[31] ;
  assign x__h11467 =
	     { 1'd0, hwmain_integrator2_fmult_outQ_D_OUT[30:23] } + 9'd127 ;
  assign x__h11886 = { 1'd0, hwmain_integrator2_prev[30:23] } + 9'd126 ;
  assign x__h12292 =
	     { 1'd0, hwmain_integrator2_fadd_outQ_D_OUT[30:23] } + 9'd121 ;
  assign x__h12827 = hwmain_count + 4'd1 ;
  assign x__h13973 = { 1'b0, spi_tx_word[8:1] } ;
  assign x__h14066 = spi_tx_cnt - 4'd1 ;
  assign x__h14099 = { spi_inQ_D_OUT, 1'b0 } ;
  assign x__h14314 = spi_rx_cnt - 4'd1 ;
  assign x__h1624 =
	     { hwmain_integrator1_fmult_signExpZeroQ_D_OUT[10],
	       _theResult___snd__h1675,
	       _theResult___fst__h1674,
	       7'd0 } ;
  assign x__h1680 =
	     hwmain_integrator1_fmult_signExpZeroQ_D_OUT[9:1] - 9'd126 ;
  assign x__h1689 =
	     hwmain_integrator1_fmult_signExpZeroQ_D_OUT[9:1] - 9'd127 ;
  assign x__h2722 =
	     hwmain_integrator1_fadd_inQ_first__6_BITS_62_T_ETC___d29 ?
	       hwmain_integrator1_fadd_inQ_D_OUT[30:23] -
	       hwmain_integrator1_fadd_inQ_D_OUT[62:55] :
	       hwmain_integrator1_fadd_inQ_D_OUT[62:55] -
	       hwmain_integrator1_fadd_inQ_D_OUT[30:23] ;
  assign x__h3018 =
	     hwmain_integrator1_fadd_calcQ_D_OUT[54] ?
	       hwmain_integrator1_fadd_calcQ_D_OUT[27] :
	       hwmain_integrator1_fadd_calcQ_D_OUT[0] ;
  assign x__h3065 =
	     hwmain_integrator1_fadd_calcQ_D_OUT[54] ?
	       hwmain_integrator1_fadd_calcQ_D_OUT[35:28] :
	       hwmain_integrator1_fadd_calcQ_D_OUT[8:1] ;
  assign x__h3069 =
	     (hwmain_integrator1_fadd_calcQ_D_OUT[27] ==
	      hwmain_integrator1_fadd_calcQ_D_OUT[0]) ?
	       newfrac__h3071 :
	       newfrac__h3080 ;
  assign x__h3090 =
	     hwmain_integrator1_fadd_calcQ_D_OUT[53:36] -
	     hwmain_integrator1_fadd_calcQ_D_OUT[26:9] ;
  assign x__h3107 =
	     hwmain_integrator1_fadd_calcQ_D_OUT[26:9] -
	     hwmain_integrator1_fadd_calcQ_D_OUT[53:36] ;
  assign x__h3595 =
	     (!hwmain_integrator1_fadd_normalizeQ4_D_OUT[17] &&
	      hwmain_integrator1_fadd_normalizeQ4_D_OUT[18:0] != 19'd0) ?
	       newfrac___1__h3589 :
	       hwmain_integrator1_fadd_normalizeQ4_D_OUT[18:0] ;
  assign x__h3994 =
	     hwmain_integrator1_sampleIn_D_OUT[31] ^
	     hwmain_integrator1_accum[31] ;
  assign x__h4039 =
	     { 1'd0, hwmain_integrator1_sampleIn_D_OUT[30:23] } +
	     { 1'd0, hwmain_integrator1_accum[30:23] } ;
  assign x__h4345 = ~hwmain_integrator1_samples_D_OUT[31] ;
  assign x__h4390 =
	     9'd127 + { 1'd0, hwmain_integrator1_samples_D_OUT[30:23] } ;
  assign x__h5002 = { 1'd0, hwmain_integrator1_accum[30:23] } + 9'd118 ;
  assign x__h5330 = ~hwmain_integrator1_fmult_outQ_D_OUT[31] ;
  assign x__h5375 =
	     { 1'd0, hwmain_integrator1_fmult_outQ_D_OUT[30:23] } + 9'd127 ;
  assign x__h5794 = { 1'd0, hwmain_integrator1_prev[30:23] } + 9'd126 ;
  assign x__h6200 =
	     { 1'd0, hwmain_integrator1_fadd_outQ_D_OUT[30:23] } + 9'd121 ;
  assign x__h7732 =
	     { hwmain_integrator2_fmult_signExpZeroQ_D_OUT[10],
	       _theResult___snd__h7777,
	       _theResult___fst__h7776,
	       7'd0 } ;
  assign x__h7782 =
	     hwmain_integrator2_fmult_signExpZeroQ_D_OUT[9:1] - 9'd126 ;
  assign x__h7791 =
	     hwmain_integrator2_fmult_signExpZeroQ_D_OUT[9:1] - 9'd127 ;
  assign x__h8823 =
	     hwmain_integrator2_fadd_inQ_first__20_BITS_62__ETC___d323 ?
	       hwmain_integrator2_fadd_inQ_D_OUT[30:23] -
	       hwmain_integrator2_fadd_inQ_D_OUT[62:55] :
	       hwmain_integrator2_fadd_inQ_D_OUT[62:55] -
	       hwmain_integrator2_fadd_inQ_D_OUT[30:23] ;
  assign x__h9116 =
	     hwmain_integrator2_fadd_calcQ_D_OUT[54] ?
	       hwmain_integrator2_fadd_calcQ_D_OUT[27] :
	       hwmain_integrator2_fadd_calcQ_D_OUT[0] ;
  assign x__h9163 =
	     hwmain_integrator2_fadd_calcQ_D_OUT[54] ?
	       hwmain_integrator2_fadd_calcQ_D_OUT[35:28] :
	       hwmain_integrator2_fadd_calcQ_D_OUT[8:1] ;
  assign x__h9167 =
	     (hwmain_integrator2_fadd_calcQ_D_OUT[27] ==
	      hwmain_integrator2_fadd_calcQ_D_OUT[0]) ?
	       newfrac__h9169 :
	       newfrac__h9178 ;
  assign x__h9188 =
	     hwmain_integrator2_fadd_calcQ_D_OUT[53:36] -
	     hwmain_integrator2_fadd_calcQ_D_OUT[26:9] ;
  assign x__h9205 =
	     hwmain_integrator2_fadd_calcQ_D_OUT[26:9] -
	     hwmain_integrator2_fadd_calcQ_D_OUT[53:36] ;
  assign x__h9693 =
	     (!hwmain_integrator2_fadd_normalizeQ4_D_OUT[17] &&
	      hwmain_integrator2_fadd_normalizeQ4_D_OUT[18:0] != 19'd0) ?
	       newfrac___1__h9687 :
	       hwmain_integrator2_fadd_normalizeQ4_D_OUT[18:0] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        hwmain_count <= `BSV_ASSIGNMENT_DELAY 4'd0;
	hwmain_first <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	hwmain_fourth <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	hwmain_integrator1_accum <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hwmain_integrator1_avg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hwmain_integrator1_curr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hwmain_integrator1_prev <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hwmain_integrator1_result <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	hwmain_integrator1_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	hwmain_integrator1_term1 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	hwmain_integrator1_term2 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	hwmain_integrator1_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hwmain_integrator2_accum <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hwmain_integrator2_avg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hwmain_integrator2_curr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hwmain_integrator2_prev <= `BSV_ASSIGNMENT_DELAY 32'd0;
	hwmain_integrator2_result <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	hwmain_integrator2_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	hwmain_integrator2_term1 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	hwmain_integrator2_term2 <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	hwmain_integrator2_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hwmain_second <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	hwmain_shiftCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	hwmain_shiftout <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	hwmain_third <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	spi_csin <= `BSV_ASSIGNMENT_DELAY 4'b1111;
	spi_prevSck <= `BSV_ASSIGNMENT_DELAY 1'd0;
	spi_rx_cnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	spi_rx_word <= `BSV_ASSIGNMENT_DELAY 8'd0;
	spi_rxin <= `BSV_ASSIGNMENT_DELAY 4'b1111;
	spi_sckin <= `BSV_ASSIGNMENT_DELAY 4'b1111;
	spi_tx_cnt <= `BSV_ASSIGNMENT_DELAY 4'd0;
	spi_tx_word <= `BSV_ASSIGNMENT_DELAY 9'd0;
	spi_txdr <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (hwmain_count_EN)
	  hwmain_count <= `BSV_ASSIGNMENT_DELAY hwmain_count_D_IN;
	if (hwmain_first_EN)
	  hwmain_first <= `BSV_ASSIGNMENT_DELAY hwmain_first_D_IN;
	if (hwmain_fourth_EN)
	  hwmain_fourth <= `BSV_ASSIGNMENT_DELAY hwmain_fourth_D_IN;
	if (hwmain_integrator1_accum_EN)
	  hwmain_integrator1_accum <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator1_accum_D_IN;
	if (hwmain_integrator1_avg_EN)
	  hwmain_integrator1_avg <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator1_avg_D_IN;
	if (hwmain_integrator1_curr_EN)
	  hwmain_integrator1_curr <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator1_curr_D_IN;
	if (hwmain_integrator1_prev_EN)
	  hwmain_integrator1_prev <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator1_prev_D_IN;
	if (hwmain_integrator1_result_EN)
	  hwmain_integrator1_result <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator1_result_D_IN;
	if (hwmain_integrator1_state_EN)
	  hwmain_integrator1_state <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator1_state_D_IN;
	if (hwmain_integrator1_term1_EN)
	  hwmain_integrator1_term1 <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator1_term1_D_IN;
	if (hwmain_integrator1_term2_EN)
	  hwmain_integrator1_term2 <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator1_term2_D_IN;
	if (hwmain_integrator1_valid_EN)
	  hwmain_integrator1_valid <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator1_valid_D_IN;
	if (hwmain_integrator2_accum_EN)
	  hwmain_integrator2_accum <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator2_accum_D_IN;
	if (hwmain_integrator2_avg_EN)
	  hwmain_integrator2_avg <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator2_avg_D_IN;
	if (hwmain_integrator2_curr_EN)
	  hwmain_integrator2_curr <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator2_curr_D_IN;
	if (hwmain_integrator2_prev_EN)
	  hwmain_integrator2_prev <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator2_prev_D_IN;
	if (hwmain_integrator2_result_EN)
	  hwmain_integrator2_result <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator2_result_D_IN;
	if (hwmain_integrator2_state_EN)
	  hwmain_integrator2_state <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator2_state_D_IN;
	if (hwmain_integrator2_term1_EN)
	  hwmain_integrator2_term1 <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator2_term1_D_IN;
	if (hwmain_integrator2_term2_EN)
	  hwmain_integrator2_term2 <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator2_term2_D_IN;
	if (hwmain_integrator2_valid_EN)
	  hwmain_integrator2_valid <= `BSV_ASSIGNMENT_DELAY
	      hwmain_integrator2_valid_D_IN;
	if (hwmain_second_EN)
	  hwmain_second <= `BSV_ASSIGNMENT_DELAY hwmain_second_D_IN;
	if (hwmain_shiftCount_EN)
	  hwmain_shiftCount <= `BSV_ASSIGNMENT_DELAY hwmain_shiftCount_D_IN;
	if (hwmain_shiftout_EN)
	  hwmain_shiftout <= `BSV_ASSIGNMENT_DELAY hwmain_shiftout_D_IN;
	if (hwmain_third_EN)
	  hwmain_third <= `BSV_ASSIGNMENT_DELAY hwmain_third_D_IN;
	if (spi_csin_EN) spi_csin <= `BSV_ASSIGNMENT_DELAY spi_csin_D_IN;
	if (spi_prevSck_EN)
	  spi_prevSck <= `BSV_ASSIGNMENT_DELAY spi_prevSck_D_IN;
	if (spi_rx_cnt_EN)
	  spi_rx_cnt <= `BSV_ASSIGNMENT_DELAY spi_rx_cnt_D_IN;
	if (spi_rx_word_EN)
	  spi_rx_word <= `BSV_ASSIGNMENT_DELAY spi_rx_word_D_IN;
	if (spi_rxin_EN) spi_rxin <= `BSV_ASSIGNMENT_DELAY spi_rxin_D_IN;
	if (spi_sckin_EN) spi_sckin <= `BSV_ASSIGNMENT_DELAY spi_sckin_D_IN;
	if (spi_tx_cnt_EN)
	  spi_tx_cnt <= `BSV_ASSIGNMENT_DELAY spi_tx_cnt_D_IN;
	if (spi_tx_word_EN)
	  spi_tx_word <= `BSV_ASSIGNMENT_DELAY spi_tx_word_D_IN;
	if (spi_txdr_EN) spi_txdr <= `BSV_ASSIGNMENT_DELAY spi_txdr_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    hwmain_count = 4'hA;
    hwmain_first = 8'hAA;
    hwmain_fourth = 8'hAA;
    hwmain_integrator1_accum = 32'hAAAAAAAA;
    hwmain_integrator1_avg = 32'hAAAAAAAA;
    hwmain_integrator1_curr = 32'hAAAAAAAA;
    hwmain_integrator1_prev = 32'hAAAAAAAA;
    hwmain_integrator1_result = 32'hAAAAAAAA;
    hwmain_integrator1_state = 4'hA;
    hwmain_integrator1_term1 = 32'hAAAAAAAA;
    hwmain_integrator1_term2 = 32'hAAAAAAAA;
    hwmain_integrator1_valid = 1'h0;
    hwmain_integrator2_accum = 32'hAAAAAAAA;
    hwmain_integrator2_avg = 32'hAAAAAAAA;
    hwmain_integrator2_curr = 32'hAAAAAAAA;
    hwmain_integrator2_prev = 32'hAAAAAAAA;
    hwmain_integrator2_result = 32'hAAAAAAAA;
    hwmain_integrator2_state = 4'hA;
    hwmain_integrator2_term1 = 32'hAAAAAAAA;
    hwmain_integrator2_term2 = 32'hAAAAAAAA;
    hwmain_integrator2_valid = 1'h0;
    hwmain_second = 8'hAA;
    hwmain_shiftCount = 4'hA;
    hwmain_shiftout = 32'hAAAAAAAA;
    hwmain_third = 8'hAA;
    spi_csin = 4'hA;
    spi_prevSck = 1'h0;
    spi_rx_cnt = 4'hA;
    spi_rx_word = 8'hAA;
    spi_rxin = 4'hA;
    spi_sckin = 4'hA;
    spi_tx_cnt = 4'hA;
    spi_tx_word = 9'h0AA;
    spi_txdr = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBsvTop

