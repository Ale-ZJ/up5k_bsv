#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

#define BUFFER_SIZE 215

extern uint32_t uart_recv(); // returns 0xffffffff when empty
extern void uart_send(uint8_t data);

typedef union {
	float f;
	uint8_t c[4];
} FloatBit8;

void send_data(float value) {
	FloatBit8 b;
	b.f = value;
	uart_send(b.c[0]);
	uart_send(b.c[1]);
	uart_send(b.c[2]);
	uart_send(b.c[3]);
}

float recv_result() {
	FloatBit8 b;
	for ( int i = 0; i < 4; i++ ) {
		uint32_t res = uart_recv();
		while ( res > 0xff ) res = uart_recv();
		b.c[i] = res;
	}
	return b.f;
}


void* hwmain(void* arg) {
	// for ( int i = 0; i < 32; i++ ) {
	// 	#ifdef DEBUG
	// 	//printf( "!!! %d\n", uart_recv() );
	// 	#else
	// 	//printf( ">> %d\n", uart_recv() );
	// 	#endif
	// 	//sleep(1);
	// 	send_data((float)i);
	// 	printf("sent %f\n",(float)i);
	// }
	// while (true) {
	// 	float d = recv_result();
	// 	// if ( (d>>8)==0 ) printf( "Received %d\n", d);
	// 	printf("received %f\n", d);
	// 	if((int)d == 31)
	// 		break;
	// }

	// Time series from Ridgecrest dataset
	float c[BUFFER_SIZE] = {
	  -0.01842650,
	  -0.01839970,
	  -0.01847585,
	  -0.01855200,
	  -0.01861335,
	  -0.01867470,
	  -0.01867470,
	  -0.01862930,
	  -0.01846070,
	  -0.01870470,
	  -0.01884200,
	  -0.01829330,
	  -0.01852130,
	  -0.01867400,
	  -0.01867470,
	  -0.01844530,
	  -0.01843000,
	  -0.01838470,
	  -0.01855200,
	  -0.01862870,
	  -0.01861400,
	  -0.01832330,
	  -0.01852200,
	  -0.01847600,
	  -0.01861330,
	  -0.01887270,
	  -0.01884270,
	  -0.01902530,
	  -0.01888800,
	  -0.01875130,
	  -0.01869000,
	  -0.01864400,
	  -0.01861270,
	  -0.01867470,
	  -0.01847600,
	  -0.01867400,
	  -0.01826270,
	  -0.01859800,
	  -0.01838470,
	  -0.01853670,
	  -0.01872070,
	  -0.01849130,
	  -0.01841470,
	  -0.01864330,
	  -0.01833870,
	  -0.01827800,
	  -0.01838470,
	  -0.01873530,
	  -0.01891870,
	  -0.01846070,
	  -0.01865930,
	  -0.01865930,
	  -0.01885730,
	  -0.01839930,
	  -0.01869000,
	  -0.01878130,
	  -0.01876600,
	  -0.01856730,
	  -0.01865930,
	  -0.01861330,
	  -0.01838400,
	  -0.01872000,
	  -0.01844600,
	  -0.01850600,
	  -0.01867530,
	  -0.01888730,
	  -0.01858270,
	  -0.01867470,
	  -0.01875070,
	  -0.01861330,
	  -0.01865930,
	  -0.01868870,
	  -0.01884200,
	  -0.01872000,
	  -0.01890330,
	  -0.01885730,
	  -0.01881200,
	  -0.01885800,
	  -0.01882800,
	  -0.01853730,
	  -0.01844470,
	  -0.01856730,
	  -0.01888800,
	  -0.01846070,
	  -0.01875130,
	  -0.01888800,
	  -0.01902530,
	  -0.01881200,
	  -0.01855200,
	  -0.01829270,
	  -0.01879670,
	  -0.01872070,
	  -0.01865930,
	  -0.01869000,
	  -0.01872000,
	  -0.01856670,
	  -0.01879670,
	  -0.01846070,
	  -0.01849200,
	  -0.01872070,
	  -0.01856730,
	  -0.01856730,
	  -0.01865930,
	  -0.01868930,
	  -0.01867400,
	  -0.01868930,
	  -0.01884270,
	  -0.01862800,
	  -0.01882730,
	  -0.01856800,
	  -0.01839930,
	  -0.01864400,
	  -0.01884200,
	  -0.01867400,
	  -0.01840000,
	  -0.01861400,
	  -0.01858270,
	  -0.01861330,
	  -0.01856730,
	  -0.01841470,
	  -0.01858270,
	  -0.01869070,
	  -0.01875070,
	  -0.01862870,
	  -0.01885730,
	  -0.01879670,
	  -0.01867400,
	  -0.01867400,
	  -0.01899470,
	  -0.01868930,
	  -0.01891930,
	  -0.01859800,
	  -0.01881270,
	  -0.01885730,
	  -0.01879600,
	  -0.01878130,
	  -0.01855270,
	  -0.01876600,
	  -0.01849070,
	  -0.01872000,
	  -0.01852200,
	  -0.01873470,
	  -0.01878130,
	  -0.01865870,
	  -0.01875070,
	  -0.01861330,
	  -0.01907070,
	  -0.01872000,
	  -0.01873600,
	  -0.01873600,
	  -0.01849130,
	  -0.01862930,
	  -0.01855270,
	  -0.01865930,
	  -0.01875070,
	  -0.01884130,
	  -0.01876600,
	  -0.01872000,
	  -0.01885800,
	  -0.01868930,
	  -0.01868930,
	  -0.01856870,
	  -0.01849130,
	  -0.01888730,
	  -0.01884200,
	  -0.01852200,
	  -0.01862870,
	  -0.01887270,
	  -0.01890330,
	  -0.01862870,
	  -0.01862800,
	  -0.01853730,
	  -0.01875070,
	  -0.01871930,
	  -0.01844600,
	  -0.01864470,
	  -0.01862870,
	  -0.01867400,
	  -0.01882670,
	  -0.01875070,
	  -0.01873530,
	  -0.01907070,
	  -0.01841530,
	  -0.01835400,
	  -0.01867470,
	  -0.01861270,
	  -0.01887270,
	  -0.01865930,
	  -0.01864400,
	  -0.01856800,
	  -0.01847600,
	  -0.01872000,
	  -0.01836930,
	  -0.01900930,
	  -0.01887200,
	  -0.01864400,
	  -0.01861330,
	  -0.01836930,
	  -0.01873600,
	  -0.01868930,
	  -0.01852200,
	  -0.01867470,
	  -0.01881130,
	  -0.01873600,
	  -0.01870530,
	  -0.01852270,
	  -0.01888870,
	  -0.01888870,
	  -0.01850600,
	  -0.01885730,
	  -0.01861330,
	  -0.01869000,
	  -0.01850670,
	  -0.01847600,
	  -0.01853730};


	//clock_t t;
	//t = clock();
	// double t = micros();
	
	for (int i = 0; i < BUFFER_SIZE; ++i) {
		send_data(c[i]);
		printf("sent %f\n",(float)c[i]);
	}

	for (int j = 0; j < BUFFER_SIZE; ++j) {
		float d = recv_result();
		printf("received %f \n", d);
	}


	
	// t = micros() - t;
	// t = clock() - t; // Ticks taken to execute integrator
	// float micros = ((float) t) / TICKS_PER_SECOND * 1000000.0;
	// printf("Integrator Execution took %d ticks (%f us) \n", (int)t, micros);
	// printf("Integrator Execution took %f us \n", t);

	
	return NULL;
}
