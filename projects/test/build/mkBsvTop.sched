=== Generated schedule for mkBsvTop ===

Method schedule
---------------
Method: blue
Ready signal: True
Conflict-free: blue, green, red, serial_txd, serial_rx
 
Method: green
Ready signal: True
Conflict-free: blue, green, red, serial_txd, serial_rx
 
Method: red
Ready signal: True
Conflict-free: blue, green, red, serial_txd, serial_rx
 
Method: serial_txd
Ready signal: True
Conflict-free: blue, green, red, serial_txd, serial_rx
 
Method: serial_rx
Ready signal: True
Conflict-free: blue, green, red, serial_txd
Conflicts: serial_rx
 
Rule schedule
-------------
Rule: uart_outcntclk
Predicate: True
Blocking rules: relayUartOut
 
Rule: uart_insample
Predicate: (! (uart_samplecountdown == 16'd0)) ||
	   (! (uart_bleft == 4'd1)) || uart_outQ.i_notFull
Blocking rules: (none)
 
Rule: hwmain_ram_assertDefault
Predicate: True
Blocking rules: (none)
 
Rule: hwmain_ram_getRead
Predicate: hwmain_ram_outQ.i_notFull &&
	   (! ((hwmain_ram_inCnt - hwmain_ram_readCnt) == 2'd0))
Blocking rules: (none)
 
Rule: hwmain_ttt
Predicate: hwmain_ram_outQ.i_notEmpty && hwmain_relayUart.i_notFull
Blocking rules: relayUartIn
 
Rule: relayUartIn
Predicate: ((hwmain_ram_inCnt - hwmain_ram_outCnt) < 2'd2) &&
	   hwmain_relayUart.i_notFull && uart_outQ.i_notEmpty
Blocking rules: (none)
 
Rule: relayUartOut
Predicate: (uart_curoutoff == 5'd0) && hwmain_relayUart.i_notEmpty
Blocking rules: (none)
 
Logical execution order: blue,
			 green,
			 red,
			 serial_txd,
			 serial_rx,
			 relayUartOut,
			 uart_outcntclk,
			 uart_insample,
			 hwmain_ttt,
			 hwmain_ram_assertDefault,
			 hwmain_ram_getRead,
			 relayUartIn

========================================
