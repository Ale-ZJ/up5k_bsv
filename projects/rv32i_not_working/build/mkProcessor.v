//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue May 19 16:06:30 PDT 2020
//
//
// Ports:
// Name                         I/O  size props
// memReq                         O    68 reg
// RDY_memReq                     O     1 reg
// RDY_memResp                    O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// memResp_data                   I    32 reg
// EN_memResp                     I     1
// EN_memReq                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkProcessor(CLK,
		   RST_N,

		   EN_memReq,
		   memReq,
		   RDY_memReq,

		   memResp_data,
		   EN_memResp,
		   RDY_memResp);
  input  CLK;
  input  RST_N;

  // actionvalue method memReq
  input  EN_memReq;
  output [67 : 0] memReq;
  output RDY_memReq;

  // action method memResp
  input  [31 : 0] memResp_data;
  input  EN_memResp;
  output RDY_memResp;

  // signals for module outputs
  wire [67 : 0] memReq;
  wire RDY_memReq, RDY_memResp;

  // register cycles
  reg [31 : 0] cycles;
  wire [31 : 0] cycles_D_IN;
  wire cycles_EN;

  // register epoch
  reg epoch;
  wire epoch_D_IN, epoch_EN;

  // register instCnt
  reg [31 : 0] instCnt;
  wire [31 : 0] instCnt_D_IN;
  wire instCnt_EN;

  // register pc
  reg [31 : 0] pc;
  wire [31 : 0] pc_D_IN;
  wire pc_EN;

  // register rf_rfile_0
  reg [31 : 0] rf_rfile_0;
  wire [31 : 0] rf_rfile_0_D_IN;
  wire rf_rfile_0_EN;

  // register rf_rfile_1
  reg [31 : 0] rf_rfile_1;
  wire [31 : 0] rf_rfile_1_D_IN;
  wire rf_rfile_1_EN;

  // register rf_rfile_10
  reg [31 : 0] rf_rfile_10;
  wire [31 : 0] rf_rfile_10_D_IN;
  wire rf_rfile_10_EN;

  // register rf_rfile_11
  reg [31 : 0] rf_rfile_11;
  wire [31 : 0] rf_rfile_11_D_IN;
  wire rf_rfile_11_EN;

  // register rf_rfile_12
  reg [31 : 0] rf_rfile_12;
  wire [31 : 0] rf_rfile_12_D_IN;
  wire rf_rfile_12_EN;

  // register rf_rfile_13
  reg [31 : 0] rf_rfile_13;
  wire [31 : 0] rf_rfile_13_D_IN;
  wire rf_rfile_13_EN;

  // register rf_rfile_14
  reg [31 : 0] rf_rfile_14;
  wire [31 : 0] rf_rfile_14_D_IN;
  wire rf_rfile_14_EN;

  // register rf_rfile_15
  reg [31 : 0] rf_rfile_15;
  wire [31 : 0] rf_rfile_15_D_IN;
  wire rf_rfile_15_EN;

  // register rf_rfile_16
  reg [31 : 0] rf_rfile_16;
  wire [31 : 0] rf_rfile_16_D_IN;
  wire rf_rfile_16_EN;

  // register rf_rfile_17
  reg [31 : 0] rf_rfile_17;
  wire [31 : 0] rf_rfile_17_D_IN;
  wire rf_rfile_17_EN;

  // register rf_rfile_18
  reg [31 : 0] rf_rfile_18;
  wire [31 : 0] rf_rfile_18_D_IN;
  wire rf_rfile_18_EN;

  // register rf_rfile_19
  reg [31 : 0] rf_rfile_19;
  wire [31 : 0] rf_rfile_19_D_IN;
  wire rf_rfile_19_EN;

  // register rf_rfile_2
  reg [31 : 0] rf_rfile_2;
  wire [31 : 0] rf_rfile_2_D_IN;
  wire rf_rfile_2_EN;

  // register rf_rfile_20
  reg [31 : 0] rf_rfile_20;
  wire [31 : 0] rf_rfile_20_D_IN;
  wire rf_rfile_20_EN;

  // register rf_rfile_21
  reg [31 : 0] rf_rfile_21;
  wire [31 : 0] rf_rfile_21_D_IN;
  wire rf_rfile_21_EN;

  // register rf_rfile_22
  reg [31 : 0] rf_rfile_22;
  wire [31 : 0] rf_rfile_22_D_IN;
  wire rf_rfile_22_EN;

  // register rf_rfile_23
  reg [31 : 0] rf_rfile_23;
  wire [31 : 0] rf_rfile_23_D_IN;
  wire rf_rfile_23_EN;

  // register rf_rfile_24
  reg [31 : 0] rf_rfile_24;
  wire [31 : 0] rf_rfile_24_D_IN;
  wire rf_rfile_24_EN;

  // register rf_rfile_25
  reg [31 : 0] rf_rfile_25;
  wire [31 : 0] rf_rfile_25_D_IN;
  wire rf_rfile_25_EN;

  // register rf_rfile_26
  reg [31 : 0] rf_rfile_26;
  wire [31 : 0] rf_rfile_26_D_IN;
  wire rf_rfile_26_EN;

  // register rf_rfile_27
  reg [31 : 0] rf_rfile_27;
  wire [31 : 0] rf_rfile_27_D_IN;
  wire rf_rfile_27_EN;

  // register rf_rfile_28
  reg [31 : 0] rf_rfile_28;
  wire [31 : 0] rf_rfile_28_D_IN;
  wire rf_rfile_28_EN;

  // register rf_rfile_29
  reg [31 : 0] rf_rfile_29;
  wire [31 : 0] rf_rfile_29_D_IN;
  wire rf_rfile_29_EN;

  // register rf_rfile_3
  reg [31 : 0] rf_rfile_3;
  wire [31 : 0] rf_rfile_3_D_IN;
  wire rf_rfile_3_EN;

  // register rf_rfile_30
  reg [31 : 0] rf_rfile_30;
  wire [31 : 0] rf_rfile_30_D_IN;
  wire rf_rfile_30_EN;

  // register rf_rfile_31
  reg [31 : 0] rf_rfile_31;
  wire [31 : 0] rf_rfile_31_D_IN;
  wire rf_rfile_31_EN;

  // register rf_rfile_4
  reg [31 : 0] rf_rfile_4;
  wire [31 : 0] rf_rfile_4_D_IN;
  wire rf_rfile_4_EN;

  // register rf_rfile_5
  reg [31 : 0] rf_rfile_5;
  wire [31 : 0] rf_rfile_5_D_IN;
  wire rf_rfile_5_EN;

  // register rf_rfile_6
  reg [31 : 0] rf_rfile_6;
  wire [31 : 0] rf_rfile_6_D_IN;
  wire rf_rfile_6_EN;

  // register rf_rfile_7
  reg [31 : 0] rf_rfile_7;
  wire [31 : 0] rf_rfile_7_D_IN;
  wire rf_rfile_7_EN;

  // register rf_rfile_8
  reg [31 : 0] rf_rfile_8;
  wire [31 : 0] rf_rfile_8_D_IN;
  wire rf_rfile_8_EN;

  // register rf_rfile_9
  reg [31 : 0] rf_rfile_9;
  wire [31 : 0] rf_rfile_9_D_IN;
  wire rf_rfile_9_EN;

  // ports of submodule d2e
  wire [191 : 0] d2e_D_IN, d2e_D_OUT;
  wire d2e_CLR, d2e_DEQ, d2e_EMPTY_N, d2e_ENQ, d2e_FULL_N;

  // ports of submodule e2m
  wire [73 : 0] e2m_D_IN, e2m_D_OUT;
  wire e2m_CLR, e2m_DEQ, e2m_EMPTY_N, e2m_ENQ, e2m_FULL_N;

  // ports of submodule f2d
  wire [64 : 0] f2d_D_IN, f2d_D_OUT;
  wire f2d_CLR, f2d_DEQ, f2d_EMPTY_N, f2d_ENQ, f2d_FULL_N;

  // ports of submodule mem_dm_reqQ
  wire [67 : 0] mem_dm_reqQ_D_IN, mem_dm_reqQ_D_OUT;
  wire mem_dm_reqQ_CLR,
       mem_dm_reqQ_DEQ,
       mem_dm_reqQ_EMPTY_N,
       mem_dm_reqQ_ENQ,
       mem_dm_reqQ_FULL_N;

  // ports of submodule mem_dm_respQ
  wire [31 : 0] mem_dm_respQ_D_IN, mem_dm_respQ_D_OUT;
  wire mem_dm_respQ_CLR,
       mem_dm_respQ_DEQ,
       mem_dm_respQ_EMPTY_N,
       mem_dm_respQ_ENQ,
       mem_dm_respQ_FULL_N;

  // ports of submodule mem_im_reqQ
  wire [67 : 0] mem_im_reqQ_D_IN, mem_im_reqQ_D_OUT;
  wire mem_im_reqQ_CLR,
       mem_im_reqQ_DEQ,
       mem_im_reqQ_EMPTY_N,
       mem_im_reqQ_ENQ,
       mem_im_reqQ_FULL_N;

  // ports of submodule mem_im_respQ
  wire [31 : 0] mem_im_respQ_D_IN, mem_im_respQ_D_OUT;
  wire mem_im_respQ_CLR,
       mem_im_respQ_DEQ,
       mem_im_respQ_EMPTY_N,
       mem_im_respQ_ENQ,
       mem_im_respQ_FULL_N;

  // ports of submodule mem_reqQ
  wire [67 : 0] mem_reqQ_D_IN, mem_reqQ_D_OUT;
  wire mem_reqQ_CLR,
       mem_reqQ_DEQ,
       mem_reqQ_EMPTY_N,
       mem_reqQ_ENQ,
       mem_reqQ_FULL_N;

  // ports of submodule mem_reqTargetIsIMemQ
  wire mem_reqTargetIsIMemQ_CLR,
       mem_reqTargetIsIMemQ_DEQ,
       mem_reqTargetIsIMemQ_D_IN,
       mem_reqTargetIsIMemQ_D_OUT,
       mem_reqTargetIsIMemQ_EMPTY_N,
       mem_reqTargetIsIMemQ_ENQ,
       mem_reqTargetIsIMemQ_FULL_N;

  // ports of submodule mem_respQ
  wire [31 : 0] mem_respQ_D_IN, mem_respQ_D_OUT;
  wire mem_respQ_CLR,
       mem_respQ_DEQ,
       mem_respQ_EMPTY_N,
       mem_respQ_ENQ,
       mem_respQ_FULL_N;

  // ports of submodule nextpcQ
  wire [31 : 0] nextpcQ_D_IN, nextpcQ_D_OUT;
  wire nextpcQ_CLR, nextpcQ_DEQ, nextpcQ_EMPTY_N, nextpcQ_ENQ, nextpcQ_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_doExecute,
       WILL_FIRE_RL_doFetch,
       WILL_FIRE_RL_doWriteback,
       WILL_FIRE_RL_mem_relayReq,
       WILL_FIRE_RL_mem_relayResp;

  // remaining internal signals
  reg [31 : 0] CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_immI_ETC__q22,
	       dInst_imm__h5014,
	       data__h7823,
	       data__h7825,
	       eInst_addr__h7756,
	       eInst_data__h7755,
	       eInst_nextPC__h7757,
	       v__h9500,
	       x__h6539,
	       x__h7558;
  reg [4 : 0] CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q1,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q10,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q11,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q12,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q14,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q15,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q16,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q17,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q19,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q3,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q4,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q5,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q7,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q9,
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q13,
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q18,
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q6,
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q2,
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q8,
	      x__h5517,
	      x__h5582,
	      x__h5655;
  reg [3 : 0] CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q35,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q36,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q33,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_2_0b_ETC__q38,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_6_0b_ETC__q31,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_7_0b_ETC__q34,
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_1_0b_ETC__q32,
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q37,
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q41,
	      CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39,
	      IF_mem_im_respQ_first__6_BITS_6_TO_0_7_EQ_0b11_ETC___d312;
  reg [2 : 0] CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q25,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q26,
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q27,
	      IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d301;
  reg CASE_d2eD_OUT_BITS_126_TO_123_6_e2mFULL_N_AN_ETC__q30,
      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_0b1__ETC__q28,
      CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b10011_me_ETC__q29,
      IF_d2e_first__56_BITS_118_TO_116_67_EQ_0_68_TH_ETC___d388;
  wire [63 : 0] d2e_first__56_BITS_63_TO_32_69_MUL_d2e_first___ETC___d450,
		d2e_first__56_BITS_63_TO_32_69_MUL_d2e_first___ETC___d474;
  wire [54 : 0] IF_mem_im_respQ_first__6_BITS_6_TO_0_7_EQ_0b11_ETC___d315;
  wire [31 : 0] addr__h7979,
		d2eD_OUT_BITS_63_TO_32__q24,
		d2e_first__56_BITS_191_TO_160_64_PLUS_d2e_firs_ETC___d390,
		dw___1__h9550,
		dw___1__h9582,
		dw___1__h9619,
		dw___1__h9650,
		immB__h4404,
		immI__h4402,
		immJ__h4406,
		immS__h4403,
		immU__h4405,
		nextPc__h7742,
		nextPc__h7827,
		nextPc__h7963,
		pc_predicted__h4136,
		v__h4077,
		v__h9471;
  wire [20 : 0] x__h5957;
  wire [15 : 0] mem_dm_respQD_OUT_BITS_15_TO_0__q21;
  wire [12 : 0] x__h5815;
  wire [11 : 0] mem_im_respQD_OUT_BITS_31_TO_20__q20, x__h6075;
  wire [7 : 0] mem_dm_respQD_OUT_BITS_7_TO_0__q23;
  wire [3 : 0] DONTCARE_CONCAT_DONTCARE___d306,
	       IF_mem_im_respQ_first__6_BITS_31_TO_25_9_EQ_0b_ETC___d153;
  wire IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d304,
       d2e_first__56_BITS_159_TO_128_59_EQ_IF_d2e_fir_ETC___d403,
       d2e_first__56_BITS_159_TO_128_59_EQ_IF_d2e_fir_ETC___d416,
       d2e_first__56_BITS_63_TO_32_69_EQ_d2e_first__5_ETC___d371,
       d2e_first__56_BITS_63_TO_32_69_SLT_d2e_first___ETC___d375,
       d2e_first__56_BITS_63_TO_32_69_ULT_d2e_first___ETC___d377,
       d2e_first__56_BIT_127_57_EQ_epoch_6___d358,
       mem_respQ_i_notEmpty__3_AND_IF_mem_reqTargetIs_ETC___d38;

  // actionvalue method memReq
  assign memReq = mem_reqQ_D_OUT ;
  assign RDY_memReq = mem_reqQ_EMPTY_N ;

  // action method memResp
  assign RDY_memResp = mem_respQ_FULL_N ;

  // submodule d2e
  FIFO2 #(.width(32'd192), .guarded(32'd1)) d2e(.RST(RST_N),
						.CLK(CLK),
						.D_IN(d2e_D_IN),
						.ENQ(d2e_ENQ),
						.DEQ(d2e_DEQ),
						.CLR(d2e_CLR),
						.D_OUT(d2e_D_OUT),
						.FULL_N(d2e_FULL_N),
						.EMPTY_N(d2e_EMPTY_N));

  // submodule e2m
  FIFO2 #(.width(32'd74), .guarded(32'd1)) e2m(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(e2m_D_IN),
					       .ENQ(e2m_ENQ),
					       .DEQ(e2m_DEQ),
					       .CLR(e2m_CLR),
					       .D_OUT(e2m_D_OUT),
					       .FULL_N(e2m_FULL_N),
					       .EMPTY_N(e2m_EMPTY_N));

  // submodule f2d
  FIFO2 #(.width(32'd65), .guarded(32'd1)) f2d(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(f2d_D_IN),
					       .ENQ(f2d_ENQ),
					       .DEQ(f2d_DEQ),
					       .CLR(f2d_CLR),
					       .D_OUT(f2d_D_OUT),
					       .FULL_N(f2d_FULL_N),
					       .EMPTY_N(f2d_EMPTY_N));

  // submodule mem_dm_reqQ
  FIFO2 #(.width(32'd68), .guarded(32'd1)) mem_dm_reqQ(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(mem_dm_reqQ_D_IN),
						       .ENQ(mem_dm_reqQ_ENQ),
						       .DEQ(mem_dm_reqQ_DEQ),
						       .CLR(mem_dm_reqQ_CLR),
						       .D_OUT(mem_dm_reqQ_D_OUT),
						       .FULL_N(mem_dm_reqQ_FULL_N),
						       .EMPTY_N(mem_dm_reqQ_EMPTY_N));

  // submodule mem_dm_respQ
  FIFO2 #(.width(32'd32), .guarded(32'd1)) mem_dm_respQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(mem_dm_respQ_D_IN),
							.ENQ(mem_dm_respQ_ENQ),
							.DEQ(mem_dm_respQ_DEQ),
							.CLR(mem_dm_respQ_CLR),
							.D_OUT(mem_dm_respQ_D_OUT),
							.FULL_N(mem_dm_respQ_FULL_N),
							.EMPTY_N(mem_dm_respQ_EMPTY_N));

  // submodule mem_im_reqQ
  FIFO2 #(.width(32'd68), .guarded(32'd1)) mem_im_reqQ(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(mem_im_reqQ_D_IN),
						       .ENQ(mem_im_reqQ_ENQ),
						       .DEQ(mem_im_reqQ_DEQ),
						       .CLR(mem_im_reqQ_CLR),
						       .D_OUT(mem_im_reqQ_D_OUT),
						       .FULL_N(mem_im_reqQ_FULL_N),
						       .EMPTY_N(mem_im_reqQ_EMPTY_N));

  // submodule mem_im_respQ
  FIFO2 #(.width(32'd32), .guarded(32'd1)) mem_im_respQ(.RST(RST_N),
							.CLK(CLK),
							.D_IN(mem_im_respQ_D_IN),
							.ENQ(mem_im_respQ_ENQ),
							.DEQ(mem_im_respQ_DEQ),
							.CLR(mem_im_respQ_CLR),
							.D_OUT(mem_im_respQ_D_OUT),
							.FULL_N(mem_im_respQ_FULL_N),
							.EMPTY_N(mem_im_respQ_EMPTY_N));

  // submodule mem_reqQ
  FIFO2 #(.width(32'd68), .guarded(32'd1)) mem_reqQ(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(mem_reqQ_D_IN),
						    .ENQ(mem_reqQ_ENQ),
						    .DEQ(mem_reqQ_DEQ),
						    .CLR(mem_reqQ_CLR),
						    .D_OUT(mem_reqQ_D_OUT),
						    .FULL_N(mem_reqQ_FULL_N),
						    .EMPTY_N(mem_reqQ_EMPTY_N));

  // submodule mem_reqTargetIsIMemQ
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) mem_reqTargetIsIMemQ(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(mem_reqTargetIsIMemQ_D_IN),
						    .ENQ(mem_reqTargetIsIMemQ_ENQ),
						    .DEQ(mem_reqTargetIsIMemQ_DEQ),
						    .CLR(mem_reqTargetIsIMemQ_CLR),
						    .D_OUT(mem_reqTargetIsIMemQ_D_OUT),
						    .FULL_N(mem_reqTargetIsIMemQ_FULL_N),
						    .EMPTY_N(mem_reqTargetIsIMemQ_EMPTY_N));

  // submodule mem_respQ
  FIFO2 #(.width(32'd32), .guarded(32'd1)) mem_respQ(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(mem_respQ_D_IN),
						     .ENQ(mem_respQ_ENQ),
						     .DEQ(mem_respQ_DEQ),
						     .CLR(mem_respQ_CLR),
						     .D_OUT(mem_respQ_D_OUT),
						     .FULL_N(mem_respQ_FULL_N),
						     .EMPTY_N(mem_respQ_EMPTY_N));

  // submodule nextpcQ
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) nextpcQ(.RST(RST_N),
				       .CLK(CLK),
				       .D_IN(nextpcQ_D_IN),
				       .ENQ(nextpcQ_ENQ),
				       .DEQ(nextpcQ_DEQ),
				       .CLR(nextpcQ_CLR),
				       .D_OUT(nextpcQ_D_OUT),
				       .FULL_N(nextpcQ_FULL_N),
				       .EMPTY_N(nextpcQ_EMPTY_N));

  // rule RL_doWriteback
  assign WILL_FIRE_RL_doWriteback =
	     e2m_EMPTY_N && (!e2m_D_OUT[36] || mem_dm_respQ_EMPTY_N) ;

  // rule RL_mem_relayReq
  assign WILL_FIRE_RL_mem_relayReq =
	     mem_im_reqQ_EMPTY_N ?
	       mem_im_reqQ_EMPTY_N && mem_reqQ_FULL_N &&
	       (mem_im_reqQ_D_OUT[67] || mem_reqTargetIsIMemQ_FULL_N) :
	       !mem_dm_reqQ_EMPTY_N ||
	       mem_dm_reqQ_EMPTY_N && mem_reqQ_FULL_N &&
	       (mem_dm_reqQ_D_OUT[67] || mem_reqTargetIsIMemQ_FULL_N) ;

  // rule RL_doFetch
  assign WILL_FIRE_RL_doFetch = mem_im_reqQ_FULL_N && f2d_FULL_N ;

  // rule RL_doExecute
  assign WILL_FIRE_RL_doExecute =
	     d2e_EMPTY_N &&
	     (d2e_first__56_BIT_127_57_EQ_epoch_6___d358 ?
		d2e_first__56_BITS_159_TO_128_59_EQ_IF_d2e_fir_ETC___d416 :
		e2m_FULL_N) ;

  // rule RL_mem_relayResp
  assign WILL_FIRE_RL_mem_relayResp =
	     mem_reqTargetIsIMemQ_EMPTY_N &&
	     mem_respQ_i_notEmpty__3_AND_IF_mem_reqTargetIs_ETC___d38 ;

  // register cycles
  assign cycles_D_IN = cycles + 32'd1 ;
  assign cycles_EN = 1'd1 ;

  // register epoch
  assign epoch_D_IN = !epoch ;
  assign epoch_EN =
	     WILL_FIRE_RL_doExecute &&
	     d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	     !d2e_first__56_BITS_159_TO_128_59_EQ_IF_d2e_fir_ETC___d403 ;

  // register instCnt
  assign instCnt_D_IN = instCnt + 32'd1 ;
  assign instCnt_EN = WILL_FIRE_RL_doFetch ;

  // register pc
  assign pc_D_IN = pc_predicted__h4136 ;
  assign pc_EN = WILL_FIRE_RL_doFetch ;

  // register rf_rfile_0
  assign rf_rfile_0_D_IN = v__h9471 ;
  assign rf_rfile_0_EN = 1'b0 ;

  // register rf_rfile_1
  assign rf_rfile_1_D_IN = v__h9471 ;
  assign rf_rfile_1_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd1 ;

  // register rf_rfile_10
  assign rf_rfile_10_D_IN = v__h9471 ;
  assign rf_rfile_10_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd10 ;

  // register rf_rfile_11
  assign rf_rfile_11_D_IN = v__h9471 ;
  assign rf_rfile_11_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd11 ;

  // register rf_rfile_12
  assign rf_rfile_12_D_IN = v__h9471 ;
  assign rf_rfile_12_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd12 ;

  // register rf_rfile_13
  assign rf_rfile_13_D_IN = v__h9471 ;
  assign rf_rfile_13_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd13 ;

  // register rf_rfile_14
  assign rf_rfile_14_D_IN = v__h9471 ;
  assign rf_rfile_14_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd14 ;

  // register rf_rfile_15
  assign rf_rfile_15_D_IN = v__h9471 ;
  assign rf_rfile_15_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd15 ;

  // register rf_rfile_16
  assign rf_rfile_16_D_IN = v__h9471 ;
  assign rf_rfile_16_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd16 ;

  // register rf_rfile_17
  assign rf_rfile_17_D_IN = v__h9471 ;
  assign rf_rfile_17_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd17 ;

  // register rf_rfile_18
  assign rf_rfile_18_D_IN = v__h9471 ;
  assign rf_rfile_18_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd18 ;

  // register rf_rfile_19
  assign rf_rfile_19_D_IN = v__h9471 ;
  assign rf_rfile_19_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd19 ;

  // register rf_rfile_2
  assign rf_rfile_2_D_IN = v__h9471 ;
  assign rf_rfile_2_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd2 ;

  // register rf_rfile_20
  assign rf_rfile_20_D_IN = v__h9471 ;
  assign rf_rfile_20_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd20 ;

  // register rf_rfile_21
  assign rf_rfile_21_D_IN = v__h9471 ;
  assign rf_rfile_21_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd21 ;

  // register rf_rfile_22
  assign rf_rfile_22_D_IN = v__h9471 ;
  assign rf_rfile_22_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd22 ;

  // register rf_rfile_23
  assign rf_rfile_23_D_IN = v__h9471 ;
  assign rf_rfile_23_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd23 ;

  // register rf_rfile_24
  assign rf_rfile_24_D_IN = v__h9471 ;
  assign rf_rfile_24_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd24 ;

  // register rf_rfile_25
  assign rf_rfile_25_D_IN = v__h9471 ;
  assign rf_rfile_25_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd25 ;

  // register rf_rfile_26
  assign rf_rfile_26_D_IN = v__h9471 ;
  assign rf_rfile_26_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd26 ;

  // register rf_rfile_27
  assign rf_rfile_27_D_IN = v__h9471 ;
  assign rf_rfile_27_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd27 ;

  // register rf_rfile_28
  assign rf_rfile_28_D_IN = v__h9471 ;
  assign rf_rfile_28_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd28 ;

  // register rf_rfile_29
  assign rf_rfile_29_D_IN = v__h9471 ;
  assign rf_rfile_29_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd29 ;

  // register rf_rfile_3
  assign rf_rfile_3_D_IN = v__h9471 ;
  assign rf_rfile_3_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd3 ;

  // register rf_rfile_30
  assign rf_rfile_30_D_IN = v__h9471 ;
  assign rf_rfile_30_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd30 ;

  // register rf_rfile_31
  assign rf_rfile_31_D_IN = v__h9471 ;
  assign rf_rfile_31_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd31 ;

  // register rf_rfile_4
  assign rf_rfile_4_D_IN = v__h9471 ;
  assign rf_rfile_4_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd4 ;

  // register rf_rfile_5
  assign rf_rfile_5_D_IN = v__h9471 ;
  assign rf_rfile_5_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd5 ;

  // register rf_rfile_6
  assign rf_rfile_6_D_IN = v__h9471 ;
  assign rf_rfile_6_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd6 ;

  // register rf_rfile_7
  assign rf_rfile_7_D_IN = v__h9471 ;
  assign rf_rfile_7_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd7 ;

  // register rf_rfile_8
  assign rf_rfile_8_D_IN = v__h9471 ;
  assign rf_rfile_8_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd8 ;

  // register rf_rfile_9
  assign rf_rfile_9_D_IN = v__h9471 ;
  assign rf_rfile_9_EN =
	     WILL_FIRE_RL_doWriteback && e2m_D_OUT[41:37] == 5'd9 ;

  // submodule d2e
  assign d2e_D_IN =
	     { f2d_D_OUT,
	       CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39,
	       (mem_im_respQ_D_OUT[6:0] == 7'b0110011) ?
		 CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q41 :
		 CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42,
	       IF_mem_im_respQ_first__6_BITS_6_TO_0_7_EQ_0b11_ETC___d315,
	       x__h6539,
	       x__h7558 } ;
  assign d2e_ENQ = mem_im_respQ_EMPTY_N && d2e_FULL_N && f2d_EMPTY_N ;
  assign d2e_DEQ = WILL_FIRE_RL_doExecute ;
  assign d2e_CLR = 1'b0 ;

  // submodule e2m
  assign e2m_D_IN =
	     d2e_first__56_BIT_127_57_EQ_epoch_6___d358 ?
	       { d2e_D_OUT[191:160],
		 d2e_D_OUT[114:110],
		 (d2e_D_OUT[126:123] == 4'd6) ?
		   { 33'h100000000, d2e_D_OUT[64], d2e_D_OUT[67:65] } :
		   { 1'd0, eInst_data__h7755, 4'hA } } :
	       { d2e_D_OUT[191:160], 42'h00AAAAAAAAA } ;
  assign e2m_ENQ =
	     WILL_FIRE_RL_doExecute &&
	     (d2e_D_OUT[126:123] == 4'd6 ||
	      d2e_D_OUT[126:123] != 4'd7 && d2e_D_OUT[115] ||
	      !d2e_first__56_BIT_127_57_EQ_epoch_6___d358) ;
  assign e2m_DEQ = WILL_FIRE_RL_doWriteback ;
  assign e2m_CLR = 1'b0 ;

  // submodule f2d
  assign f2d_D_IN = { v__h4077, pc_predicted__h4136, epoch } ;
  assign f2d_ENQ = WILL_FIRE_RL_doFetch ;
  assign f2d_DEQ = mem_im_respQ_EMPTY_N && d2e_FULL_N && f2d_EMPTY_N ;
  assign f2d_CLR = 1'b0 ;

  // submodule mem_dm_reqQ
  assign mem_dm_reqQ_D_IN =
	     { d2e_D_OUT[126:123] != 4'd6,
	       eInst_addr__h7756,
	       (d2e_D_OUT[126:123] == 4'd6) ?
		 d2e_D_OUT[99:65] :
		 { eInst_data__h7755, d2e_D_OUT[67:65] } } ;
  assign mem_dm_reqQ_ENQ =
	     WILL_FIRE_RL_doExecute &&
	     d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	     (d2e_D_OUT[126:123] == 4'd6 || d2e_D_OUT[126:123] == 4'd7) ;
  assign mem_dm_reqQ_DEQ =
	     WILL_FIRE_RL_mem_relayReq && !mem_im_reqQ_EMPTY_N &&
	     mem_dm_reqQ_EMPTY_N ;
  assign mem_dm_reqQ_CLR = 1'b0 ;

  // submodule mem_dm_respQ
  assign mem_dm_respQ_D_IN = mem_respQ_D_OUT ;
  assign mem_dm_respQ_ENQ =
	     WILL_FIRE_RL_mem_relayResp && !mem_reqTargetIsIMemQ_D_OUT ;
  assign mem_dm_respQ_DEQ = WILL_FIRE_RL_doWriteback && e2m_D_OUT[36] ;
  assign mem_dm_respQ_CLR = 1'b0 ;

  // submodule mem_im_reqQ
  assign mem_im_reqQ_D_IN = { 1'd0, v__h4077, 35'h555555554 } ;
  assign mem_im_reqQ_ENQ = WILL_FIRE_RL_doFetch ;
  assign mem_im_reqQ_DEQ = WILL_FIRE_RL_mem_relayReq && mem_im_reqQ_EMPTY_N ;
  assign mem_im_reqQ_CLR = 1'b0 ;

  // submodule mem_im_respQ
  assign mem_im_respQ_D_IN = mem_respQ_D_OUT ;
  assign mem_im_respQ_ENQ =
	     WILL_FIRE_RL_mem_relayResp && mem_reqTargetIsIMemQ_D_OUT ;
  assign mem_im_respQ_DEQ =
	     mem_im_respQ_EMPTY_N && d2e_FULL_N && f2d_EMPTY_N ;
  assign mem_im_respQ_CLR = 1'b0 ;

  // submodule mem_reqQ
  assign mem_reqQ_D_IN =
	     mem_im_reqQ_EMPTY_N ? mem_im_reqQ_D_OUT : mem_dm_reqQ_D_OUT ;
  assign mem_reqQ_ENQ =
	     WILL_FIRE_RL_mem_relayReq &&
	     (mem_im_reqQ_EMPTY_N || mem_dm_reqQ_EMPTY_N) ;
  assign mem_reqQ_DEQ = EN_memReq ;
  assign mem_reqQ_CLR = 1'b0 ;

  // submodule mem_reqTargetIsIMemQ
  assign mem_reqTargetIsIMemQ_D_IN = mem_im_reqQ_EMPTY_N ;
  assign mem_reqTargetIsIMemQ_ENQ =
	     WILL_FIRE_RL_mem_relayReq &&
	     (mem_im_reqQ_EMPTY_N && !mem_im_reqQ_D_OUT[67] ||
	      !mem_im_reqQ_EMPTY_N && mem_dm_reqQ_EMPTY_N &&
	      !mem_dm_reqQ_D_OUT[67]) ;
  assign mem_reqTargetIsIMemQ_DEQ = WILL_FIRE_RL_mem_relayResp ;
  assign mem_reqTargetIsIMemQ_CLR = 1'b0 ;

  // submodule mem_respQ
  assign mem_respQ_D_IN = memResp_data ;
  assign mem_respQ_ENQ = EN_memResp ;
  assign mem_respQ_DEQ = WILL_FIRE_RL_mem_relayResp ;
  assign mem_respQ_CLR = 1'b0 ;

  // submodule nextpcQ
  assign nextpcQ_D_IN = eInst_nextPC__h7757 ;
  assign nextpcQ_ENQ =
	     WILL_FIRE_RL_doExecute &&
	     d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	     !d2e_first__56_BITS_159_TO_128_59_EQ_IF_d2e_fir_ETC___d403 ;
  assign nextpcQ_DEQ = WILL_FIRE_RL_doFetch && nextpcQ_EMPTY_N ;
  assign nextpcQ_CLR = 1'b0 ;

  // remaining internal signals
  assign DONTCARE_CONCAT_DONTCARE___d306 =
	     { (mem_im_respQ_D_OUT[6:0] == 7'b0000011) ?
		 CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q25 :
		 IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d301,
	       IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d304 } ;
  assign IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d304 =
	     mem_im_respQ_D_OUT[14:12] == 3'b001 ||
	     mem_im_respQ_D_OUT[14:12] == 3'b0 ;
  assign IF_mem_im_respQ_first__6_BITS_31_TO_25_9_EQ_0b_ETC___d153 =
	     (mem_im_respQ_D_OUT[31:25] == 7'b0) ? 4'd8 : 4'd9 ;
  assign IF_mem_im_respQ_first__6_BITS_6_TO_0_7_EQ_0b11_ETC___d315 =
	     { CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q27,
	       CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b10011_me_ETC__q29,
	       x__h5517,
	       x__h5582,
	       x__h5655,
	       dInst_imm__h5014,
	       IF_mem_im_respQ_first__6_BITS_6_TO_0_7_EQ_0b11_ETC___d312 } ;
  assign addr__h7979 = d2e_D_OUT[63:32] + d2e_D_OUT[99:68] ;
  assign d2eD_OUT_BITS_63_TO_32__q24 = d2e_D_OUT[63:32] ;
  assign d2e_first__56_BITS_159_TO_128_59_EQ_IF_d2e_fir_ETC___d403 =
	     d2e_D_OUT[159:128] == eInst_nextPC__h7757 ;
  assign d2e_first__56_BITS_159_TO_128_59_EQ_IF_d2e_fir_ETC___d416 =
	     (d2e_first__56_BITS_159_TO_128_59_EQ_IF_d2e_fir_ETC___d403 ||
	      nextpcQ_FULL_N) &&
	     CASE_d2eD_OUT_BITS_126_TO_123_6_e2mFULL_N_AN_ETC__q30 ;
  assign d2e_first__56_BITS_191_TO_160_64_PLUS_d2e_firs_ETC___d390 =
	     d2e_D_OUT[191:160] + d2e_D_OUT[99:68] ;
  assign d2e_first__56_BITS_63_TO_32_69_EQ_d2e_first__5_ETC___d371 =
	     d2e_D_OUT[63:32] == d2e_D_OUT[31:0] ;
  assign d2e_first__56_BITS_63_TO_32_69_MUL_d2e_first___ETC___d450 =
	     d2e_D_OUT[63:32] * d2e_D_OUT[31:0] ;
  assign d2e_first__56_BITS_63_TO_32_69_MUL_d2e_first___ETC___d474 =
	     d2e_D_OUT[63:32] * d2e_D_OUT[99:68] ;
  assign d2e_first__56_BITS_63_TO_32_69_SLT_d2e_first___ETC___d375 =
	     (d2e_D_OUT[63:32] ^ 32'h80000000) <
	     (d2e_D_OUT[31:0] ^ 32'h80000000) ;
  assign d2e_first__56_BITS_63_TO_32_69_ULT_d2e_first___ETC___d377 =
	     d2e_D_OUT[63:32] < d2e_D_OUT[31:0] ;
  assign d2e_first__56_BIT_127_57_EQ_epoch_6___d358 =
	     d2e_D_OUT[127] == epoch ;
  assign dw___1__h9550 =
	     { {24{mem_dm_respQD_OUT_BITS_7_TO_0__q23[7]}},
	       mem_dm_respQD_OUT_BITS_7_TO_0__q23 } ;
  assign dw___1__h9582 = { 24'd0, mem_dm_respQ_D_OUT[7:0] } ;
  assign dw___1__h9619 =
	     { {16{mem_dm_respQD_OUT_BITS_15_TO_0__q21[15]}},
	       mem_dm_respQD_OUT_BITS_15_TO_0__q21 } ;
  assign dw___1__h9650 = { 16'd0, mem_dm_respQ_D_OUT[15:0] } ;
  assign immB__h4404 = { {19{x__h5815[12]}}, x__h5815 } ;
  assign immI__h4402 =
	     { {20{mem_im_respQD_OUT_BITS_31_TO_20__q20[11]}},
	       mem_im_respQD_OUT_BITS_31_TO_20__q20 } ;
  assign immJ__h4406 = { {11{x__h5957[20]}}, x__h5957 } ;
  assign immS__h4403 = { {20{x__h6075[11]}}, x__h6075 } ;
  assign immU__h4405 = { mem_im_respQ_D_OUT[31:12], 12'b0 } ;
  assign mem_dm_respQD_OUT_BITS_15_TO_0__q21 = mem_dm_respQ_D_OUT[15:0] ;
  assign mem_dm_respQD_OUT_BITS_7_TO_0__q23 = mem_dm_respQ_D_OUT[7:0] ;
  assign mem_im_respQD_OUT_BITS_31_TO_20__q20 = mem_im_respQ_D_OUT[31:20] ;
  assign mem_respQ_i_notEmpty__3_AND_IF_mem_reqTargetIs_ETC___d38 =
	     mem_respQ_EMPTY_N &&
	     (mem_reqTargetIsIMemQ_D_OUT ?
		mem_im_respQ_FULL_N :
		mem_dm_respQ_FULL_N) ;
  assign nextPc__h7742 = d2e_D_OUT[191:160] + 32'd4 ;
  assign nextPc__h7827 =
	     IF_d2e_first__56_BITS_118_TO_116_67_EQ_0_68_TH_ETC___d388 ?
	       d2e_first__56_BITS_191_TO_160_64_PLUS_d2e_firs_ETC___d390 :
	       nextPc__h7742 ;
  assign nextPc__h7963 = { addr__h7979[31:1], 1'd0 } ;
  assign pc_predicted__h4136 = v__h4077 + 32'd4 ;
  assign v__h4077 = nextpcQ_EMPTY_N ? nextpcQ_D_OUT : pc ;
  assign v__h9471 = e2m_D_OUT[36] ? v__h9500 : e2m_D_OUT[35:4] ;
  assign x__h5815 =
	     { mem_im_respQ_D_OUT[31],
	       mem_im_respQ_D_OUT[7],
	       mem_im_respQ_D_OUT[30:25],
	       mem_im_respQ_D_OUT[11:8],
	       1'b0 } ;
  assign x__h5957 =
	     { mem_im_respQ_D_OUT[31],
	       mem_im_respQ_D_OUT[19:12],
	       mem_im_respQ_D_OUT[20],
	       mem_im_respQ_D_OUT[30:21],
	       1'b0 } ;
  assign x__h6075 = { mem_im_respQ_D_OUT[31:25], mem_im_respQ_D_OUT[11:7] } ;
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b100, 3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q1 =
	      mem_im_respQ_D_OUT[11:7];
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q1 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[31:25])
      7'b0, 7'b0100000:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q2 =
	      mem_im_respQ_D_OUT[11:7];
      default: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q2 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q2)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b010, 3'b011, 3'b100, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q3 =
	      mem_im_respQ_D_OUT[11:7];
      3'b001:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q3 =
	      (mem_im_respQ_D_OUT[31:25] == 7'b0) ?
		mem_im_respQ_D_OUT[11:7] :
		5'd0;
      3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q3 =
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q2;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q4 =
	      mem_im_respQ_D_OUT[11:7];
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q5 =
	      mem_im_respQ_D_OUT[11:7];
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q5 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q4 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q5)
  begin
    case (mem_im_respQ_D_OUT[31:25])
      7'b0:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q6 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q4;
      7'b0000001:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q6 =
	      (mem_im_respQ_D_OUT[14:12] == 3'b0) ?
		mem_im_respQ_D_OUT[11:7] :
		5'd0;
      7'b0100000:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q6 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q5;
      default: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q6 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q1 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q3 or
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q6)
  begin
    case (mem_im_respQ_D_OUT[6:0])
      7'b0000011:
	  x__h5517 = CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q1;
      7'b0010011:
	  x__h5517 = CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q3;
      7'b0010111, 7'b0110111, 7'b1100111, 7'b1101111:
	  x__h5517 = mem_im_respQ_D_OUT[11:7];
      7'b0100011, 7'b1100011: x__h5517 = 5'd0;
      7'b0110011:
	  x__h5517 = CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q6;
      default: x__h5517 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b100, 3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q7 =
	      mem_im_respQ_D_OUT[19:15];
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q7 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[31:25])
      7'b0, 7'b0100000:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q8 =
	      mem_im_respQ_D_OUT[19:15];
      default: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q8 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q8)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b010, 3'b011, 3'b100, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q9 =
	      mem_im_respQ_D_OUT[19:15];
      3'b001:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q9 =
	      (mem_im_respQ_D_OUT[31:25] == 7'b0) ?
		mem_im_respQ_D_OUT[19:15] :
		5'd0;
      3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q9 =
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_mem__ETC__q8;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q10 =
	      mem_im_respQ_D_OUT[19:15];
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q10 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q11 =
	      mem_im_respQ_D_OUT[19:15];
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q12 =
	      mem_im_respQ_D_OUT[19:15];
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q12 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q11 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q12)
  begin
    case (mem_im_respQ_D_OUT[31:25])
      7'b0:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q13 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q11;
      7'b0000001:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q13 =
	      (mem_im_respQ_D_OUT[14:12] == 3'b0) ?
		mem_im_respQ_D_OUT[19:15] :
		5'd0;
      7'b0100000:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q13 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q12;
      default: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q13 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q14 =
	      mem_im_respQ_D_OUT[19:15];
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q14 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q7 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q9 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q10 or
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q13 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q14)
  begin
    case (mem_im_respQ_D_OUT[6:0])
      7'b0000011:
	  x__h5582 = CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q7;
      7'b0010011:
	  x__h5582 = CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q9;
      7'b0100011:
	  x__h5582 = CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q10;
      7'b0110011:
	  x__h5582 = CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q13;
      7'b0110111, 7'b1101111: x__h5582 = 5'd0;
      7'b1100011:
	  x__h5582 = CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q14;
      7'b1100111: x__h5582 = mem_im_respQ_D_OUT[19:15];
      default: x__h5582 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q15 =
	      mem_im_respQ_D_OUT[24:20];
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q15 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q16 =
	      mem_im_respQ_D_OUT[24:20];
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q17 =
	      mem_im_respQ_D_OUT[24:20];
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q17 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q16 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q17)
  begin
    case (mem_im_respQ_D_OUT[31:25])
      7'b0:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q18 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q16;
      7'b0000001:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q18 =
	      (mem_im_respQ_D_OUT[14:12] == 3'b0) ?
		mem_im_respQ_D_OUT[24:20] :
		5'd0;
      7'b0100000:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q18 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q17;
      default: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q18 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q19 =
	      mem_im_respQ_D_OUT[24:20];
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q19 = 5'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q15 or
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q18 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q19)
  begin
    case (mem_im_respQ_D_OUT[6:0])
      7'b0000011, 7'b0010011, 7'b0110111, 7'b1100111, 7'b1101111:
	  x__h5655 = 5'd0;
      7'b0100011:
	  x__h5655 = CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q15;
      7'b0110011:
	  x__h5655 = CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q18;
      7'b1100011:
	  x__h5655 = CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q19;
      default: x__h5655 = 5'd0;
    endcase
  end
  always@(x__h5582 or
	  rf_rfile_0 or
	  rf_rfile_1 or
	  rf_rfile_2 or
	  rf_rfile_3 or
	  rf_rfile_4 or
	  rf_rfile_5 or
	  rf_rfile_6 or
	  rf_rfile_7 or
	  rf_rfile_8 or
	  rf_rfile_9 or
	  rf_rfile_10 or
	  rf_rfile_11 or
	  rf_rfile_12 or
	  rf_rfile_13 or
	  rf_rfile_14 or
	  rf_rfile_15 or
	  rf_rfile_16 or
	  rf_rfile_17 or
	  rf_rfile_18 or
	  rf_rfile_19 or
	  rf_rfile_20 or
	  rf_rfile_21 or
	  rf_rfile_22 or
	  rf_rfile_23 or
	  rf_rfile_24 or
	  rf_rfile_25 or
	  rf_rfile_26 or
	  rf_rfile_27 or
	  rf_rfile_28 or rf_rfile_29 or rf_rfile_30 or rf_rfile_31)
  begin
    case (x__h5582)
      5'd0: x__h6539 = rf_rfile_0;
      5'd1: x__h6539 = rf_rfile_1;
      5'd2: x__h6539 = rf_rfile_2;
      5'd3: x__h6539 = rf_rfile_3;
      5'd4: x__h6539 = rf_rfile_4;
      5'd5: x__h6539 = rf_rfile_5;
      5'd6: x__h6539 = rf_rfile_6;
      5'd7: x__h6539 = rf_rfile_7;
      5'd8: x__h6539 = rf_rfile_8;
      5'd9: x__h6539 = rf_rfile_9;
      5'd10: x__h6539 = rf_rfile_10;
      5'd11: x__h6539 = rf_rfile_11;
      5'd12: x__h6539 = rf_rfile_12;
      5'd13: x__h6539 = rf_rfile_13;
      5'd14: x__h6539 = rf_rfile_14;
      5'd15: x__h6539 = rf_rfile_15;
      5'd16: x__h6539 = rf_rfile_16;
      5'd17: x__h6539 = rf_rfile_17;
      5'd18: x__h6539 = rf_rfile_18;
      5'd19: x__h6539 = rf_rfile_19;
      5'd20: x__h6539 = rf_rfile_20;
      5'd21: x__h6539 = rf_rfile_21;
      5'd22: x__h6539 = rf_rfile_22;
      5'd23: x__h6539 = rf_rfile_23;
      5'd24: x__h6539 = rf_rfile_24;
      5'd25: x__h6539 = rf_rfile_25;
      5'd26: x__h6539 = rf_rfile_26;
      5'd27: x__h6539 = rf_rfile_27;
      5'd28: x__h6539 = rf_rfile_28;
      5'd29: x__h6539 = rf_rfile_29;
      5'd30: x__h6539 = rf_rfile_30;
      5'd31: x__h6539 = rf_rfile_31;
    endcase
  end
  always@(x__h5655 or
	  rf_rfile_0 or
	  rf_rfile_1 or
	  rf_rfile_2 or
	  rf_rfile_3 or
	  rf_rfile_4 or
	  rf_rfile_5 or
	  rf_rfile_6 or
	  rf_rfile_7 or
	  rf_rfile_8 or
	  rf_rfile_9 or
	  rf_rfile_10 or
	  rf_rfile_11 or
	  rf_rfile_12 or
	  rf_rfile_13 or
	  rf_rfile_14 or
	  rf_rfile_15 or
	  rf_rfile_16 or
	  rf_rfile_17 or
	  rf_rfile_18 or
	  rf_rfile_19 or
	  rf_rfile_20 or
	  rf_rfile_21 or
	  rf_rfile_22 or
	  rf_rfile_23 or
	  rf_rfile_24 or
	  rf_rfile_25 or
	  rf_rfile_26 or
	  rf_rfile_27 or
	  rf_rfile_28 or rf_rfile_29 or rf_rfile_30 or rf_rfile_31)
  begin
    case (x__h5655)
      5'd0: x__h7558 = rf_rfile_0;
      5'd1: x__h7558 = rf_rfile_1;
      5'd2: x__h7558 = rf_rfile_2;
      5'd3: x__h7558 = rf_rfile_3;
      5'd4: x__h7558 = rf_rfile_4;
      5'd5: x__h7558 = rf_rfile_5;
      5'd6: x__h7558 = rf_rfile_6;
      5'd7: x__h7558 = rf_rfile_7;
      5'd8: x__h7558 = rf_rfile_8;
      5'd9: x__h7558 = rf_rfile_9;
      5'd10: x__h7558 = rf_rfile_10;
      5'd11: x__h7558 = rf_rfile_11;
      5'd12: x__h7558 = rf_rfile_12;
      5'd13: x__h7558 = rf_rfile_13;
      5'd14: x__h7558 = rf_rfile_14;
      5'd15: x__h7558 = rf_rfile_15;
      5'd16: x__h7558 = rf_rfile_16;
      5'd17: x__h7558 = rf_rfile_17;
      5'd18: x__h7558 = rf_rfile_18;
      5'd19: x__h7558 = rf_rfile_19;
      5'd20: x__h7558 = rf_rfile_20;
      5'd21: x__h7558 = rf_rfile_21;
      5'd22: x__h7558 = rf_rfile_22;
      5'd23: x__h7558 = rf_rfile_23;
      5'd24: x__h7558 = rf_rfile_24;
      5'd25: x__h7558 = rf_rfile_25;
      5'd26: x__h7558 = rf_rfile_26;
      5'd27: x__h7558 = rf_rfile_27;
      5'd28: x__h7558 = rf_rfile_28;
      5'd29: x__h7558 = rf_rfile_29;
      5'd30: x__h7558 = rf_rfile_30;
      5'd31: x__h7558 = rf_rfile_31;
    endcase
  end
  always@(mem_im_respQ_D_OUT or immI__h4402)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'd5, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_immI_ETC__q22 =
	      immI__h4402;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  immI__h4402 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_immI_ETC__q22 or
	  immU__h4405 or immS__h4403 or immB__h4404 or immJ__h4406)
  begin
    case (mem_im_respQ_D_OUT[6:0])
      7'b0000011, 7'b1100111: dInst_imm__h5014 = immI__h4402;
      7'b0010011:
	  dInst_imm__h5014 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_immI_ETC__q22;
      7'b0010111, 7'b0110111: dInst_imm__h5014 = immU__h4405;
      7'b0100011: dInst_imm__h5014 = immS__h4403;
      7'b1100011: dInst_imm__h5014 = immB__h4404;
      7'b1101111: dInst_imm__h5014 = immJ__h4406;
      default: dInst_imm__h5014 = { mem_im_respQ_D_OUT[31:12], 12'b0 };
    endcase
  end
  always@(d2e_D_OUT or addr__h7979)
  begin
    case (d2e_D_OUT[126:123])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5: eInst_addr__h7756 = 32'd0;
      4'd6, 4'd7: eInst_addr__h7756 = addr__h7979;
      default: eInst_addr__h7756 = 32'd0;
    endcase
  end
  always@(e2m_D_OUT or
	  mem_dm_respQ_D_OUT or
	  dw___1__h9550 or dw___1__h9582 or dw___1__h9619 or dw___1__h9650)
  begin
    case (e2m_D_OUT[2:0])
      3'd1: v__h9500 = e2m_D_OUT[3] ? dw___1__h9550 : dw___1__h9582;
      3'd2: v__h9500 = e2m_D_OUT[3] ? dw___1__h9619 : dw___1__h9650;
      default: v__h9500 = mem_dm_respQ_D_OUT;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b001:
	  IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d301 = 3'd2;
      3'b010:
	  IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d301 = 3'd4;
      default: IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d301 =
		   3'd1;
    endcase
  end
  always@(d2e_D_OUT or
	  d2e_first__56_BITS_63_TO_32_69_EQ_d2e_first__5_ETC___d371 or
	  d2e_first__56_BITS_63_TO_32_69_SLT_d2e_first___ETC___d375 or
	  d2e_first__56_BITS_63_TO_32_69_ULT_d2e_first___ETC___d377)
  begin
    case (d2e_D_OUT[118:116])
      3'd0:
	  IF_d2e_first__56_BITS_118_TO_116_67_EQ_0_68_TH_ETC___d388 =
	      d2e_first__56_BITS_63_TO_32_69_EQ_d2e_first__5_ETC___d371;
      3'd1:
	  IF_d2e_first__56_BITS_118_TO_116_67_EQ_0_68_TH_ETC___d388 =
	      !d2e_first__56_BITS_63_TO_32_69_EQ_d2e_first__5_ETC___d371;
      3'd2:
	  IF_d2e_first__56_BITS_118_TO_116_67_EQ_0_68_TH_ETC___d388 =
	      d2e_first__56_BITS_63_TO_32_69_SLT_d2e_first___ETC___d375;
      3'd3:
	  IF_d2e_first__56_BITS_118_TO_116_67_EQ_0_68_TH_ETC___d388 =
	      d2e_first__56_BITS_63_TO_32_69_ULT_d2e_first___ETC___d377;
      3'd4:
	  IF_d2e_first__56_BITS_118_TO_116_67_EQ_0_68_TH_ETC___d388 =
	      !d2e_first__56_BITS_63_TO_32_69_SLT_d2e_first___ETC___d375;
      3'd5:
	  IF_d2e_first__56_BITS_118_TO_116_67_EQ_0_68_TH_ETC___d388 =
	      !d2e_first__56_BITS_63_TO_32_69_ULT_d2e_first___ETC___d377;
      default: IF_d2e_first__56_BITS_118_TO_116_67_EQ_0_68_TH_ETC___d388 =
		   d2e_D_OUT[118:116] == 3'd6;
    endcase
  end
  always@(d2e_D_OUT or
	  nextPc__h7742 or
	  nextPc__h7827 or
	  d2e_first__56_BITS_191_TO_160_64_PLUS_d2e_firs_ETC___d390 or
	  nextPc__h7963)
  begin
    case (d2e_D_OUT[126:123])
      4'd0, 4'd1, 4'd3: eInst_nextPC__h7757 = nextPc__h7742;
      4'd2: eInst_nextPC__h7757 = nextPc__h7827;
      4'd4:
	  eInst_nextPC__h7757 =
	      d2e_first__56_BITS_191_TO_160_64_PLUS_d2e_firs_ETC___d390;
      4'd5: eInst_nextPC__h7757 = nextPc__h7963;
      default: eInst_nextPC__h7757 = nextPc__h7742;
    endcase
  end
  always@(d2e_D_OUT or
	  d2e_first__56_BITS_63_TO_32_69_MUL_d2e_first___ETC___d474 or
	  addr__h7979 or d2eD_OUT_BITS_63_TO_32__q24)
  begin
    case (d2e_D_OUT[122:119])
      4'd0: data__h7825 = addr__h7979;
      4'd1: data__h7825 = d2e_D_OUT[63:32] - d2e_D_OUT[99:68];
      4'd2: data__h7825 = d2e_D_OUT[63:32] & d2e_D_OUT[99:68];
      4'd3: data__h7825 = d2e_D_OUT[63:32] | d2e_D_OUT[99:68];
      4'd4: data__h7825 = d2e_D_OUT[63:32] ^ d2e_D_OUT[99:68];
      4'd5:
	  data__h7825 =
	      ((d2e_D_OUT[63:32] ^ 32'h80000000) <
	       (d2e_D_OUT[99:68] ^ 32'h80000000)) ?
		32'd1 :
		32'd0;
      4'd6:
	  data__h7825 = (d2e_D_OUT[63:32] < d2e_D_OUT[99:68]) ? 32'd1 : 32'd0;
      4'd7: data__h7825 = d2e_D_OUT[63:32] << d2e_D_OUT[72:68];
      4'd8: data__h7825 = d2e_D_OUT[63:32] >> d2e_D_OUT[72:68];
      4'd9:
	  data__h7825 =
	      d2e_D_OUT[63:32] >> d2e_D_OUT[72:68] |
	      ~(32'hFFFFFFFF >> d2e_D_OUT[72:68]) &
	      {32{d2eD_OUT_BITS_63_TO_32__q24[31]}};
      default: data__h7825 =
		   d2e_first__56_BITS_63_TO_32_69_MUL_d2e_first___ETC___d474[31:0];
    endcase
  end
  always@(d2e_D_OUT or
	  d2e_first__56_BITS_63_TO_32_69_MUL_d2e_first___ETC___d450 or
	  d2e_first__56_BITS_63_TO_32_69_SLT_d2e_first___ETC___d375 or
	  d2e_first__56_BITS_63_TO_32_69_ULT_d2e_first___ETC___d377 or
	  d2eD_OUT_BITS_63_TO_32__q24)
  begin
    case (d2e_D_OUT[122:119])
      4'd0: data__h7823 = d2e_D_OUT[63:32] + d2e_D_OUT[31:0];
      4'd1: data__h7823 = d2e_D_OUT[63:32] - d2e_D_OUT[31:0];
      4'd2: data__h7823 = d2e_D_OUT[63:32] & d2e_D_OUT[31:0];
      4'd3: data__h7823 = d2e_D_OUT[63:32] | d2e_D_OUT[31:0];
      4'd4: data__h7823 = d2e_D_OUT[63:32] ^ d2e_D_OUT[31:0];
      4'd5:
	  data__h7823 =
	      d2e_first__56_BITS_63_TO_32_69_SLT_d2e_first___ETC___d375 ?
		32'd1 :
		32'd0;
      4'd6:
	  data__h7823 =
	      d2e_first__56_BITS_63_TO_32_69_ULT_d2e_first___ETC___d377 ?
		32'd1 :
		32'd0;
      4'd7: data__h7823 = d2e_D_OUT[63:32] << d2e_D_OUT[4:0];
      4'd8: data__h7823 = d2e_D_OUT[63:32] >> d2e_D_OUT[4:0];
      4'd9:
	  data__h7823 =
	      d2e_D_OUT[63:32] >> d2e_D_OUT[4:0] |
	      ~(32'hFFFFFFFF >> d2e_D_OUT[4:0]) &
	      {32{d2eD_OUT_BITS_63_TO_32__q24[31]}};
      default: data__h7823 =
		   d2e_first__56_BITS_63_TO_32_69_MUL_d2e_first___ETC___d450[31:0];
    endcase
  end
  always@(d2e_D_OUT or
	  d2e_first__56_BITS_191_TO_160_64_PLUS_d2e_firs_ETC___d390 or
	  data__h7823 or data__h7825 or nextPc__h7742)
  begin
    case (d2e_D_OUT[126:123])
      4'd0: eInst_data__h7755 = data__h7823;
      4'd1: eInst_data__h7755 = data__h7825;
      4'd3: eInst_data__h7755 = d2e_D_OUT[99:68];
      4'd4, 4'd5: eInst_data__h7755 = nextPc__h7742;
      4'd7: eInst_data__h7755 = d2e_D_OUT[31:0];
      default: eInst_data__h7755 =
		   d2e_first__56_BITS_191_TO_160_64_PLUS_d2e_firs_ETC___d390;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q25 = 3'd1;
      3'b001, 3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q25 = 3'd2;
      3'b010: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q25 = 3'd4;
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q25 = 3'd1;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q26 = 3'd1;
      3'b001, 3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q26 = 3'd2;
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q26 = 3'd1;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d301 or
	  IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d304 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q26 or
	  DONTCARE_CONCAT_DONTCARE___d306)
  begin
    case (mem_im_respQ_D_OUT[6:0])
      7'b0000011:
	  IF_mem_im_respQ_first__6_BITS_6_TO_0_7_EQ_0b11_ETC___d312 =
	      (mem_im_respQ_D_OUT[14:12] == 3'b010) ?
		{ 3'd4,
		  mem_im_respQ_D_OUT[14:12] == 3'b001 ||
		  mem_im_respQ_D_OUT[14:12] == 3'b0 } :
		{ CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q26,
		  mem_im_respQ_D_OUT[14:12] == 3'b001 ||
		  mem_im_respQ_D_OUT[14:12] == 3'b0 };
      7'b0010011, 7'b0110011, 7'b0110111, 7'b1100011, 7'b1100111, 7'b1101111:
	  IF_mem_im_respQ_first__6_BITS_6_TO_0_7_EQ_0b11_ETC___d312 =
	      DONTCARE_CONCAT_DONTCARE___d306;
      default: IF_mem_im_respQ_first__6_BITS_6_TO_0_7_EQ_0b11_ETC___d312 =
		   { IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d301,
		     IF_mem_im_respQ_first__6_BITS_14_TO_12_1_EQ_0b_ETC___d304 };
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q27 =
	      mem_im_respQ_D_OUT[14:12];
      3'b100: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q27 = 3'd2;
      3'b101: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q27 = 3'd4;
      3'b110: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q27 = 3'd3;
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_mem__ETC__q27 = 3'd5;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[31:25])
      7'b0: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_0b1__ETC__q28 = 1'b1;
      7'b0100000:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_0b1__ETC__q28 =
	      mem_im_respQ_D_OUT[14:12] == 3'b0 ||
	      mem_im_respQ_D_OUT[14:12] == 3'b101;
      default: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_0b1__ETC__q28 =
		   mem_im_respQ_D_OUT[31:25] == 7'b0000001 &&
		   mem_im_respQ_D_OUT[14:12] == 3'b0;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_0b1__ETC__q28)
  begin
    case (mem_im_respQ_D_OUT[6:0])
      7'b0010011:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b10011_me_ETC__q29 =
	      mem_im_respQ_D_OUT[14:12] == 3'b0 ||
	      mem_im_respQ_D_OUT[14:12] == 3'b010 ||
	      mem_im_respQ_D_OUT[14:12] == 3'b011 ||
	      mem_im_respQ_D_OUT[14:12] == 3'b100 ||
	      mem_im_respQ_D_OUT[14:12] == 3'b110 ||
	      mem_im_respQ_D_OUT[14:12] == 3'b111 ||
	      ((mem_im_respQ_D_OUT[14:12] == 3'b001) ?
		 mem_im_respQ_D_OUT[31:25] == 7'b0 :
		 mem_im_respQ_D_OUT[14:12] == 3'b101 &&
		 (mem_im_respQ_D_OUT[31:25] == 7'b0 ||
		  mem_im_respQ_D_OUT[31:25] == 7'b0100000));
      7'b0110011:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b10011_me_ETC__q29 =
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_0b1__ETC__q28;
      default: CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b10011_me_ETC__q29 =
		   mem_im_respQ_D_OUT[6:0] == 7'b0110111 ||
		   mem_im_respQ_D_OUT[6:0] == 7'b1101111 ||
		   mem_im_respQ_D_OUT[6:0] == 7'b1100111 ||
		   ((mem_im_respQ_D_OUT[6:0] == 7'b0000011) ?
		      mem_im_respQ_D_OUT[14:12] == 3'b010 ||
		      mem_im_respQ_D_OUT[14:12] == 3'b001 ||
		      mem_im_respQ_D_OUT[14:12] == 3'b0 ||
		      mem_im_respQ_D_OUT[14:12] == 3'b101 ||
		      mem_im_respQ_D_OUT[14:12] == 3'b100 :
		      mem_im_respQ_D_OUT[6:0] == 7'b0010111);
    endcase
  end
  always@(d2e_D_OUT or e2m_FULL_N or mem_dm_reqQ_FULL_N)
  begin
    case (d2e_D_OUT[126:123])
      4'd6:
	  CASE_d2eD_OUT_BITS_126_TO_123_6_e2mFULL_N_AN_ETC__q30 =
	      e2m_FULL_N && mem_dm_reqQ_FULL_N;
      4'd7:
	  CASE_d2eD_OUT_BITS_126_TO_123_6_e2mFULL_N_AN_ETC__q30 =
	      mem_dm_reqQ_FULL_N;
      default: CASE_d2eD_OUT_BITS_126_TO_123_6_e2mFULL_N_AN_ETC__q30 =
		   !d2e_D_OUT[115] || e2m_FULL_N;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b100, 3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_6_0b_ETC__q31 = 4'd6;
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_6_0b_ETC__q31 = 4'd9;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[31:25])
      7'b0, 7'b0100000:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_1_0b_ETC__q32 = 4'd1;
      default: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_1_0b_ETC__q32 = 4'd9;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_1_0b_ETC__q32)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b010, 3'b011, 3'b100, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q33 = 4'd1;
      3'b001:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q33 =
	      (mem_im_respQ_D_OUT[31:25] == 7'b0) ? 4'd1 : 4'd9;
      3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q33 =
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_1_0b_ETC__q32;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_7_0b_ETC__q34 = 4'd7;
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_7_0b_ETC__q34 = 4'd9;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q35 = 4'd0;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b101:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q36 = 4'd0;
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q36 = 4'd9;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q35 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q36)
  begin
    case (mem_im_respQ_D_OUT[31:25])
      7'b0:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q37 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q35;
      7'b0000001:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q37 =
	      (mem_im_respQ_D_OUT[14:12] == 3'b0) ? 4'd0 : 4'd9;
      7'b0100000:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q37 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q36;
      default: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q37 = 4'd9;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0, 3'b001, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_2_0b_ETC__q38 = 4'd2;
      default: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_2_0b_ETC__q38 = 4'd9;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_6_0b_ETC__q31 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q33 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_7_0b_ETC__q34 or
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q37 or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_2_0b_ETC__q38)
  begin
    case (mem_im_respQ_D_OUT[6:0])
      7'b0000011:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_6_0b_ETC__q31;
      7'b0010011:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_1_0b_ETC__q33;
      7'b0010111:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 = 4'd8;
      7'b0100011:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_7_0b_ETC__q34;
      7'b0110011:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 =
	      CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q37;
      7'b0110111:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 = 4'd3;
      7'b1100011:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_2_0b_ETC__q38;
      7'b1100111:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 = 4'd5;
      7'b1101111:
	  CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 = 4'd4;
      default: CASE_mem_im_respQD_OUT_BITS_6_TO_0_0b11_CASE__ETC__q39 = 4'd9;
    endcase
  end
  always@(mem_im_respQ_D_OUT)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40 = 4'd0;
      3'b001: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40 = 4'd7;
      3'b010: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40 = 4'd5;
      3'b011: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40 = 4'd6;
      3'b100: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40 = 4'd4;
      3'd5: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40 = 4'd8;
      3'b110: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40 = 4'd3;
      3'b111: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40 = 4'd2;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40)
  begin
    case (mem_im_respQ_D_OUT[31:25])
      7'b0:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q41 =
	      CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q40;
      7'b0100000:
	  CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q41 =
	      (mem_im_respQ_D_OUT[14:12] == 3'b0) ? 4'd1 : 4'd9;
      default: CASE_mem_im_respQD_OUT_BITS_31_TO_25_0b0_CASE_ETC__q41 = 4'd10;
    endcase
  end
  always@(mem_im_respQ_D_OUT or
	  IF_mem_im_respQ_first__6_BITS_31_TO_25_9_EQ_0b_ETC___d153)
  begin
    case (mem_im_respQ_D_OUT[14:12])
      3'b0: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42 = 4'd0;
      3'b001: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42 = 4'd7;
      3'b010: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42 = 4'd5;
      3'b011: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42 = 4'd6;
      3'b100: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42 = 4'd4;
      3'd5:
	  CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42 =
	      IF_mem_im_respQ_first__6_BITS_31_TO_25_9_EQ_0b_ETC___d153;
      3'b110: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42 = 4'd3;
      3'b111: CASE_mem_im_respQD_OUT_BITS_14_TO_12_0b0_0_0b_ETC__q42 = 4'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cycles <= `BSV_ASSIGNMENT_DELAY 32'd0;
	epoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	instCnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pc <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rf_rfile_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (cycles_EN) cycles <= `BSV_ASSIGNMENT_DELAY cycles_D_IN;
	if (epoch_EN) epoch <= `BSV_ASSIGNMENT_DELAY epoch_D_IN;
	if (instCnt_EN) instCnt <= `BSV_ASSIGNMENT_DELAY instCnt_D_IN;
	if (pc_EN) pc <= `BSV_ASSIGNMENT_DELAY pc_D_IN;
	if (rf_rfile_0_EN)
	  rf_rfile_0 <= `BSV_ASSIGNMENT_DELAY rf_rfile_0_D_IN;
	if (rf_rfile_1_EN)
	  rf_rfile_1 <= `BSV_ASSIGNMENT_DELAY rf_rfile_1_D_IN;
	if (rf_rfile_10_EN)
	  rf_rfile_10 <= `BSV_ASSIGNMENT_DELAY rf_rfile_10_D_IN;
	if (rf_rfile_11_EN)
	  rf_rfile_11 <= `BSV_ASSIGNMENT_DELAY rf_rfile_11_D_IN;
	if (rf_rfile_12_EN)
	  rf_rfile_12 <= `BSV_ASSIGNMENT_DELAY rf_rfile_12_D_IN;
	if (rf_rfile_13_EN)
	  rf_rfile_13 <= `BSV_ASSIGNMENT_DELAY rf_rfile_13_D_IN;
	if (rf_rfile_14_EN)
	  rf_rfile_14 <= `BSV_ASSIGNMENT_DELAY rf_rfile_14_D_IN;
	if (rf_rfile_15_EN)
	  rf_rfile_15 <= `BSV_ASSIGNMENT_DELAY rf_rfile_15_D_IN;
	if (rf_rfile_16_EN)
	  rf_rfile_16 <= `BSV_ASSIGNMENT_DELAY rf_rfile_16_D_IN;
	if (rf_rfile_17_EN)
	  rf_rfile_17 <= `BSV_ASSIGNMENT_DELAY rf_rfile_17_D_IN;
	if (rf_rfile_18_EN)
	  rf_rfile_18 <= `BSV_ASSIGNMENT_DELAY rf_rfile_18_D_IN;
	if (rf_rfile_19_EN)
	  rf_rfile_19 <= `BSV_ASSIGNMENT_DELAY rf_rfile_19_D_IN;
	if (rf_rfile_2_EN)
	  rf_rfile_2 <= `BSV_ASSIGNMENT_DELAY rf_rfile_2_D_IN;
	if (rf_rfile_20_EN)
	  rf_rfile_20 <= `BSV_ASSIGNMENT_DELAY rf_rfile_20_D_IN;
	if (rf_rfile_21_EN)
	  rf_rfile_21 <= `BSV_ASSIGNMENT_DELAY rf_rfile_21_D_IN;
	if (rf_rfile_22_EN)
	  rf_rfile_22 <= `BSV_ASSIGNMENT_DELAY rf_rfile_22_D_IN;
	if (rf_rfile_23_EN)
	  rf_rfile_23 <= `BSV_ASSIGNMENT_DELAY rf_rfile_23_D_IN;
	if (rf_rfile_24_EN)
	  rf_rfile_24 <= `BSV_ASSIGNMENT_DELAY rf_rfile_24_D_IN;
	if (rf_rfile_25_EN)
	  rf_rfile_25 <= `BSV_ASSIGNMENT_DELAY rf_rfile_25_D_IN;
	if (rf_rfile_26_EN)
	  rf_rfile_26 <= `BSV_ASSIGNMENT_DELAY rf_rfile_26_D_IN;
	if (rf_rfile_27_EN)
	  rf_rfile_27 <= `BSV_ASSIGNMENT_DELAY rf_rfile_27_D_IN;
	if (rf_rfile_28_EN)
	  rf_rfile_28 <= `BSV_ASSIGNMENT_DELAY rf_rfile_28_D_IN;
	if (rf_rfile_29_EN)
	  rf_rfile_29 <= `BSV_ASSIGNMENT_DELAY rf_rfile_29_D_IN;
	if (rf_rfile_3_EN)
	  rf_rfile_3 <= `BSV_ASSIGNMENT_DELAY rf_rfile_3_D_IN;
	if (rf_rfile_30_EN)
	  rf_rfile_30 <= `BSV_ASSIGNMENT_DELAY rf_rfile_30_D_IN;
	if (rf_rfile_31_EN)
	  rf_rfile_31 <= `BSV_ASSIGNMENT_DELAY rf_rfile_31_D_IN;
	if (rf_rfile_4_EN)
	  rf_rfile_4 <= `BSV_ASSIGNMENT_DELAY rf_rfile_4_D_IN;
	if (rf_rfile_5_EN)
	  rf_rfile_5 <= `BSV_ASSIGNMENT_DELAY rf_rfile_5_D_IN;
	if (rf_rfile_6_EN)
	  rf_rfile_6 <= `BSV_ASSIGNMENT_DELAY rf_rfile_6_D_IN;
	if (rf_rfile_7_EN)
	  rf_rfile_7 <= `BSV_ASSIGNMENT_DELAY rf_rfile_7_D_IN;
	if (rf_rfile_8_EN)
	  rf_rfile_8 <= `BSV_ASSIGNMENT_DELAY rf_rfile_8_D_IN;
	if (rf_rfile_9_EN)
	  rf_rfile_9 <= `BSV_ASSIGNMENT_DELAY rf_rfile_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycles = 32'hAAAAAAAA;
    epoch = 1'h0;
    instCnt = 32'hAAAAAAAA;
    pc = 32'hAAAAAAAA;
    rf_rfile_0 = 32'hAAAAAAAA;
    rf_rfile_1 = 32'hAAAAAAAA;
    rf_rfile_10 = 32'hAAAAAAAA;
    rf_rfile_11 = 32'hAAAAAAAA;
    rf_rfile_12 = 32'hAAAAAAAA;
    rf_rfile_13 = 32'hAAAAAAAA;
    rf_rfile_14 = 32'hAAAAAAAA;
    rf_rfile_15 = 32'hAAAAAAAA;
    rf_rfile_16 = 32'hAAAAAAAA;
    rf_rfile_17 = 32'hAAAAAAAA;
    rf_rfile_18 = 32'hAAAAAAAA;
    rf_rfile_19 = 32'hAAAAAAAA;
    rf_rfile_2 = 32'hAAAAAAAA;
    rf_rfile_20 = 32'hAAAAAAAA;
    rf_rfile_21 = 32'hAAAAAAAA;
    rf_rfile_22 = 32'hAAAAAAAA;
    rf_rfile_23 = 32'hAAAAAAAA;
    rf_rfile_24 = 32'hAAAAAAAA;
    rf_rfile_25 = 32'hAAAAAAAA;
    rf_rfile_26 = 32'hAAAAAAAA;
    rf_rfile_27 = 32'hAAAAAAAA;
    rf_rfile_28 = 32'hAAAAAAAA;
    rf_rfile_29 = 32'hAAAAAAAA;
    rf_rfile_3 = 32'hAAAAAAAA;
    rf_rfile_30 = 32'hAAAAAAAA;
    rf_rfile_31 = 32'hAAAAAAAA;
    rf_rfile_4 = 32'hAAAAAAAA;
    rf_rfile_5 = 32'hAAAAAAAA;
    rf_rfile_6 = 32'hAAAAAAAA;
    rf_rfile_7 = 32'hAAAAAAAA;
    rf_rfile_8 = 32'hAAAAAAAA;
    rf_rfile_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (mem_im_respQ_EMPTY_N && d2e_FULL_N && f2d_EMPTY_N)
	$write("[0x%8x:0x%04x] Decoding 0x%08x\n",
	       cycles,
	       f2d_D_OUT[64:33],
	       mem_im_respQ_D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doWriteback)
	$write("[0x%8x:0x%04x] Writeback writing %x to %d\n",
	       cycles,
	       e2m_D_OUT[73:42],
	       v__h9471,
	       e2m_D_OUT[41:37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFetch)
	$write("[0x%8x:0x%4x] Fetching instruction count 0x%4x\n",
	       cycles,
	       v__h4077,
	       instCnt);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	  !d2e_first__56_BITS_159_TO_128_59_EQ_IF_d2e_fir_ETC___d403)
	$write("[0x%8x:0x%04x] \t\t detected misprediction, jumping to 0x%08x\n",
	       cycles,
	       d2e_D_OUT[191:160],
	       eInst_nextPC__h7757);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	  d2e_D_OUT[126:123] == 4'd9)
	$display("Reached unsupported instruction");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	  d2e_D_OUT[126:123] == 4'd9)
	$display("Dumping the state of the processor");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	  d2e_D_OUT[126:123] == 4'd9)
	$display("pc = 0x%x", d2e_D_OUT[191:160]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	  d2e_D_OUT[126:123] == 4'd9)
	$display("Quitting simulation.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	  d2e_D_OUT[126:123] == 4'd9)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	  d2e_D_OUT[126:123] == 4'd6)
	$write("[0x%8x:0x%04x] \t\t Mem read from 0x%08x\n",
	       cycles,
	       d2e_D_OUT[191:160],
	       eInst_addr__h7756);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	  d2e_D_OUT[126:123] == 4'd7)
	$write("[0x%8x:0x%04x] \t\t Mem write 0x%08x to 0x%08x\n",
	       cycles,
	       d2e_D_OUT[191:160],
	       eInst_data__h7755,
	       eInst_addr__h7756);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358 &&
	  d2e_D_OUT[126:123] != 4'd6 &&
	  d2e_D_OUT[126:123] != 4'd7 &&
	  d2e_D_OUT[115])
	$write("[0x%8x:0x%04x] rf writing %x to %d\n",
	       cycles,
	       d2e_D_OUT[191:160],
	       eInst_data__h7755,
	       d2e_D_OUT[114:110]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  d2e_first__56_BIT_127_57_EQ_epoch_6___d358)
	$write("[0x%8x:0x%04x] Executing\n", cycles, d2e_D_OUT[191:160]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doExecute &&
	  !d2e_first__56_BIT_127_57_EQ_epoch_6___d358)
	$write("[0x%8x:0x%04x] \t\t ignoring mispredicted instruction\n",
	       cycles,
	       d2e_D_OUT[191:160]);
  end
  // synopsys translate_on
endmodule  // mkProcessor

