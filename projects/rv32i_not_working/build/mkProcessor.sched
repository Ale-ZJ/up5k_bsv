=== Generated schedule for mkProcessor ===

Method schedule
---------------
Method: memReq
Ready signal: mem_reqQ.i_notEmpty
Conflict-free: memResp
Conflicts: memReq
 
Method: memResp
Ready signal: mem_respQ.i_notFull
Conflict-free: memReq
Conflicts: memResp
 
Rule schedule
-------------
Rule: incCycle
Predicate: True
Blocking rules: (none)
 
Rule: mem_relayReq
Predicate: mem_im_reqQ.notEmpty
	   ? mem_im_reqQ.i_notEmpty &&
	     mem_reqQ.i_notFull &&
	     (mem_im_reqQ.first[67] || mem_reqTargetIsIMemQ.i_notFull)
	   : ((! mem_dm_reqQ.notEmpty) ||
	      (mem_dm_reqQ.i_notEmpty &&
	       mem_reqQ.i_notFull &&
	       (mem_dm_reqQ.first[67] || mem_reqTargetIsIMemQ.i_notFull)))
Blocking rules: (none)
 
Rule: mem_relayResp
Predicate: mem_reqTargetIsIMemQ.i_notEmpty &&
	   mem_respQ.i_notEmpty &&
	   (mem_reqTargetIsIMemQ.first
	    ? mem_im_respQ.i_notFull
	    : mem_dm_respQ.i_notFull)
Blocking rules: (none)
 
Rule: doFetch
Predicate: mem_im_reqQ.i_notFull &&
	   f2d.i_notFull && ((! nextpcQ.notEmpty) || nextpcQ.i_notEmpty)
Blocking rules: (none)
 
Rule: doDecode
Predicate: mem_im_respQ.i_notEmpty && d2e.i_notFull && f2d.i_notEmpty
Blocking rules: (none)
 
Rule: doExecute
Predicate: d2e.i_notEmpty &&
	   ((d2e.first[127] == epoch)
	    ? ((d2e.first[159:128] ==
		(((d2e.first[126:123] == 4'd0) ||
		  (d2e.first[126:123] == 4'd1))
		 ? d2e.first[191:160] + 32'd4
		 : ((d2e.first[126:123] == 4'd2)
		    ? ((d2e.first[118:116] == 3'd0)
		       ? d2e.first[63:32] == d2e.first[31:0]
		       : ((d2e.first[118:116] == 3'd1)
			  ? ! (d2e.first[63:32] == d2e.first[31:0])
			  : ((d2e.first[118:116] == 3'd2)
			     ? d2e.first[63:32] .< d2e.first[31:0]
			     : ((d2e.first[118:116] == 3'd3)
				? d2e.first[63:32] < d2e.first[31:0]
				: ((d2e.first[118:116] == 3'd4)
				   ? ! (d2e.first[63:32] .< d2e.first[31:0])
				   : ((d2e.first[118:116] == 3'd5)
				      ? ! (d2e.first[63:32] < d2e.first[31:0])
				      : (d2e.first[118:116] == 3'd6)))))))
		      ? d2e.first[191:160] + d2e.first[99:68]
		      : (d2e.first[191:160] + 32'd4)
		    : ((d2e.first[126:123] == 4'd3)
		       ? d2e.first[191:160] + 32'd4
		       : ((d2e.first[126:123] == 4'd4)
			  ? d2e.first[191:160] + d2e.first[99:68]
			  : ((d2e.first[126:123] == 4'd5)
			     ? {(d2e.first[63:32] +
				 d2e.first[99:68])[31:1], 1'd0}
			     : (d2e.first[191:160] + 32'd4))))))) ||
	       nextpcQ.i_notFull) &&
	      ((d2e.first[126:123] == 4'd6)
	       ? e2m.i_notFull && mem_dm_reqQ.i_notFull
	       : ((d2e.first[126:123] == 4'd7)
		  ? mem_dm_reqQ.i_notFull
		  : ((! d2e.first[115]) || e2m.i_notFull)))
	    : e2m.i_notFull)
Blocking rules: (none)
 
Rule: doWriteback
Predicate: e2m.i_notEmpty && ((! e2m.first[36]) || mem_dm_respQ.i_notEmpty)
Blocking rules: (none)
 
Logical execution order: memReq,
			 memResp,
			 doDecode,
			 doWriteback,
			 mem_relayReq,
			 doFetch,
			 doExecute,
			 incCycle,
			 mem_relayResp

===========================================
