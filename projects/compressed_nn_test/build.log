rm -rf build
mkdir -p build
cd ./build/; apio init -b upduino2 -p .
Creating apio.ini file ...
File 'apio.ini' has been successfully created!
bsc  -show-schedule -show-range-conflict -aggressive-conditions --wait-for-license  -bdir ./build/ -vdir ./build/ -simdir ./build/ -info-dir ./build/ -fdir ./build/ -remove-dollar -p +:../..//src/ -verilog -u -g mkBsvTop ../..//src/BsvTop.bsv 
Warning: Unknown position: (S0059)
  License feature BCOMP expires in 27 days.
  This message may be silenced by using "-licenseWarning <days>" option.
checking package dependencies
compiling ../..//src//Uart.bsv
Foreign import file created: ./build//bdpiUartGet.ba
Foreign import file created: ./build//bdpiUartPut.ba
VPI wrapper files created: ./build//vpi_wrapper_bdpiUartGet.{c,h}
VPI wrapper files created: ./build//vpi_wrapper_bdpiUartPut.{c,h}
compiling ../..//src//DSPArith.bsv
Warning: "../..//src//DSPArith.bsv", line 16, column 9: (P0200)
  No scheduling annotation given between method `get' and method `get'
  Assuming conflict-free.
Warning: "../..//src//DSPArith.bsv", line 16, column 9: (P0200)
  No scheduling annotation given between method `put' and method `put'
  Assuming conflict.
compiling ../..//src//QuantizedMath.bsv
compiling ../..//src//Spram.bsv
compiling ./SpramManager.bsv
code generation for mkSpramManager starts
Schedule dump file created: ./build//mkSpramManager.sched
Warning: "../..//src//Spram.bsv", line 127, column 29: (G0015)
  Instance `sprams_0_ram' requires the following methods to be always enabled,
  but the conditions for executing the methods could not be proven to be
  always True:
    address, chipselect, datain, maskwrin, poweroff, sleep, standby, wren
  The behavior of the design will likely be incorrect if the methods are not
  enabled on every clock cycle.
Warning: "../..//src//Spram.bsv", line 127, column 29: (G0015)
  Instance `sprams_1_ram' requires the following methods to be always enabled,
  but the conditions for executing the methods could not be proven to be
  always True:
    address, chipselect, datain, maskwrin, poweroff, sleep, standby, wren
  The behavior of the design will likely be incorrect if the methods are not
  enabled on every clock cycle.
Warning: "../..//src//Spram.bsv", line 127, column 29: (G0015)
  Instance `sprams_2_ram' requires the following methods to be always enabled,
  but the conditions for executing the methods could not be proven to be
  always True:
    address, chipselect, datain, maskwrin, poweroff, sleep, standby, wren
  The behavior of the design will likely be incorrect if the methods are not
  enabled on every clock cycle.
Warning: "../..//src//Spram.bsv", line 127, column 29: (G0015)
  Instance `sprams_3_ram' requires the following methods to be always enabled,
  but the conditions for executing the methods could not be proven to be
  always True:
    address, chipselect, datain, maskwrin, poweroff, sleep, standby, wren
  The behavior of the design will likely be incorrect if the methods are not
  enabled on every clock cycle.
Verilog file created: build//mkSpramManager.v
compiling ./Main.bsv
compiling ../..//src/BsvTop.bsv
Foreign import file created: ./build//bdpiSwInit.ba
VPI wrapper files created: ./build//vpi_wrapper_bdpiSwInit.{c,h}
code generation for mkBsvTop starts
Schedule dump file created: ./build//mkBsvTop.sched
Verilog file created: build//mkBsvTop.v
All packages are up to date.
cp verilog/*.v build
cp verilog/*.pcf build
cp ../..//verilog/bluespec/*.v build 
cd build; apio verify 
iverilog -B "/home/swjun/.apio/packages/toolchain-iverilog/lib/ivl" -o hardware.out -D VCD_OUTPUT= /home/swjun/.apio/packages/toolchain-yosys/share/yosys/ice40/cells_sim.v BRAM2.v ClockDiv.v FIFO2.v MakeResetA.v SizedFIFO.v SyncFIFO.v SyncResetA.v mkBsvTop.v mkSpramManager.v top.v
====================================================================================================== [SUCCESS] Took 0.21 seconds ======================================================================================================
cd build; apio build -v
[Wed Oct  7 14:17:55 2020] Processing upduino2
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
yosys -p "synth_ice40 -json hardware.json" BRAM2.v ClockDiv.v FIFO2.v MakeResetA.v SizedFIFO.v SyncFIFO.v SyncResetA.v mkBsvTop.v mkSpramManager.v top.v

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.9+932 (git sha1 UNKNOWN, x86_64-linux-gnu-g++ 7.3.0-16ubuntu3 -O3 -DNDEBUG)


-- Parsing `BRAM2.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: BRAM2.v
Parsing Verilog input from `BRAM2.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) translate_off' comments.
Yosys does support them but it is recommended to use `ifdef constructs instead!
Generating RTLIL representation for module `\BRAM2'.
Successfully finished Verilog frontend.

-- Parsing `ClockDiv.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: ClockDiv.v
Parsing Verilog input from `ClockDiv.v' to AST representation.
Generating RTLIL representation for module `\ClockDiv'.
Note: Assuming pure combinatorial block at ClockDiv.v:83 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

-- Parsing `FIFO2.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: FIFO2.v
Parsing Verilog input from `FIFO2.v' to AST representation.
Generating RTLIL representation for module `\FIFO2'.
Successfully finished Verilog frontend.

-- Parsing `MakeResetA.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: MakeResetA.v
Parsing Verilog input from `MakeResetA.v' to AST representation.
Generating RTLIL representation for module `\MakeResetA'.
Successfully finished Verilog frontend.

-- Parsing `SizedFIFO.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: SizedFIFO.v
Parsing Verilog input from `SizedFIFO.v' to AST representation.
Generating RTLIL representation for module `\SizedFIFO'.
Successfully finished Verilog frontend.

-- Parsing `SyncFIFO.v' using frontend `verilog' --

6. Executing Verilog-2005 frontend: SyncFIFO.v
Parsing Verilog input from `SyncFIFO.v' to AST representation.
Generating RTLIL representation for module `\SyncFIFO'.
Successfully finished Verilog frontend.

-- Parsing `SyncResetA.v' using frontend `verilog' --

7. Executing Verilog-2005 frontend: SyncResetA.v
Parsing Verilog input from `SyncResetA.v' to AST representation.
Generating RTLIL representation for module `\SyncResetA'.
Successfully finished Verilog frontend.

-- Parsing `mkBsvTop.v' using frontend `verilog' --

8. Executing Verilog-2005 frontend: mkBsvTop.v
Parsing Verilog input from `mkBsvTop.v' to AST representation.
Generating RTLIL representation for module `\mkBsvTop'.
Successfully finished Verilog frontend.

-- Parsing `mkSpramManager.v' using frontend `verilog' --

9. Executing Verilog-2005 frontend: mkSpramManager.v
Parsing Verilog input from `mkSpramManager.v' to AST representation.
Generating RTLIL representation for module `\mkSpramManager'.
Note: Assuming pure combinatorial block at mkSpramManager.v:171 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at mkSpramManager.v:413 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

-- Parsing `top.v' using frontend `verilog' --

10. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -json hardware.json' --

11. Executing SYNTH_ICE40 pass.

11.1. Executing Verilog-2005 frontend: /home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

11.2. Executing HIERARCHY pass (managing design hierarchy).

11.2.1. Finding top of design hierarchy..
root of   3 design levels: top
root of   1 design levels: mkSpramManager
root of   2 design levels: mkBsvTop
root of   0 design levels: SyncResetA
root of   0 design levels: SyncFIFO
root of   0 design levels: SizedFIFO
root of   1 design levels: MakeResetA
root of   0 design levels: FIFO2
root of   0 design levels: ClockDiv
root of   0 design levels: BRAM2
Automatically selected top as design top module.

11.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \mkBsvTop
Used module:         \FIFO2
Used module:         \mkSpramManager
Used module:             \SizedFIFO
Parameter \width = 8
Parameter \guarded = 1

11.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\FIFO2'.
Parameter \width = 8
Parameter \guarded = 1
Generating RTLIL representation for module `$paramod\FIFO2\width=8\guarded=1'.
Parameter \width = 8
Parameter \guarded = 1
Found cached RTLIL representation for module `$paramod\FIFO2\width=8\guarded=1'.
Parameter \width = 8
Parameter \guarded = 1
Found cached RTLIL representation for module `$paramod\FIFO2\width=8\guarded=1'.
Parameter \width = 16
Parameter \guarded = 1

11.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\FIFO2'.
Parameter \width = 16
Parameter \guarded = 1
Generating RTLIL representation for module `$paramod\FIFO2\width=16\guarded=1'.
Parameter \width = 16
Parameter \guarded = 1
Found cached RTLIL representation for module `$paramod\FIFO2\width=16\guarded=1'.
Parameter \width = 16
Parameter \guarded = 1
Found cached RTLIL representation for module `$paramod\FIFO2\width=16\guarded=1'.
Parameter \width = 16
Parameter \guarded = 1
Found cached RTLIL representation for module `$paramod\FIFO2\width=16\guarded=1'.
Parameter \p1width = 2
Parameter \p2depth = 4
Parameter \p3cntr_width = 2
Parameter \guarded = 1

11.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\SizedFIFO'.
Parameter \p1width = 2
Parameter \p2depth = 4
Parameter \p3cntr_width = 2
Parameter \guarded = 1
Generating RTLIL representation for module `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1'.

11.2.6. Analyzing design hierarchy..
Top module:  \top
Used module:     \mkBsvTop
Used module:         $paramod\FIFO2\width=8\guarded=1
Used module:         \mkSpramManager
Used module:             $paramod\FIFO2\width=16\guarded=1
Used module:             $paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1

11.2.7. Analyzing design hierarchy..
Top module:  \top
Used module:     \mkBsvTop
Used module:         $paramod\FIFO2\width=8\guarded=1
Used module:         \mkSpramManager
Used module:             $paramod\FIFO2\width=16\guarded=1
Used module:             $paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1
Removing unused module `\SyncResetA'.
Removing unused module `\SyncFIFO'.
Removing unused module `\SizedFIFO'.
Removing unused module `\MakeResetA'.
Removing unused module `\FIFO2'.
Removing unused module `\ClockDiv'.
Removing unused module `\BRAM2'.
Removed 7 unused modules.

11.3. Executing PROC pass (convert processes to netlists).

11.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

11.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$mkSpramManager.v:413$355 in module mkSpramManager.
Marked 1 switch rules as full_case in process $proc$mkSpramManager.v:413$355 in module mkSpramManager.
Removed 1 dead cases from process $proc$mkSpramManager.v:171$299 in module mkSpramManager.
Marked 1 switch rules as full_case in process $proc$mkSpramManager.v:171$299 in module mkSpramManager.
Marked 1 switch rules as full_case in process $proc$mkBsvTop.v:380$293 in module mkBsvTop.
Marked 1 switch rules as full_case in process $proc$SizedFIFO.v:130$560 in module $paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.
Marked 3 switch rules as full_case in process $proc$FIFO2.v:104$538 in module $paramod\FIFO2\width=16\guarded=1.
Marked 3 switch rules as full_case in process $proc$FIFO2.v:104$506 in module $paramod\FIFO2\width=8\guarded=1.
Removed a total of 2 dead cases.

11.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 7 assignments to connections.

11.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$proc$top.v:22$360'.
Set init value: \cntr = 4'0000

11.3.5. Executing PROC_ARST pass (detect async resets in processes).

11.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$top.v:22$360'.
Creating decoders for process `\top.$proc$top.v:26$357'.
1/1: $0\cntr[3:0]
Creating decoders for process `\mkSpramManager.$proc$mkSpramManager.v:413$355'.
1/1: $1\CASE_readIdxQ_first__0_0_sprams_0_outQ_i_notEm_ETC___d105[0:0]
Creating decoders for process `\mkSpramManager.$proc$mkSpramManager.v:171$299'.
1/1: $1\resp[15:0]
Creating decoders for process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
1/11: $0\uart_txdr[0:0]
2/11: $0\uart_samplecountdown[15:0]
3/11: $0\uart_rxin[3:0]
4/11: $0\uart_outword[7:0]
5/11: $0\uart_curoutoff[4:0]
6/11: $0\uart_curoutd[10:0]
7/11: $0\uart_clkcnt[15:0]
8/11: $0\uart_bleft[3:0]
9/11: $0\hwmain_weightWriteBuffer[7:0]
10/11: $0\hwmain_weightAddr[16:0]
11/11: $0\hwmain_outD[8:0]
Creating decoders for process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:213$568'.
1/3: $0$memwr$\arr$SizedFIFO.v:229$553_EN[1:0]$571
2/3: $0$memwr$\arr$SizedFIFO.v:229$553_DATA[1:0]$570
3/3: $0$memwr$\arr$SizedFIFO.v:229$553_ADDR[1:0]$569
Creating decoders for process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:190$565'.
1/1: $0\D_OUT[1:0]
Creating decoders for process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:130$560'.
1/5: $0\hasodata[0:0]
2/5: $0\tail[1:0]
3/5: $0\head[1:0]
4/5: $0\ring_empty[0:0]
5/5: $0\not_ring_full[0:0]
Creating decoders for process `$paramod\FIFO2\width=16\guarded=1.$proc$FIFO2.v:133$546'.
Creating decoders for process `$paramod\FIFO2\width=16\guarded=1.$proc$FIFO2.v:104$538'.
1/2: $0\empty_reg[0:0]
2/2: $0\full_reg[0:0]
Creating decoders for process `$paramod\FIFO2\width=8\guarded=1.$proc$FIFO2.v:133$514'.
Creating decoders for process `$paramod\FIFO2\width=8\guarded=1.$proc$FIFO2.v:104$506'.
1/2: $0\empty_reg[0:0]
2/2: $0\full_reg[0:0]

11.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\mkSpramManager.\CASE_readIdxQ_first__0_0_sprams_0_outQ_i_notEm_ETC___d105' from process `\mkSpramManager.$proc$mkSpramManager.v:413$355'.
No latch inferred for signal `\mkSpramManager.\resp' from process `\mkSpramManager.$proc$mkSpramManager.v:171$299'.

11.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\cntr' using process `\top.$proc$top.v:26$357'.
created $dff cell `$procdff$748' with positive edge clock.
Creating register for signal `\mkBsvTop.\hwmain_outD' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$749' with positive edge clock.
Creating register for signal `\mkBsvTop.\hwmain_weightAddr' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$750' with positive edge clock.
Creating register for signal `\mkBsvTop.\hwmain_weightWriteBuffer' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$751' with positive edge clock.
Creating register for signal `\mkBsvTop.\uart_bleft' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$752' with positive edge clock.
Creating register for signal `\mkBsvTop.\uart_clkcnt' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$753' with positive edge clock.
Creating register for signal `\mkBsvTop.\uart_curoutd' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$754' with positive edge clock.
Creating register for signal `\mkBsvTop.\uart_curoutoff' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$755' with positive edge clock.
Creating register for signal `\mkBsvTop.\uart_outword' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$756' with positive edge clock.
Creating register for signal `\mkBsvTop.\uart_rxin' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$757' with positive edge clock.
Creating register for signal `\mkBsvTop.\uart_samplecountdown' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$758' with positive edge clock.
Creating register for signal `\mkBsvTop.\uart_txdr' using process `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
created $dff cell `$procdff$759' with positive edge clock.
Creating register for signal `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$memwr$\arr$SizedFIFO.v:229$553_ADDR' using process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:213$568'.
created $dff cell `$procdff$760' with positive edge clock.
Creating register for signal `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$memwr$\arr$SizedFIFO.v:229$553_DATA' using process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:213$568'.
created $dff cell `$procdff$761' with positive edge clock.
Creating register for signal `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$memwr$\arr$SizedFIFO.v:229$553_EN' using process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:213$568'.
created $dff cell `$procdff$762' with positive edge clock.
Creating register for signal `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.\D_OUT' using process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:190$565'.
created $dff cell `$procdff$763' with positive edge clock.
Creating register for signal `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.\not_ring_full' using process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:130$560'.
created $dff cell `$procdff$764' with positive edge clock.
Creating register for signal `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.\ring_empty' using process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:130$560'.
created $dff cell `$procdff$765' with positive edge clock.
Creating register for signal `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.\head' using process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:130$560'.
created $dff cell `$procdff$766' with positive edge clock.
Creating register for signal `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.\tail' using process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:130$560'.
created $dff cell `$procdff$767' with positive edge clock.
Creating register for signal `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.\hasodata' using process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:130$560'.
created $dff cell `$procdff$768' with positive edge clock.
Creating register for signal `$paramod\FIFO2\width=16\guarded=1.\data0_reg' using process `$paramod\FIFO2\width=16\guarded=1.$proc$FIFO2.v:133$546'.
created $dff cell `$procdff$769' with positive edge clock.
Creating register for signal `$paramod\FIFO2\width=16\guarded=1.\data1_reg' using process `$paramod\FIFO2\width=16\guarded=1.$proc$FIFO2.v:133$546'.
created $dff cell `$procdff$770' with positive edge clock.
Creating register for signal `$paramod\FIFO2\width=16\guarded=1.\full_reg' using process `$paramod\FIFO2\width=16\guarded=1.$proc$FIFO2.v:104$538'.
created $dff cell `$procdff$771' with positive edge clock.
Creating register for signal `$paramod\FIFO2\width=16\guarded=1.\empty_reg' using process `$paramod\FIFO2\width=16\guarded=1.$proc$FIFO2.v:104$538'.
created $dff cell `$procdff$772' with positive edge clock.
Creating register for signal `$paramod\FIFO2\width=8\guarded=1.\data0_reg' using process `$paramod\FIFO2\width=8\guarded=1.$proc$FIFO2.v:133$514'.
created $dff cell `$procdff$773' with positive edge clock.
Creating register for signal `$paramod\FIFO2\width=8\guarded=1.\data1_reg' using process `$paramod\FIFO2\width=8\guarded=1.$proc$FIFO2.v:133$514'.
created $dff cell `$procdff$774' with positive edge clock.
Creating register for signal `$paramod\FIFO2\width=8\guarded=1.\full_reg' using process `$paramod\FIFO2\width=8\guarded=1.$proc$FIFO2.v:104$506'.
created $dff cell `$procdff$775' with positive edge clock.
Creating register for signal `$paramod\FIFO2\width=8\guarded=1.\empty_reg' using process `$paramod\FIFO2\width=8\guarded=1.$proc$FIFO2.v:104$506'.
created $dff cell `$procdff$776' with positive edge clock.

11.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$top.v:22$360'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:26$357'.
Removing empty process `top.$proc$top.v:26$357'.
Found and cleaned up 1 empty switch in `\mkSpramManager.$proc$mkSpramManager.v:413$355'.
Removing empty process `mkSpramManager.$proc$mkSpramManager.v:413$355'.
Found and cleaned up 1 empty switch in `\mkSpramManager.$proc$mkSpramManager.v:171$299'.
Removing empty process `mkSpramManager.$proc$mkSpramManager.v:171$299'.
Found and cleaned up 12 empty switches in `\mkBsvTop.$proc$mkBsvTop.v:380$293'.
Removing empty process `mkBsvTop.$proc$mkBsvTop.v:380$293'.
Found and cleaned up 1 empty switch in `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:213$568'.
Removing empty process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:213$568'.
Found and cleaned up 1 empty switch in `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:190$565'.
Removing empty process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:190$565'.
Found and cleaned up 3 empty switches in `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:130$560'.
Removing empty process `$paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.$proc$SizedFIFO.v:130$560'.
Removing empty process `$paramod\FIFO2\width=16\guarded=1.$proc$FIFO2.v:133$546'.
Found and cleaned up 4 empty switches in `$paramod\FIFO2\width=16\guarded=1.$proc$FIFO2.v:104$538'.
Removing empty process `$paramod\FIFO2\width=16\guarded=1.$proc$FIFO2.v:104$538'.
Removing empty process `$paramod\FIFO2\width=8\guarded=1.$proc$FIFO2.v:133$514'.
Found and cleaned up 4 empty switches in `$paramod\FIFO2\width=8\guarded=1.$proc$FIFO2.v:104$506'.
Removing empty process `$paramod\FIFO2\width=8\guarded=1.$proc$FIFO2.v:104$506'.
Cleaned up 28 empty switches.

11.4. Executing FLATTEN pass (flatten design).
Using template mkBsvTop for cells of type mkBsvTop.
Using template $paramod\FIFO2\width=8\guarded=1 for cells of type $paramod\FIFO2\width=8\guarded=1.
Using template mkSpramManager for cells of type mkSpramManager.
Using template $paramod\FIFO2\width=16\guarded=1 for cells of type $paramod\FIFO2\width=16\guarded=1.
Using template $paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1 for cells of type $paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.
No more expansions possible.
Deleting now unused module mkSpramManager.
Deleting now unused module mkBsvTop.
Deleting now unused module $paramod\SizedFIFO\p1width=2\p2depth=4\p3cntr_width=2\guarded=1.
Deleting now unused module $paramod\FIFO2\width=16\guarded=1.
Deleting now unused module $paramod\FIFO2\width=8\guarded=1.

11.5. Executing TRIBUF pass.

11.6. Executing DEMINOUT pass (demote inout ports to input or output).

11.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 9 unused cells and 276 unused wires.

11.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

11.10. Executing OPT pass (performing simple optimizations).

11.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 91 cells.

11.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Replacing known input bits on port A of cell $techmap\hwtop.hwmain_spram.readIdxQ.$procmux$695: \hwtop.hwmain_spram.readIdxQ.not_ring_full -> 1'0
Analyzing evaluation results.
dead port 3/4 on $pmux $techmap\hwtop.hwmain_spram.readIdxQ.$procmux$661.
dead port 3/4 on $pmux $techmap\hwtop.hwmain_spram.readIdxQ.$procmux$670.
dead port 3/4 on $pmux $techmap\hwtop.hwmain_spram.readIdxQ.$procmux$679.
dead port 3/4 on $pmux $techmap\hwtop.hwmain_spram.readIdxQ.$procmux$688.
dead port 3/4 on $pmux $techmap\hwtop.hwmain_spram.readIdxQ.$procmux$697.
Removed 5 multiplexer ports.

11.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \top.
Consolidated identical input bits for $mux cell $techmap\hwtop.hwmain_spram.readIdxQ.$procmux$649:
Old ports: A=2'00, B=2'11, Y=$techmap\hwtop.hwmain_spram.readIdxQ.$0$memwr$\arr$SizedFIFO.v:229$553_EN[1:0]$571
New ports: A=1'0, B=1'1, Y=$techmap\hwtop.hwmain_spram.readIdxQ.$0$memwr$\arr$SizedFIFO.v:229$553_EN[1:0]$571 [0]
New connections: $techmap\hwtop.hwmain_spram.readIdxQ.$0$memwr$\arr$SizedFIFO.v:229$553_EN[1:0]$571 [1] = $techmap\hwtop.hwmain_spram.readIdxQ.$0$memwr$\arr$SizedFIFO.v:229$553_EN[1:0]$571 [0]
New ctrl vector for $pmux cell $techmap\hwtop.hwmain_spram.readIdxQ.$procmux$655: { $auto$opt_reduce.cc:132:opt_mux$780 $auto$opt_reduce.cc:132:opt_mux$778 }
New ctrl vector for $pmux cell $techmap\hwtop.hwmain_spram.readIdxQ.$procmux$679: $auto$opt_reduce.cc:132:opt_mux$782
Optimizing cells in module \top.
Performed a total of 3 changes.

11.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 1 cells.

11.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

11.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 90 unused wires.

11.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.10.9. Rerunning OPT passes. (Maybe there is more to do..)

11.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.

11.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \top.
Performed a total of 0 changes.

11.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

11.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.10.16. Finished OPT passes. (There is nothing left to do.)

11.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:29$359 ($add).
Removed top 28 bits (of 32) from port Y of cell top.$add$top.v:29$359 ($add).
Removed top 15 bits (of 16) from port B of cell top.$techmap\hwtop.$sub$mkBsvTop.v:376$292 ($sub).
Removed top 4 bits (of 5) from port B of cell top.$techmap\hwtop.$sub$mkBsvTop.v:374$291 ($sub).
Removed top 15 bits (of 16) from port B of cell top.$techmap\hwtop.$add$mkBsvTop.v:372$290 ($add).
Removed top 3 bits (of 4) from port B of cell top.$techmap\hwtop.$sub$mkBsvTop.v:371$289 ($sub).
Removed top 4 bits (of 16) from port B of cell top.$techmap\hwtop.$lt$mkBsvTop.v:370$288 ($lt).
Removed top 6 bits (of 17) from port B of cell top.$techmap\hwtop.$lt$mkBsvTop.v:369$287 ($lt).
Removed top 3 bits (of 4) from port B of cell top.$techmap\hwtop.$eq$mkBsvTop.v:364$285 ($eq).
Removed top 1 bits (of 11) from mux cell top.$techmap\hwtop.$ternary$mkBsvTop.v:288$242 ($mux).
Removed top 16 bits (of 17) from port B of cell top.$techmap\hwtop.$add$mkBsvTop.v:266$224 ($add).
Removed top 5 bits (of 17) from port B of cell top.$techmap\hwtop.$lt$mkBsvTop.v:248$218 ($lt).
Removed top 3 bits (of 4) from port B of cell top.$techmap\hwtop.$ne$mkBsvTop.v:242$213 ($ne).
Removed top 1 bits (of 2) from port B of cell top.$techmap\hwtop.hwmain_spram.$eq$mkSpramManager.v:333$325 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$techmap\hwtop.hwmain_spram.$eq$mkSpramManager.v:294$303 ($eq).
Removed top 1 bits (of 2) from FF cell top.$techmap\hwtop.hwmain_spram.readIdxQ.$procdff$762 ($dff).
Removed top 1 bits (of 3) from port B of cell top.$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$671_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$656_CMP0 ($eq).
Removed cell top.$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$653 ($mux).
Removed cell top.$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$651 ($mux).
Removed top 28 bits (of 32) from wire top.$add$top.v:29$359_Y.
Removed top 6 bits (of 16) from wire top.hwtop.MUX_hwmain_spram_req_1__VAL_2.
Removed top 1 bits (of 9) from wire top.hwtop.hwmain_outD_D_IN.
Removed top 1 bits (of 14) from wire top.hwtop.hwmain_spram.sprams_0_ram_ADDRESS.
Removed top 1 bits (of 14) from wire top.hwtop.hwmain_spram.sprams_1_ram_ADDRESS.
Removed top 1 bits (of 14) from wire top.hwtop.hwmain_spram.sprams_2_ram_ADDRESS.
Removed top 1 bits (of 14) from wire top.hwtop.hwmain_spram.sprams_3_ram_ADDRESS.
Removed top 2 bits (of 11) from wire top.hwtop.x__h652.

11.12. Executing PEEPOPT pass (run peephole optimizers).

11.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.

11.14. Executing SHARE pass (SAT-based resource sharing).

11.15. Executing TECHMAP pass (map to technology primitives).

11.15.1. Executing Verilog-2005 frontend: /home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

11.15.2. Continuing TECHMAP pass.
No more expansions possible.

11.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
creating $macc model for $add$top.v:29$359 ($add).
creating $macc model for $techmap\hwtop.$add$mkBsvTop.v:266$224 ($add).
creating $macc model for $techmap\hwtop.$add$mkBsvTop.v:372$290 ($add).
creating $macc model for $techmap\hwtop.$sub$mkBsvTop.v:371$289 ($sub).
creating $macc model for $techmap\hwtop.$sub$mkBsvTop.v:374$291 ($sub).
creating $macc model for $techmap\hwtop.$sub$mkBsvTop.v:376$292 ($sub).
creating $macc model for $techmap\hwtop.hwmain_spram.readIdxQ.$add$SizedFIFO.v:98$554 ($add).
creating $macc model for $techmap\hwtop.hwmain_spram.readIdxQ.$add$SizedFIFO.v:99$555 ($add).
creating $alu model for $macc $techmap\hwtop.hwmain_spram.readIdxQ.$add$SizedFIFO.v:99$555.
creating $alu model for $macc $techmap\hwtop.hwmain_spram.readIdxQ.$add$SizedFIFO.v:98$554.
creating $alu model for $macc $techmap\hwtop.$sub$mkBsvTop.v:376$292.
creating $alu model for $macc $techmap\hwtop.$sub$mkBsvTop.v:374$291.
creating $alu model for $macc $techmap\hwtop.$sub$mkBsvTop.v:371$289.
creating $alu model for $macc $techmap\hwtop.$add$mkBsvTop.v:372$290.
creating $alu model for $macc $techmap\hwtop.$add$mkBsvTop.v:266$224.
creating $alu model for $macc $add$top.v:29$359.
creating $alu model for $techmap\hwtop.$lt$mkBsvTop.v:248$218 ($lt): new $alu
creating $alu model for $techmap\hwtop.$lt$mkBsvTop.v:369$287 ($lt): new $alu
creating $alu model for $techmap\hwtop.$lt$mkBsvTop.v:370$288 ($lt): new $alu
creating $alu cell for $techmap\hwtop.$lt$mkBsvTop.v:370$288: $auto$alumacc.cc:485:replace_alu$794
creating $alu cell for $techmap\hwtop.$lt$mkBsvTop.v:369$287: $auto$alumacc.cc:485:replace_alu$805
creating $alu cell for $techmap\hwtop.$lt$mkBsvTop.v:248$218: $auto$alumacc.cc:485:replace_alu$816
creating $alu cell for $add$top.v:29$359: $auto$alumacc.cc:485:replace_alu$827
creating $alu cell for $techmap\hwtop.$add$mkBsvTop.v:266$224: $auto$alumacc.cc:485:replace_alu$830
creating $alu cell for $techmap\hwtop.$add$mkBsvTop.v:372$290: $auto$alumacc.cc:485:replace_alu$833
creating $alu cell for $techmap\hwtop.$sub$mkBsvTop.v:371$289: $auto$alumacc.cc:485:replace_alu$836
creating $alu cell for $techmap\hwtop.$sub$mkBsvTop.v:374$291: $auto$alumacc.cc:485:replace_alu$839
creating $alu cell for $techmap\hwtop.$sub$mkBsvTop.v:376$292: $auto$alumacc.cc:485:replace_alu$842
creating $alu cell for $techmap\hwtop.hwmain_spram.readIdxQ.$add$SizedFIFO.v:98$554: $auto$alumacc.cc:485:replace_alu$845
creating $alu cell for $techmap\hwtop.hwmain_spram.readIdxQ.$add$SizedFIFO.v:99$555: $auto$alumacc.cc:485:replace_alu$848
created 11 $alu and 0 $macc cells.

11.19. Executing OPT pass (performing simple optimizations).

11.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.

11.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \top.
New input vector for $reduce_and cell $auto$alumacc.cc:75:get_eq$821: { $auto$alumacc.cc:501:replace_alu$817 [0] $auto$alumacc.cc:501:replace_alu$817 [1] $auto$alumacc.cc:501:replace_alu$817 [2] $auto$alumacc.cc:501:replace_alu$817 [3] $auto$alumacc.cc:501:replace_alu$817 [4] $auto$alumacc.cc:501:replace_alu$817 [5] $auto$alumacc.cc:501:replace_alu$817 [6] $auto$alumacc.cc:501:replace_alu$817 [7] $auto$alumacc.cc:501:replace_alu$817 [8] $auto$alumacc.cc:501:replace_alu$817 [9] $auto$alumacc.cc:501:replace_alu$817 [10] $auto$alumacc.cc:501:replace_alu$817 [11] $auto$alumacc.cc:501:replace_alu$817 [12] $auto$alumacc.cc:501:replace_alu$817 [13] $auto$alumacc.cc:501:replace_alu$817 [14] $auto$alumacc.cc:501:replace_alu$817 [15] $auto$alumacc.cc:501:replace_alu$817 [16] }
New input vector for $reduce_and cell $auto$alumacc.cc:75:get_eq$799: { $auto$alumacc.cc:501:replace_alu$795 [0] $auto$alumacc.cc:501:replace_alu$795 [1] $auto$alumacc.cc:501:replace_alu$795 [2] $auto$alumacc.cc:501:replace_alu$795 [3] $auto$alumacc.cc:501:replace_alu$795 [4] $auto$alumacc.cc:501:replace_alu$795 [5] $auto$alumacc.cc:501:replace_alu$795 [6] $auto$alumacc.cc:501:replace_alu$795 [7] $auto$alumacc.cc:501:replace_alu$795 [8] $auto$alumacc.cc:501:replace_alu$795 [9] $auto$alumacc.cc:501:replace_alu$795 [10] $auto$alumacc.cc:501:replace_alu$795 [11] $auto$alumacc.cc:501:replace_alu$795 [12] $auto$alumacc.cc:501:replace_alu$795 [13] $auto$alumacc.cc:501:replace_alu$795 [14] $auto$alumacc.cc:501:replace_alu$795 [15] }
New input vector for $reduce_and cell $auto$alumacc.cc:75:get_eq$810: { $auto$alumacc.cc:501:replace_alu$806 [0] $auto$alumacc.cc:501:replace_alu$806 [1] $auto$alumacc.cc:501:replace_alu$806 [2] $auto$alumacc.cc:501:replace_alu$806 [3] $auto$alumacc.cc:501:replace_alu$806 [4] $auto$alumacc.cc:501:replace_alu$806 [5] $auto$alumacc.cc:501:replace_alu$806 [6] $auto$alumacc.cc:501:replace_alu$806 [7] $auto$alumacc.cc:501:replace_alu$806 [8] $auto$alumacc.cc:501:replace_alu$806 [9] $auto$alumacc.cc:501:replace_alu$806 [10] $auto$alumacc.cc:501:replace_alu$806 [11] $auto$alumacc.cc:501:replace_alu$806 [12] $auto$alumacc.cc:501:replace_alu$806 [13] $auto$alumacc.cc:501:replace_alu$806 [14] $auto$alumacc.cc:501:replace_alu$806 [15] $auto$alumacc.cc:501:replace_alu$806 [16] }
Optimizing cells in module \top.
Performed a total of 3 changes.

11.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

11.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.

11.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.19.9. Rerunning OPT passes. (Maybe there is more to do..)

11.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.

11.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \top.
Performed a total of 0 changes.

11.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

11.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.19.16. Finished OPT passes. (There is nothing left to do.)

11.20. Executing FSM pass (extract and optimize FSM).

11.20.1. Executing FSM_DETECT pass (finding FSMs in design).

11.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

11.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

11.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

11.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

11.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

11.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

11.21. Executing OPT pass (performing simple optimizations).

11.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

11.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.21.5. Finished fast OPT passes.

11.22. Executing MEMORY pass.

11.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

11.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$techmap\hwtop.hwmain_spram.readIdxQ.$memwr$\arr$SizedFIFO.v:229$581' in module `\top': merged $dff to cell.
Checking cell `$techmap\hwtop.hwmain_spram.readIdxQ.$memrd$\arr$SizedFIFO.v:202$566' in module `\top': merged address $dff to cell.

11.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 3 unused wires.

11.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

11.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\hwtop.hwmain_spram.readIdxQ.arr' in module `\top':
$techmap\hwtop.hwmain_spram.readIdxQ.$memwr$\arr$SizedFIFO.v:229$581 ($memwr)
$techmap\hwtop.hwmain_spram.readIdxQ.$memrd$\arr$SizedFIFO.v:202$566 ($memrd)

11.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing top.hwtop.hwmain_spram.readIdxQ.arr:
Properties: ports=2 bits=6 rports=1 wports=1 dbits=2 abits=2 words=3
Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
Bram geometry: abits=8 dbits=16 wports=0 rports=0
Estimated number of duplicates for more read ports: dups=1
Metrics for $__ICE40_RAM4K_M0: awaste=253 dwaste=14 bwaste=4090 waste=4090 efficiency=0
Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min efficiency 2' not met.
Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
Bram geometry: abits=9 dbits=8 wports=0 rports=0
Estimated number of duplicates for more read ports: dups=1
Metrics for $__ICE40_RAM4K_M123: awaste=509 dwaste=6 bwaste=4090 waste=4090 efficiency=0
Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min efficiency 2' not met.
Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
Bram geometry: abits=10 dbits=4 wports=0 rports=0
Estimated number of duplicates for more read ports: dups=1
Metrics for $__ICE40_RAM4K_M123: awaste=1021 dwaste=2 bwaste=4090 waste=4090 efficiency=0
Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
Bram geometry: abits=11 dbits=2 wports=0 rports=0
Estimated number of duplicates for more read ports: dups=1
Metrics for $__ICE40_RAM4K_M123: awaste=2045 dwaste=0 bwaste=4090 waste=4090 efficiency=0
Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
No acceptable bram resources found.

11.25. Executing TECHMAP pass (map to technology primitives).

11.25.1. Executing Verilog-2005 frontend: /home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

11.25.2. Continuing TECHMAP pass.
No more expansions possible.

11.26. Executing ICE40_BRAMINIT pass.

11.27. Executing OPT pass (performing simple optimizations).

11.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

11.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.

11.27.5. Finished fast OPT passes.

11.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \hwtop.hwmain_spram.readIdxQ.arr in module \top:
created 3 $dff cells and 0 static cells of width 2.
read interface: 1 $dff and 3 $mux cells.
write interface: 3 write mux blocks.

11.29. Executing OPT pass (performing simple optimizations).

11.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 1 cells.

11.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.

11.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \top.
Consolidated identical input bits for $mux cell $techmap\hwtop.hwmain_spram.$ternary$mkSpramManager.v:321$319:
Old ports: A=4'0000, B=4'1111, Y=\hwtop.hwmain_spram.sprams_0_ram_MASKWREN
New ports: A=1'0, B=1'1, Y=\hwtop.hwmain_spram.sprams_0_ram_MASKWREN [0]
New connections: \hwtop.hwmain_spram.sprams_0_ram_MASKWREN [3:1] = { \hwtop.hwmain_spram.sprams_0_ram_MASKWREN [0] \hwtop.hwmain_spram.sprams_0_ram_MASKWREN [0] \hwtop.hwmain_spram.sprams_0_ram_MASKWREN [0] }
Consolidated identical input bits for $mux cell $techmap\hwtop.hwmain_spram.$ternary$mkSpramManager.v:344$328:
Old ports: A=4'0000, B=4'1111, Y=\hwtop.hwmain_spram.sprams_1_ram_MASKWREN
New ports: A=1'0, B=1'1, Y=\hwtop.hwmain_spram.sprams_1_ram_MASKWREN [0]
New connections: \hwtop.hwmain_spram.sprams_1_ram_MASKWREN [3:1] = { \hwtop.hwmain_spram.sprams_1_ram_MASKWREN [0] \hwtop.hwmain_spram.sprams_1_ram_MASKWREN [0] \hwtop.hwmain_spram.sprams_1_ram_MASKWREN [0] }
Consolidated identical input bits for $mux cell $techmap\hwtop.hwmain_spram.$ternary$mkSpramManager.v:367$337:
Old ports: A=4'0000, B=4'1111, Y=\hwtop.hwmain_spram.sprams_2_ram_MASKWREN
New ports: A=1'0, B=1'1, Y=\hwtop.hwmain_spram.sprams_2_ram_MASKWREN [0]
New connections: \hwtop.hwmain_spram.sprams_2_ram_MASKWREN [3:1] = { \hwtop.hwmain_spram.sprams_2_ram_MASKWREN [0] \hwtop.hwmain_spram.sprams_2_ram_MASKWREN [0] \hwtop.hwmain_spram.sprams_2_ram_MASKWREN [0] }
Consolidated identical input bits for $mux cell $techmap\hwtop.hwmain_spram.$ternary$mkSpramManager.v:390$346:
Old ports: A=4'0000, B=4'1111, Y=\hwtop.hwmain_spram.sprams_3_ram_MASKWREN
New ports: A=1'0, B=1'1, Y=\hwtop.hwmain_spram.sprams_3_ram_MASKWREN [0]
New connections: \hwtop.hwmain_spram.sprams_3_ram_MASKWREN [3:1] = { \hwtop.hwmain_spram.sprams_3_ram_MASKWREN [0] \hwtop.hwmain_spram.sprams_3_ram_MASKWREN [0] \hwtop.hwmain_spram.sprams_3_ram_MASKWREN [0] }
Optimizing cells in module \top.
Performed a total of 4 changes.

11.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

11.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.

11.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.29.9. Rerunning OPT passes. (Maybe there is more to do..)

11.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.

11.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \top.
Performed a total of 0 changes.

11.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

11.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.29.16. Finished OPT passes. (There is nothing left to do.)

11.30. Executing ICE40_WRAPCARRY pass (wrap carries).

11.31. Executing TECHMAP pass (map to technology primitives).

11.31.1. Executing Verilog-2005 frontend: /home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

11.31.2. Executing Verilog-2005 frontend: /home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

11.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
No more expansions possible.

11.32. Executing ICE40_OPT pass (performing simple optimizations).

11.32.1. Running ICE40 specific optimizations.

11.32.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.32.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 96 cells.

11.32.4. Executing OPT_RMDFF pass (remove dff with constant values).

11.32.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 57 unused cells and 376 unused wires.

11.32.6. Rerunning OPT passes. (Removed registers in this run.)

11.32.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$794.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$794.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$805.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$805.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$816.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$805.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$827.slice[0].carry: CO=\cntr [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$830.slice[0].carry: CO=\hwtop.hwmain_weightAddr [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$833.slice[0].carry: CO=\hwtop.uart_clkcnt [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$836.slice[0].carry: CO=\hwtop.uart_bleft [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$839.slice[0].carry: CO=\hwtop.uart_curoutoff [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$842.slice[0].carry: CO=\hwtop.uart_samplecountdown [0]

11.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.32.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 1 cells.

11.32.10. Executing OPT_RMDFF pass (remove dff with constant values).

11.32.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 0 unused wires.

11.32.12. Rerunning OPT passes. (Removed registers in this run.)

11.32.13. Running ICE40 specific optimizations.

11.32.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.32.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.32.16. Executing OPT_RMDFF pass (remove dff with constant values).

11.32.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.32.18. Finished OPT passes. (There is nothing left to do.)

11.33. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

11.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
$_DFF_PP1_ -> $__DFFE_PP1
$_DFF_PP0_ -> $__DFFE_PP0
$_DFF_PN1_ -> $__DFFE_PN1
$_DFF_PN0_ -> $__DFFE_PN0
$_DFF_NP1_ -> $__DFFE_NP1
$_DFF_NP0_ -> $__DFFE_NP0
$_DFF_NN1_ -> $__DFFE_NN1
$_DFF_NN0_ -> $__DFFE_NN0
$_DFF_N_ -> $_DFFE_NP_
$_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1000 to $_DFFE_PP_ for $0\cntr[3:0] [3] -> \cntr [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1031 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_txdr[0:0] -> \hwtop.uart_txdr.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1032 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [0] -> \hwtop.uart_samplecountdown [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1033 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [1] -> \hwtop.uart_samplecountdown [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1034 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [2] -> \hwtop.uart_samplecountdown [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1035 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [3] -> \hwtop.uart_samplecountdown [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1036 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [4] -> \hwtop.uart_samplecountdown [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1037 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [5] -> \hwtop.uart_samplecountdown [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1038 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [6] -> \hwtop.uart_samplecountdown [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1039 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [7] -> \hwtop.uart_samplecountdown [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1040 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [8] -> \hwtop.uart_samplecountdown [8].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1041 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [9] -> \hwtop.uart_samplecountdown [9].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1042 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [10] -> \hwtop.uart_samplecountdown [10].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1043 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [11] -> \hwtop.uart_samplecountdown [11].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1044 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [12] -> \hwtop.uart_samplecountdown [12].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1045 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [13] -> \hwtop.uart_samplecountdown [13].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1046 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [14] -> \hwtop.uart_samplecountdown [14].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1047 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_samplecountdown[15:0] [15] -> \hwtop.uart_samplecountdown [15].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1052 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_outword[7:0] [0] -> \hwtop.uart_outword [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1053 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_outword[7:0] [1] -> \hwtop.uart_outword [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1054 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_outword[7:0] [2] -> \hwtop.uart_outword [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1055 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_outword[7:0] [3] -> \hwtop.uart_outword [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1056 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_outword[7:0] [4] -> \hwtop.uart_outword [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1057 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_outword[7:0] [5] -> \hwtop.uart_outword [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1058 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_outword[7:0] [6] -> \hwtop.uart_outword [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1059 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_outword[7:0] [7] -> \hwtop.uart_outword [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1060 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutoff[4:0] [0] -> \hwtop.uart_curoutoff [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1061 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutoff[4:0] [1] -> \hwtop.uart_curoutoff [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1062 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutoff[4:0] [2] -> \hwtop.uart_curoutoff [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1063 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutoff[4:0] [3] -> \hwtop.uart_curoutoff [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1064 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutoff[4:0] [4] -> \hwtop.uart_curoutoff [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1065 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [0] -> \hwtop.uart_curoutd [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1066 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [1] -> \hwtop.uart_curoutd [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1067 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [2] -> \hwtop.uart_curoutd [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1068 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [3] -> \hwtop.uart_curoutd [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1069 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [4] -> \hwtop.uart_curoutd [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1070 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [5] -> \hwtop.uart_curoutd [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1071 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [6] -> \hwtop.uart_curoutd [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1072 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [7] -> \hwtop.uart_curoutd [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1073 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [8] -> \hwtop.uart_curoutd [8].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1074 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [9] -> \hwtop.uart_curoutd [9].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1075 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_curoutd[10:0] [10] -> \hwtop.uart_curoutd [10].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1076 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [0] -> \hwtop.uart_clkcnt [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1077 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [1] -> \hwtop.uart_clkcnt [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1078 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [2] -> \hwtop.uart_clkcnt [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1079 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [3] -> \hwtop.uart_clkcnt [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1080 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [4] -> \hwtop.uart_clkcnt [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1081 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [5] -> \hwtop.uart_clkcnt [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1082 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [6] -> \hwtop.uart_clkcnt [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1083 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [7] -> \hwtop.uart_clkcnt [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1084 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [8] -> \hwtop.uart_clkcnt [8].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1085 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [9] -> \hwtop.uart_clkcnt [9].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1086 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [10] -> \hwtop.uart_clkcnt [10].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1087 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [11] -> \hwtop.uart_clkcnt [11].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1088 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [12] -> \hwtop.uart_clkcnt [12].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1089 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [13] -> \hwtop.uart_clkcnt [13].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1090 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [14] -> \hwtop.uart_clkcnt [14].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1091 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_clkcnt[15:0] [15] -> \hwtop.uart_clkcnt [15].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1092 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_bleft[3:0] [0] -> \hwtop.uart_bleft [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1093 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_bleft[3:0] [1] -> \hwtop.uart_bleft [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1094 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_bleft[3:0] [2] -> \hwtop.uart_bleft [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1095 to $_DFFE_PP_ for $techmap\hwtop.$0\uart_bleft[3:0] [3] -> \hwtop.uart_bleft [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1096 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightWriteBuffer[7:0] [0] -> \hwtop.hwmain_weightWriteBuffer [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1097 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightWriteBuffer[7:0] [1] -> \hwtop.hwmain_weightWriteBuffer [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1098 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightWriteBuffer[7:0] [2] -> \hwtop.hwmain_weightWriteBuffer [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1099 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightWriteBuffer[7:0] [3] -> \hwtop.hwmain_weightWriteBuffer [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1100 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightWriteBuffer[7:0] [4] -> \hwtop.hwmain_weightWriteBuffer [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1101 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightWriteBuffer[7:0] [5] -> \hwtop.hwmain_weightWriteBuffer [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1102 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightWriteBuffer[7:0] [6] -> \hwtop.hwmain_weightWriteBuffer [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1103 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightWriteBuffer[7:0] [7] -> \hwtop.hwmain_weightWriteBuffer [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1104 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [0] -> \hwtop.hwmain_weightAddr [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1105 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [1] -> \hwtop.hwmain_weightAddr [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1106 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [2] -> \hwtop.hwmain_weightAddr [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1107 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [3] -> \hwtop.hwmain_weightAddr [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1108 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [4] -> \hwtop.hwmain_weightAddr [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1109 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [5] -> \hwtop.hwmain_weightAddr [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1110 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [6] -> \hwtop.hwmain_weightAddr [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1111 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [7] -> \hwtop.hwmain_weightAddr [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1112 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [8] -> \hwtop.hwmain_weightAddr [8].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1113 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [9] -> \hwtop.hwmain_weightAddr [9].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1114 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [10] -> \hwtop.hwmain_weightAddr [10].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1115 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [11] -> \hwtop.hwmain_weightAddr [11].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1116 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [12] -> \hwtop.hwmain_weightAddr [12].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1117 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [13] -> \hwtop.hwmain_weightAddr [13].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1118 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [14] -> \hwtop.hwmain_weightAddr [14].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1119 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [15] -> \hwtop.hwmain_weightAddr [15].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1120 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_weightAddr[16:0] [16] -> \hwtop.hwmain_weightAddr [16].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1121 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_outD[8:0] [0] -> \hwtop.hwmain_outD [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1122 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_outD[8:0] [1] -> \hwtop.hwmain_outD [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1123 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_outD[8:0] [2] -> \hwtop.hwmain_outD [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1124 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_outD[8:0] [3] -> \hwtop.hwmain_outD [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1125 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_outD[8:0] [4] -> \hwtop.hwmain_outD [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1126 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_outD[8:0] [5] -> \hwtop.hwmain_outD [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1127 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_outD[8:0] [6] -> \hwtop.hwmain_outD [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1128 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_outD[8:0] [7] -> \hwtop.hwmain_outD [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1129 to $_DFFE_PP_ for $techmap\hwtop.$0\hwmain_outD[8:0] [8] -> \hwtop.hwmain_outD [8].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1598 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\empty_reg[0:0] -> \hwtop.uart_outQ.empty_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1599 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\full_reg[0:0] -> \hwtop.uart_outQ.full_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1600 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\data1_reg[7:0] [0] -> \hwtop.uart_outQ.data1_reg [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1601 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\data1_reg[7:0] [1] -> \hwtop.uart_outQ.data1_reg [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1602 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\data1_reg[7:0] [2] -> \hwtop.uart_outQ.data1_reg [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1603 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\data1_reg[7:0] [3] -> \hwtop.uart_outQ.data1_reg [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1604 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\data1_reg[7:0] [4] -> \hwtop.uart_outQ.data1_reg [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1605 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\data1_reg[7:0] [5] -> \hwtop.uart_outQ.data1_reg [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1606 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\data1_reg[7:0] [6] -> \hwtop.uart_outQ.data1_reg [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1607 to $_DFFE_PP_ for $techmap\hwtop.uart_outQ.$0\data1_reg[7:0] [7] -> \hwtop.uart_outQ.data1_reg [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1709 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\empty_reg[0:0] -> \hwtop.hwmain_outQ.empty_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1710 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\full_reg[0:0] -> \hwtop.hwmain_outQ.full_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1711 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\data1_reg[7:0] [0] -> \hwtop.hwmain_outQ.data1_reg [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1712 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\data1_reg[7:0] [1] -> \hwtop.hwmain_outQ.data1_reg [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1713 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\data1_reg[7:0] [2] -> \hwtop.hwmain_outQ.data1_reg [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1714 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\data1_reg[7:0] [3] -> \hwtop.hwmain_outQ.data1_reg [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1715 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\data1_reg[7:0] [4] -> \hwtop.hwmain_outQ.data1_reg [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1716 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\data1_reg[7:0] [5] -> \hwtop.hwmain_outQ.data1_reg [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1717 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\data1_reg[7:0] [6] -> \hwtop.hwmain_outQ.data1_reg [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1718 to $_DFFE_PP_ for $techmap\hwtop.hwmain_outQ.$0\data1_reg[7:0] [7] -> \hwtop.hwmain_outQ.data1_reg [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1802 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\empty_reg[0:0] -> \hwtop.uart_inQ.empty_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1803 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\full_reg[0:0] -> \hwtop.uart_inQ.full_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1804 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\data1_reg[7:0] [0] -> \hwtop.uart_inQ.data1_reg [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1805 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\data1_reg[7:0] [1] -> \hwtop.uart_inQ.data1_reg [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1806 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\data1_reg[7:0] [2] -> \hwtop.uart_inQ.data1_reg [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1807 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\data1_reg[7:0] [3] -> \hwtop.uart_inQ.data1_reg [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1808 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\data1_reg[7:0] [4] -> \hwtop.uart_inQ.data1_reg [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1809 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\data1_reg[7:0] [5] -> \hwtop.uart_inQ.data1_reg [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1810 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\data1_reg[7:0] [6] -> \hwtop.uart_inQ.data1_reg [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1811 to $_DFFE_PP_ for $techmap\hwtop.uart_inQ.$0\data1_reg[7:0] [7] -> \hwtop.uart_inQ.data1_reg [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2144 to $_DFFE_PP_ for $memory\hwtop.hwmain_spram.readIdxQ.arr$wrmux[2][0][0]$y$897 [0] -> \hwtop.hwmain_spram.readIdxQ.arr[2] [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2145 to $_DFFE_PP_ for $memory\hwtop.hwmain_spram.readIdxQ.arr$wrmux[2][0][0]$y$897 [1] -> \hwtop.hwmain_spram.readIdxQ.arr[2] [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2149 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\empty_reg[0:0] -> \hwtop.hwmain_spram.sprams_3_outQ.empty_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2150 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\full_reg[0:0] -> \hwtop.hwmain_spram.sprams_3_outQ.full_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2151 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [0] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2152 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [1] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2153 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [2] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2154 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [3] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2155 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [4] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2156 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [5] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2157 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [6] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2158 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [7] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2159 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [8] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [8].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2160 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [9] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [9].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2161 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [10] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [10].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2162 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [11] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [11].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2163 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [12] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [12].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2164 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [13] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [13].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2165 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [14] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [14].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2166 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_3_outQ.$0\data1_reg[15:0] [15] -> \hwtop.hwmain_spram.sprams_3_outQ.data1_reg [15].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2304 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\empty_reg[0:0] -> \hwtop.hwmain_spram.sprams_2_outQ.empty_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2305 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\full_reg[0:0] -> \hwtop.hwmain_spram.sprams_2_outQ.full_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2306 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [0] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2307 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [1] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2308 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [2] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2309 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [3] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2310 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [4] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2311 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [5] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2312 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [6] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2313 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [7] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2314 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [8] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [8].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2315 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [9] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [9].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2316 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [10] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [10].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2317 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [11] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [11].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2318 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [12] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [12].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2319 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [13] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [13].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2320 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [14] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [14].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2321 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_2_outQ.$0\data1_reg[15:0] [15] -> \hwtop.hwmain_spram.sprams_2_outQ.data1_reg [15].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2459 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\empty_reg[0:0] -> \hwtop.hwmain_spram.sprams_1_outQ.empty_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2460 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\full_reg[0:0] -> \hwtop.hwmain_spram.sprams_1_outQ.full_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2461 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [0] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2462 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [1] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2463 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [2] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2464 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [3] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2465 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [4] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2466 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [5] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2467 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [6] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2468 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [7] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2469 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [8] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [8].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2470 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [9] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [9].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2471 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [10] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [10].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2472 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [11] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [11].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2473 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [12] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [12].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2474 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [13] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [13].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2475 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [14] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [14].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2476 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_1_outQ.$0\data1_reg[15:0] [15] -> \hwtop.hwmain_spram.sprams_1_outQ.data1_reg [15].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2616 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\empty_reg[0:0] -> \hwtop.hwmain_spram.sprams_0_outQ.empty_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2617 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\full_reg[0:0] -> \hwtop.hwmain_spram.sprams_0_outQ.full_reg.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2618 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [0] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2619 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [1] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2620 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [2] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [2].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2621 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [3] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [3].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2622 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [4] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [4].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2623 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [5] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [5].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2624 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [6] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [6].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2625 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [7] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [7].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2626 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [8] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [8].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2627 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [9] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [9].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2628 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [10] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [10].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2629 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [11] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [11].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2630 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [12] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [12].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2631 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [13] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [13].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2632 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [14] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [14].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2633 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.sprams_0_outQ.$0\data1_reg[15:0] [15] -> \hwtop.hwmain_spram.sprams_0_outQ.data1_reg [15].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2769 to $_DFFE_PP_ for $memory\hwtop.hwmain_spram.readIdxQ.arr$wrmux[0][0][0]$y$881 [0] -> \hwtop.hwmain_spram.readIdxQ.arr[0] [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2770 to $_DFFE_PP_ for $memory\hwtop.hwmain_spram.readIdxQ.arr$wrmux[0][0][0]$y$881 [1] -> \hwtop.hwmain_spram.readIdxQ.arr[0] [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2771 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.readIdxQ.$0\hasodata[0:0] -> \hwtop.hwmain_spram.readIdxQ.hasodata.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2772 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.readIdxQ.$0\tail[1:0] [0] -> \hwtop.hwmain_spram.readIdxQ.tail [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2773 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.readIdxQ.$0\tail[1:0] [1] -> \hwtop.hwmain_spram.readIdxQ.tail [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2774 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.readIdxQ.$0\ring_empty[0:0] -> \hwtop.hwmain_spram.readIdxQ.ring_empty.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2775 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.readIdxQ.$0\not_ring_full[0:0] -> \hwtop.hwmain_spram.readIdxQ.not_ring_full.
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2776 to $_DFFE_PP_ for $techmap$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$655.$ternary$/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v:445$2794_Y [0] -> \hwtop.hwmain_spram.readIdxQ.D_OUT [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2777 to $_DFFE_PP_ for $techmap$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$655.$ternary$/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v:445$2794_Y [1] -> \hwtop.hwmain_spram.readIdxQ.D_OUT [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2890 to $_DFFE_PP_ for $memory\hwtop.hwmain_spram.readIdxQ.arr$wrmux[1][0][0]$y$889 [0] -> \hwtop.hwmain_spram.readIdxQ.arr[1] [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2891 to $_DFFE_PP_ for $memory\hwtop.hwmain_spram.readIdxQ.arr$wrmux[1][0][0]$y$889 [1] -> \hwtop.hwmain_spram.readIdxQ.arr[1] [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$945 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.readIdxQ.$0\head[1:0] [0] -> \hwtop.hwmain_spram.readIdxQ.head [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$946 to $_DFFE_PP_ for $techmap\hwtop.hwmain_spram.readIdxQ.$0\head[1:0] [1] -> \hwtop.hwmain_spram.readIdxQ.head [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$997 to $_DFFE_PP_ for $0\cntr[3:0] [0] -> \cntr [0].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$998 to $_DFFE_PP_ for $0\cntr[3:0] [1] -> \cntr [1].
converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$999 to $_DFFE_PP_ for $0\cntr[3:0] [2] -> \cntr [2].

11.35. Executing TECHMAP pass (map to technology primitives).

11.35.1. Executing Verilog-2005 frontend: /home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

11.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.

11.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$839.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$842.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$833.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$827.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$830.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$836.slice[0].carry ($lut).

11.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$997 (SB_DFFE): \cntr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$998 (SB_DFFE): \cntr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$999 (SB_DFFE): \cntr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1000 (SB_DFFE): \cntr [3] = 0

11.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
Merging $auto$simplemap.cc:277:simplemap_mux$1397 (A=1'0, B=\hwtop.hwmain_weightAddr [16], S=\hwtop.MUX_hwmain_spram_req_1__SEL_1) into $auto$simplemap.cc:420:simplemap_dff$2891 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2186 (A=$techmap\hwtop.hwmain_spram.sprams_3_outQ.$procmux$707_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2149 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1239 (A=\hwtop.uart_curoutd_D_IN [1], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1066 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1322 (A=\hwtop.uart_curoutd [0], B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1031 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1291 (A=\hwtop.uart_samplecountdown_D_IN [1], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1033 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1823 (A=$techmap\hwtop.uart_inQ.$procmux$729_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1802 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1294 (A=\hwtop.uart_samplecountdown_D_IN [4], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1036 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1295 (A=\hwtop.uart_samplecountdown_D_IN [5], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1037 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1130 (A=\hwtop.hwmain_spram.resp [0], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1121 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1300 (A=\hwtop.uart_samplecountdown_D_IN [10], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1042 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1301 (A=\hwtop.uart_samplecountdown_D_IN [11], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1043 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1302 (A=\hwtop.uart_samplecountdown_D_IN [12], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1044 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1303 (A=\hwtop.uart_samplecountdown_D_IN [13], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1045 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1304 (A=\hwtop.uart_samplecountdown_D_IN [14], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1046 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1305 (A=\hwtop.uart_samplecountdown_D_IN [15], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1047 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1287 (A=\hwtop.uart_rxin [2], B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1049 (SB_DFF).
Merging $auto$simplemap.cc:277:simplemap_mux$1290 (A=\hwtop.uart_samplecountdown_D_IN [0], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1032 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1619 (A=$techmap\hwtop.uart_outQ.$procmux$729_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1598 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1289 (A=\serial_rxd, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1051 (SB_DFF).
Merging $auto$simplemap.cc:277:simplemap_mux$1271 (A=\hwtop.uart_outword [2], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1053 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1286 (A=\hwtop.uart_rxin [1], B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1048 (SB_DFF).
Merging $auto$simplemap.cc:277:simplemap_mux$1272 (A=\hwtop.uart_outword [3], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1054 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1273 (A=\hwtop.uart_outword [4], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1055 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1274 (A=\hwtop.uart_outword [5], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1056 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1275 (A=\hwtop.uart_outword [6], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1057 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1276 (A=\hwtop.uart_outword [7], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1058 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1277 (A=\hwtop.uart_outword_D_IN [7], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1059 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1261 (A=\hwtop.uart_curoutoff_D_IN [1], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1061 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1270 (A=\hwtop.uart_outword [1], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1052 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1262 (A=\hwtop.uart_curoutoff_D_IN [2], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1062 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1263 (A=\hwtop.uart_curoutoff_D_IN [3], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1063 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1298 (A=\hwtop.uart_samplecountdown_D_IN [8], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1040 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1297 (A=\hwtop.uart_samplecountdown_D_IN [7], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1039 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1260 (A=\hwtop.uart_curoutoff_D_IN [0], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1060 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1240 (A=\hwtop.uart_curoutd_D_IN [2], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1067 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1241 (A=\hwtop.uart_curoutd_D_IN [3], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1068 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1242 (A=\hwtop.uart_curoutd_D_IN [4], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1069 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1243 (A=\hwtop.uart_curoutd_D_IN [5], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1070 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1264 (A=\hwtop.uart_curoutoff_D_IN [4], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1064 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1244 (A=\hwtop.uart_curoutd_D_IN [6], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1071 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1245 (A=\hwtop.uart_curoutd_D_IN [7], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1072 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1246 (A=\hwtop.uart_curoutd_D_IN [8], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1073 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1247 (A=\hwtop.uart_curoutd_D_IN [9], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1074 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1238 (A=\hwtop.uart_curoutd_D_IN [0], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1065 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1207 (A=\hwtop.uart_clkcnt_D_IN [1], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1077 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1208 (A=\hwtop.uart_clkcnt_D_IN [2], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1078 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1209 (A=\hwtop.uart_clkcnt_D_IN [3], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1079 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1210 (A=\hwtop.uart_clkcnt_D_IN [4], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1080 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1211 (A=\hwtop.uart_clkcnt_D_IN [5], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1081 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1212 (A=\hwtop.uart_clkcnt_D_IN [6], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1082 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1213 (A=\hwtop.uart_clkcnt_D_IN [7], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1083 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1214 (A=\hwtop.uart_clkcnt_D_IN [8], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1084 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1215 (A=\hwtop.uart_clkcnt_D_IN [9], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1085 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1216 (A=\hwtop.uart_clkcnt_D_IN [10], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1086 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1217 (A=\hwtop.uart_clkcnt_D_IN [11], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1087 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1218 (A=\hwtop.uart_clkcnt_D_IN [12], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1088 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1219 (A=\hwtop.uart_clkcnt_D_IN [13], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1089 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1220 (A=\hwtop.uart_clkcnt_D_IN [14], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1090 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1206 (A=\hwtop.uart_clkcnt_D_IN [0], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1076 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1221 (A=\hwtop.uart_clkcnt_D_IN [15], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1091 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1199 (A=\hwtop.uart_bleft_D_IN [1], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1093 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1200 (A=\hwtop.uart_bleft_D_IN [2], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1094 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1198 (A=\hwtop.uart_bleft_D_IN [0], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1092 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1201 (A=\hwtop.uart_bleft_D_IN [3], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1095 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1183 (A=\hwtop.uart_outQ.data0_reg [1], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1097 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1185 (A=\hwtop.uart_outQ.data0_reg [3], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1099 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1186 (A=\hwtop.uart_outQ.data0_reg [4], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1100 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1187 (A=\hwtop.uart_outQ.data0_reg [5], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1101 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1188 (A=\hwtop.uart_outQ.data0_reg [6], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1102 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1182 (A=\hwtop.uart_outQ.data0_reg [0], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1096 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1189 (A=\hwtop.uart_outQ.data0_reg [7], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1103 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1149 (A=\hwtop.hwmain_weightAddr_D_IN [1], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1105 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1150 (A=\hwtop.hwmain_weightAddr_D_IN [2], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1106 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1151 (A=\hwtop.hwmain_weightAddr_D_IN [3], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1107 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1152 (A=\hwtop.hwmain_weightAddr_D_IN [4], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1108 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1153 (A=\hwtop.hwmain_weightAddr_D_IN [5], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1109 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1154 (A=\hwtop.hwmain_weightAddr_D_IN [6], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1110 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1155 (A=\hwtop.hwmain_weightAddr_D_IN [7], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1111 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1156 (A=\hwtop.hwmain_weightAddr_D_IN [8], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1112 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1157 (A=\hwtop.hwmain_weightAddr_D_IN [9], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1113 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1158 (A=\hwtop.hwmain_weightAddr_D_IN [10], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1114 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1159 (A=\hwtop.hwmain_weightAddr_D_IN [11], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1115 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1160 (A=\hwtop.hwmain_weightAddr_D_IN [12], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1116 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1161 (A=\hwtop.hwmain_weightAddr_D_IN [13], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1117 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1162 (A=\hwtop.hwmain_weightAddr_D_IN [14], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1118 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1163 (A=\hwtop.hwmain_weightAddr_D_IN [15], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1119 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1148 (A=$auto$simplemap.cc:309:simplemap_lut$5599, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1104 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1164 (A=\hwtop.hwmain_weightAddr_D_IN [16], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1120 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1131 (A=\hwtop.hwmain_spram.resp [1], B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1122 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1132 (A=\hwtop.hwmain_spram.resp [2], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1123 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1133 (A=\hwtop.hwmain_spram.resp [3], B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1124 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1134 (A=\hwtop.hwmain_spram.resp [4], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1125 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1135 (A=\hwtop.hwmain_spram.resp [5], B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1126 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1136 (A=\hwtop.hwmain_spram.resp [6], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1127 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1137 (A=\hwtop.hwmain_spram.resp [7], B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1128 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1288 (A=\hwtop.uart_rxin [3], B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1050 (SB_DFF).
Merging $auto$simplemap.cc:277:simplemap_mux$1299 (A=\hwtop.uart_samplecountdown_D_IN [9], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1041 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1616 (A=$techmap\hwtop.uart_outQ.$procmux$740_Y, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1599 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1730 (A=$techmap\hwtop.hwmain_outQ.$procmux$729_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1709 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1727 (A=$techmap\hwtop.hwmain_outQ.$procmux$740_Y, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1710 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1292 (A=\hwtop.uart_samplecountdown_D_IN [2], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1034 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1293 (A=\hwtop.uart_samplecountdown_D_IN [3], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1035 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1820 (A=$techmap\hwtop.uart_inQ.$procmux$740_Y, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1803 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1296 (A=\hwtop.uart_samplecountdown_D_IN [6], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1038 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1396 (A=1'0, B=\hwtop.hwmain_weightAddr [15], S=\hwtop.MUX_hwmain_spram_req_1__SEL_1) into $auto$simplemap.cc:420:simplemap_dff$2890 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1396 (A=1'0, B=\hwtop.hwmain_weightAddr [15], S=\hwtop.MUX_hwmain_spram_req_1__SEL_1) into $auto$simplemap.cc:420:simplemap_dff$2144 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2183 (A=$techmap\hwtop.hwmain_spram.sprams_3_outQ.$procmux$718_Y, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2150 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1397 (A=1'0, B=\hwtop.hwmain_weightAddr [16], S=\hwtop.MUX_hwmain_spram_req_1__SEL_1) into $auto$simplemap.cc:420:simplemap_dff$2145 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2341 (A=$techmap\hwtop.hwmain_spram.sprams_2_outQ.$procmux$707_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2304 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2338 (A=$techmap\hwtop.hwmain_spram.sprams_2_outQ.$procmux$718_Y, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2305 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2496 (A=$techmap\hwtop.hwmain_spram.sprams_1_outQ.$procmux$707_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2459 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2493 (A=$techmap\hwtop.hwmain_spram.sprams_1_outQ.$procmux$718_Y, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2460 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2787 (A=\hwtop.hwmain_spram.readIdxQ.next_head [0], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$945 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2653 (A=$techmap\hwtop.hwmain_spram.sprams_0_outQ.$procmux$707_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2616 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2650 (A=$techmap\hwtop.hwmain_spram.sprams_0_outQ.$procmux$718_Y, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2617 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1396 (A=1'0, B=\hwtop.hwmain_weightAddr [15], S=\hwtop.MUX_hwmain_spram_req_1__SEL_1) into $auto$simplemap.cc:420:simplemap_dff$2769 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2814 (A=$techmap$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$661.$and$/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v:434$2781_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2771 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1397 (A=1'0, B=\hwtop.hwmain_weightAddr [16], S=\hwtop.MUX_hwmain_spram_req_1__SEL_1) into $auto$simplemap.cc:420:simplemap_dff$2770 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2791 (A=$techmap$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$670.$reduce_or$/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v:441$2797_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2772 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2785 (A=$techmap$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$688.$reduce_or$/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v:441$2783_Y, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2774 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2778 (A=$techmap$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$697.$reduce_or$/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v:441$2783_Y, B=1'1, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2775 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2792 (A=$techmap$techmap\hwtop.hwmain_spram.readIdxQ.$procmux$670.$reduce_or$/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v:441$2798_Y, B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$2773 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$2788 (A=\hwtop.hwmain_spram.readIdxQ.next_head [1], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$946 (SB_DFFE).
Merging $auto$simplemap.cc:277:simplemap_mux$1184 (A=\hwtop.uart_outQ.data0_reg [2], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$1007) into $auto$simplemap.cc:420:simplemap_dff$1098 (SB_DFFE).

11.40. Executing ICE40_OPT pass (performing simple optimizations).

11.40.1. Running ICE40 specific optimizations.

11.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 114 cells.

11.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

11.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 118 unused cells and 1782 unused wires.

11.40.6. Rerunning OPT passes. (Removed registers in this run.)

11.40.7. Running ICE40 specific optimizations.

11.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

11.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

11.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

11.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

11.40.12. Finished OPT passes. (There is nothing left to do.)

11.41. Executing TECHMAP pass (map to technology primitives).

11.41.1. Executing Verilog-2005 frontend: /home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

11.41.2. Continuing TECHMAP pass.
No more expansions possible.

11.42. Executing ABC pass (technology mapping using ABC).

11.42.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1229 gates and 1626 wires to a netlist network with 395 inputs and 370 outputs.

11.42.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lut <abc-temp-dir>/lutdefs.txt
ABC: + strash
ABC: + ifraig
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2
ABC: + dretime
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + if
ABC: + mfs2
ABC: + lutpack -S 1
ABC: + dress
ABC: Total number of equiv classes                =     356.
ABC: Participating nodes from both networks       =     758.
ABC: Participating nodes from the first network   =     356. (  57.89 % of nodes)
ABC: Participating nodes from the second network  =     402. (  65.37 % of nodes)
ABC: Node pairs (any polarity)                    =     356. (  57.89 % of names can be moved)
ABC: Node pairs (same polarity)                   =     337. (  54.80 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif

11.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      614
ABC RESULTS:        internal signals:      861
ABC RESULTS:           input signals:      395
ABC RESULTS:          output signals:      370
Removing temp directory.

11.43. Executing ICE40_WRAPCARRY pass (wrap carries).

11.44. Executing TECHMAP pass (map to technology primitives).

11.44.1. Executing Verilog-2005 frontend: /home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

11.44.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 53 unused cells and 1061 unused wires.

11.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      667
1-LUT               36
2-LUT              232
3-LUT              151
4-LUT              248
with \SB_CARRY      50

Eliminating LUTs.
Number of LUTs:      667
1-LUT               36
2-LUT              232
3-LUT              151
4-LUT              248
with \SB_CARRY      50

Combining LUTs.
Number of LUTs:      659
1-LUT               36
2-LUT              222
3-LUT              147
4-LUT              254
with \SB_CARRY      50

Eliminated 0 LUTs.
Combined 8 LUTs.

11.46. Executing TECHMAP pass (map to technology primitives).

11.46.1. Executing Verilog-2005 frontend: /home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/swjun/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

11.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110010101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101111011101101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001000100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000100001 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 1320 unused wires.

11.47. Executing AUTONAME pass.
Renamed 7604 objects in module top (34 iterations).

11.48. Executing HIERARCHY pass (managing design hierarchy).

11.48.1. Analyzing design hierarchy..
Top module:  \top

11.48.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

11.49. Printing statistics.

=== top ===

Number of wires:                657
Number of wire bits:           1966
Number of public wires:         657
Number of public wire bits:    1966
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:               1069
SB_CARRY                       97
SB_DFF                         88
SB_DFFE                        96
SB_DFFESR                     106
SB_DFFESS                      14
SB_DFFSS                        4
SB_HFOSC                        1
SB_LUT4                       659
SB_SPRAM256KA                   4

11.50. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

11.51. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 62868abcc2
CPU: user 0.94s system 0.01s, MEM: 36.08 MB total, 32.39 MB resident
Yosys 0.9+932 (git sha1 UNKNOWN, x86_64-linux-gnu-g++ 7.3.0-16ubuntu3 -O3 -DNDEBUG)
Time spent: 23% 20x opt_expr (0 sec), 17% 21x opt_clean (0 sec), ...
nextpnr-ice40 --up5k --package sg48 --json hardware.json --asc hardware.asc --pcf up5k.pcf
Info: Importing module top
Info: Rule checker, verifying imported design
Info: Checksum: 0x51b4c6b5

Info: constrained 'led_blue' to bel 'X5/Y31/io0'
Info: constrained 'led_green' to bel 'X4/Y31/io0'
Info: constrained 'led_red' to bel 'X6/Y31/io0'
Info: constrained 'serial_txd' to bel 'X23/Y0/io0'
Info: constrained 'serial_rxd' to bel 'X24/Y0/io0'
Info: constrained 'spi_cs' to bel 'X24/Y0/io1'

Info: Packing constants..
Info: Packing IOs..
Info: Packing LUT-FFs..
Info:      471 LCs used as LUT4 only
Info:      188 LCs used as LUT4 and DFF
Info: Packing non-LUT FFs..
Info:      120 LCs used as DFF only
Info: Packing carries..
Info:       50 LCs used as CARRY only
Info: Packing RAMs..
Info: Placing PLLs..
Info: Packing special functions..
Info:   constrained ICESTORM_HFOSC 'inthosc_OSC' to X0/Y31/hfosc_1
Info: Promoting globals..
Info: promoting hwtop.hwmain_outD_SB_DFFE_Q_D_SB_LUT4_I3_O [reset] (fanout 118)
Info: promoting hwtop.hwmain_weightWriteBuffer_SB_DFFESR_Q_E_SB_LUT4_I2_O [cen] (fanout 17)
Info: promoting hwtop.hwmain_spram.sprams_0_outQ.d1di [cen] (fanout 16)
Info: promoting hwtop.hwmain_spram.sprams_1_outQ.d1di [cen] (fanout 16)
Info: promoting hwtop.hwmain_spram.sprams_2_outQ.d1di [cen] (fanout 16)
Info: Constraining chains...
Info:       12 LCs used to legalise carry chains.
Info: Checksum: 0x39499cfe

Info: Annotating ports with timing budgets for target frequency 12.00 MHz
Info: Checksum: 0x92c952a0

Info: Device utilisation:
Info: 	         ICESTORM_LC:   843/ 5280    15%
Info: 	        ICESTORM_RAM:     0/   30     0%
Info: 	               SB_IO:     6/   96     6%
Info: 	               SB_GB:     6/    8    75%
Info: 	        ICESTORM_PLL:     0/    1     0%
Info: 	         SB_WARMBOOT:     0/    1     0%
Info: 	        ICESTORM_DSP:     0/    8     0%
Info: 	      ICESTORM_HFOSC:     1/    1   100%
Info: 	      ICESTORM_LFOSC:     0/    1     0%
Info: 	              SB_I2C:     0/    2     0%
Info: 	              SB_SPI:     0/    2     0%
Info: 	              IO_I3C:     0/    2     0%
Info: 	         SB_LEDDA_IP:     0/    1     0%
Info: 	         SB_RGBA_DRV:     0/    1     0%
Info: 	      ICESTORM_SPRAM:     4/    4   100%

Info: Placed 8 cells based on constraints.
Info: Creating initial analytic placement for 746 cells, random placement wirelen = 21707.
Info:     at initial placer iter 0, wirelen = 320
Info:     at initial placer iter 1, wirelen = 192
Info:     at initial placer iter 2, wirelen = 234
Info:     at initial placer iter 3, wirelen = 192
Info: Running main analytical placer.
Info:     at iteration #1, type ALL: wirelen solved = 234, spread = 6966, legal = 7358; time = 0.01s
Info:     at iteration #2, type ALL: wirelen solved = 255, spread = 5501, legal = 6568; time = 0.01s
Info:     at iteration #3, type ALL: wirelen solved = 406, spread = 5263, legal = 6281; time = 0.01s
Info:     at iteration #4, type ALL: wirelen solved = 538, spread = 4954, legal = 6078; time = 0.01s
Info:     at iteration #5, type ALL: wirelen solved = 603, spread = 4572, legal = 5590; time = 0.01s
Info:     at iteration #6, type ALL: wirelen solved = 700, spread = 4467, legal = 5698; time = 0.01s
Info:     at iteration #7, type ALL: wirelen solved = 791, spread = 4433, legal = 5705; time = 0.01s
Info:     at iteration #8, type ALL: wirelen solved = 920, spread = 4433, legal = 5755; time = 0.01s
Info:     at iteration #9, type ALL: wirelen solved = 1012, spread = 4212, legal = 5531; time = 0.01s
Info:     at iteration #10, type ALL: wirelen solved = 1056, spread = 4267, legal = 5431; time = 0.01s
Info:     at iteration #11, type ALL: wirelen solved = 1151, spread = 4267, legal = 5649; time = 0.02s
Info:     at iteration #12, type ALL: wirelen solved = 1226, spread = 4454, legal = 5720; time = 0.01s
Info:     at iteration #13, type ALL: wirelen solved = 1284, spread = 4050, legal = 5354; time = 0.01s
Info:     at iteration #14, type ALL: wirelen solved = 1340, spread = 4454, legal = 5630; time = 0.01s
Info:     at iteration #15, type ALL: wirelen solved = 1332, spread = 4177, legal = 5696; time = 0.01s
Info:     at iteration #16, type ALL: wirelen solved = 1356, spread = 4308, legal = 5896; time = 0.01s
Info:     at iteration #17, type ALL: wirelen solved = 1369, spread = 4166, legal = 5830; time = 0.01s
Info:     at iteration #18, type ALL: wirelen solved = 1487, spread = 4139, legal = 5746; time = 0.01s
Info: HeAP Placer Time: 0.29s
Info:   of which solving equations: 0.16s
Info:   of which spreading cells: 0.03s
Info:   of which strict legalisation: 0.04s

Info: Running simulated annealing placer for refinement.
Info:   at iteration #1: temp = 0.000000, timing cost = 330, wirelen = 5354
Info:   at iteration #5: temp = 0.000000, timing cost = 275, wirelen = 4489
Info:   at iteration #10: temp = 0.000000, timing cost = 266, wirelen = 4178
Info:   at iteration #15: temp = 0.000000, timing cost = 264, wirelen = 4056
Info:   at iteration #20: temp = 0.000000, timing cost = 257, wirelen = 3970
Info:   at iteration #25: temp = 0.000000, timing cost = 251, wirelen = 3941
Info:   at iteration #25: temp = 0.000000, timing cost = 249, wirelen = 3948
Info: SA placement time 0.43s

Info: Max frequency for clock 'clk': 25.34 MHz (PASS at 12.00 MHz)

Info: Max delay <async>     -> posedge clk: 4.01 ns
Info: Max delay posedge clk -> <async>    : 5.08 ns

Info: Slack histogram:
Info:  legend: * represents 3 endpoint(s)
Info:          + represents [1,3) endpoint(s)
Info: [ 43865,  45640) |*********+
Info: [ 45640,  47415) |
Info: [ 47415,  49190) |****+
Info: [ 49190,  50965) |**+
Info: [ 50965,  52740) |******+
Info: [ 52740,  54515) |***********************+
Info: [ 54515,  56290) |*******************************+
Info: [ 56290,  58065) |*******************************************+
Info: [ 58065,  59840) |*********+
Info: [ 59840,  61615) |********************+
Info: [ 61615,  63390) |******+
Info: [ 63390,  65165) |*********+
Info: [ 65165,  66940) |*************+
Info: [ 66940,  68715) |**********************************+
Info: [ 68715,  70490) |***********+
Info: [ 70490,  72265) |************+
Info: [ 72265,  74040) |**********+
Info: [ 74040,  75815) |******************+
Info: [ 75815,  77590) |*******************+
Info: [ 77590,  79365) |************************************************************
Info: Checksum: 0x419dd5bc

Info: Routing..
Info: Setting up routing queue.
Info: Routing 2607 arcs.
Info:            |   (re-)routed arcs  |   delta    | remaining
Info:    IterCnt |  w/ripup   wo/ripup |  w/r  wo/r |      arcs
Info:       1000 |       24        975 |   24   975 |      1634
Info:       2000 |      101       1898 |   77   923 |       737
Info:       2932 |      251       2681 |  150   783 |         0
Info: Routing complete.
Info: Route time 0.31s
Info: Checksum: 0xaae8aa63

Info: Critical path report for clock 'clk' (posedge -> posedge):
Info: curr total
Info:  1.4  1.4  Source hwtop.hwmain_weightAddr_D_IN_SB_LUT4_O_4_LC.O
Info:  3.0  4.3    Net hwtop.MUX_hwmain_spram_req_1__VAL_2[2] budget 0.000000 ns (5,5) -> (7,2)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I2_I1_SB_CARRY_CO_CI_SB_CARRY_CO_7_I1_SB_LUT4_O_LC.I3
Info:  0.9  5.2  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I2_I1_SB_CARRY_CO_CI_SB_CARRY_CO_7_I1_SB_LUT4_O_LC.O
Info:  1.8  7.0    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I2_I1_SB_CARRY_CO_CI_SB_CARRY_CO_7_I1 budget 0.000000 ns (7,2) -> (7,3)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_7$CARRY.I2
Info:  0.6  7.6  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_7$CARRY.COUT
Info:  0.0  7.6    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[3] budget 0.000000 ns (7,3) -> (7,3)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_6$CARRY.CIN
Info:  0.3  7.9  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_6$CARRY.COUT
Info:  0.0  7.9    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[4] budget 0.000000 ns (7,3) -> (7,3)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_5$CARRY.CIN
Info:  0.3  8.1  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_5$CARRY.COUT
Info:  0.0  8.1    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[5] budget 0.000000 ns (7,3) -> (7,3)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_4$CARRY.CIN
Info:  0.3  8.4  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_4$CARRY.COUT
Info:  0.0  8.4    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[6] budget 0.000000 ns (7,3) -> (7,3)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_3$CARRY.CIN
Info:  0.3  8.7  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_3$CARRY.COUT
Info:  0.0  8.7    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[7] budget 0.000000 ns (7,3) -> (7,3)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_2$CARRY.CIN
Info:  0.3  9.0  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_2$CARRY.COUT
Info:  0.6  9.5    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[8] budget 0.560000 ns (7,3) -> (7,4)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_1$CARRY.CIN
Info:  0.3  9.8  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_1$CARRY.COUT
Info:  0.0  9.8    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[9] budget 0.000000 ns (7,4) -> (7,4)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO$CARRY.CIN
Info:  0.3 10.1  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO$CARRY.COUT
Info:  0.0 10.1    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[10] budget 0.000000 ns (7,4) -> (7,4)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_13$CARRY.CIN
Info:  0.3 10.4  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_13$CARRY.COUT
Info:  0.0 10.4    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[11] budget 0.000000 ns (7,4) -> (7,4)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_12$CARRY.CIN
Info:  0.3 10.6  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_12$CARRY.COUT
Info:  0.0 10.6    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[12] budget 0.000000 ns (7,4) -> (7,4)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_11$CARRY.CIN
Info:  0.3 10.9  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_11$CARRY.COUT
Info:  0.0 10.9    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[13] budget 0.000000 ns (7,4) -> (7,4)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_10$CARRY.CIN
Info:  0.3 11.2  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_10$CARRY.COUT
Info:  0.0 11.2    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[14] budget 0.000000 ns (7,4) -> (7,4)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_9$CARRY.CIN
Info:  0.3 11.5  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_9$CARRY.COUT
Info:  0.0 11.5    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[15] budget 0.000000 ns (7,4) -> (7,4)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_8$CARRY.CIN
Info:  0.3 11.8  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI_SB_CARRY_CO_8$CARRY.COUT
Info:  0.6 12.3    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO_CI[16] budget 0.560000 ns (7,4) -> (7,5)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO$CARRY.CIN
Info:  0.3 12.6  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0_SB_CARRY_CO$CARRY.COUT
Info:  0.7 13.3    Net $nextpnr_ICESTORM_LC_9$I3 budget 0.660000 ns (7,5) -> (7,5)
Info:                Sink $nextpnr_ICESTORM_LC_9.I3
Info:  0.9 14.1  Source $nextpnr_ICESTORM_LC_9.O
Info:  1.8 15.9    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_I0 budget 17.059999 ns (7,5) -> (8,5)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_LC.I0
Info:  1.3 17.2  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_LC.O
Info:  1.8 18.9    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_O budget 7.089000 ns (8,5) -> (9,4)
Info:                Sink hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_O_SB_LUT4_I3_LC.I3
Info:  0.9 19.8  Source hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_O_SB_LUT4_I3_LC.O
Info:  3.5 23.3    Net hwtop.hwmain_spram.readIdxQ.not_ring_full_SB_LUT4_I1_2_O_SB_LUT4_I3_O_SB_LUT4_I1_O_SB_LUT4_I3_O budget 7.236000 ns (9,4) -> (3,8)
Info:                Sink hwtop.hwmain_spram.sprams_1_ram_WREN_SB_LUT4_O_LC.I3
Info:  0.9 24.2  Source hwtop.hwmain_spram.sprams_1_ram_WREN_SB_LUT4_O_LC.O
Info:  1.8 25.9    Net hwtop.hwmain_spram.sprams_1_ram_MASKWREN[0] budget 6.817000 ns (3,8) -> (4,9)
Info:                Sink hwtop.hwmain_spram.sprams_1_outQ.d1di_SB_LUT4_O_LC.I3
Info:  0.9 26.8  Source hwtop.hwmain_spram.sprams_1_outQ.d1di_SB_LUT4_O_LC.O
Info:  5.7 32.5    Net hwtop.hwmain_spram.sprams_1_outQ.d1di budget 8.684000 ns (4,9) -> (6,31)
Info:                Sink $gbuf_hwtop.hwmain_spram.sprams_1_outQ.d1di_$glb_ce.USER_SIGNAL_TO_GLOBAL_BUFFER
Info:  1.6 34.1  Source $gbuf_hwtop.hwmain_spram.sprams_1_outQ.d1di_$glb_ce.GLOBAL_BUFFER_OUTPUT
Info:  0.7 34.8    Net hwtop.hwmain_spram.sprams_1_outQ.d1di_$glb_ce budget 8.681000 ns (6,31) -> (1,7)
Info:                Sink hwtop.hwmain_spram.sprams_1_outQ.data1_reg_SB_DFFE_Q_DFFLC.CEN
Info:  0.1 34.9  Setup hwtop.hwmain_spram.sprams_1_outQ.data1_reg_SB_DFFE_Q_DFFLC.CEN
Info: 13.2 ns logic, 21.7 ns routing

Info: Critical path report for cross-domain path '<async>' -> 'posedge clk':
Info: curr total
Info:  0.0  0.0  Source serial_rxd$sb_io.D_IN_0
Info:  3.0  3.0    Net serial_rxd$SB_IO_IN budget 82.098999 ns (24,0) -> (22,1)
Info:                Sink hwtop.uart_rxin_SB_DFFSS_Q_DFFLC.I0
Info:  1.2  4.2  Setup hwtop.uart_rxin_SB_DFFSS_Q_DFFLC.I0
Info: 1.2 ns logic, 3.0 ns routing

Info: Critical path report for cross-domain path 'posedge clk' -> '<async>':
Info: curr total
Info:  1.4  1.4  Source hwtop.uart_txdr_SB_DFFESS_Q_DFFLC.O
Info:  3.5  4.9    Net serial_txd$SB_IO_OUT budget 81.943001 ns (17,4) -> (23,0)
Info:                Sink serial_txd$sb_io.D_OUT_0
Info: 1.4 ns logic, 3.5 ns routing

Info: Max frequency for clock 'clk': 28.63 MHz (PASS at 12.00 MHz)

Info: Max delay <async>     -> posedge clk: 4.19 ns
Info: Max delay posedge clk -> <async>    : 4.89 ns

Info: Slack histogram:
Info:  legend: * represents 3 endpoint(s)
Info:          + represents [1,3) endpoint(s)
Info: [ 48405,  49953) |*******+
Info: [ 49953,  51501) |********+
Info: [ 51501,  53049) |**********************+
Info: [ 53049,  54597) |***********+
Info: [ 54597,  56145) |**********************************************************+
Info: [ 56145,  57693) |**************+
Info: [ 57693,  59241) |*********+
Info: [ 59241,  60789) |**********+
Info: [ 60789,  62337) |******+
Info: [ 62337,  63885) |***+
Info: [ 63885,  65433) |***********+
Info: [ 65433,  66981) |************+
Info: [ 66981,  68529) |**+
Info: [ 68529,  70077) |*****+
Info: [ 70077,  71625) |*****+
Info: [ 71625,  73173) |************************************************+
Info: [ 73173,  74721) |***********+
Info: [ 74721,  76269) |***********+
Info: [ 76269,  77817) |***************+
Info: [ 77817,  79365) |************************************************************
icepack hardware.asc hardware.bin
====================================================================================================== [SUCCESS] Took 3.13 seconds ======================================================================================================
